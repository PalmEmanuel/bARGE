{
  "tables": {
    "advisorresources": {
      "name": "advisorresources",
      "resourceTypes": [
        "microsoft.advisor/assessments",
        "microsoft.advisor/configurations",
        "microsoft.advisor/recommendations",
        "microsoft.advisor/recommendations/suppressions",
        "microsoft.advisor/resiliencyreviews",
        "microsoft.advisor/suppressions",
        "microsoft.advisor/triagerecommendations",
        "microsoft.advisor/triageresources"
      ],
      "examples": [
        {
          "code": "AdvisorResources\n| where type == 'microsoft.advisor/recommendations'\n| where properties.category == 'Cost'\n| extend\nresources = tostring(properties.resourceMetadata.resourceId),\nsavings = todouble(properties.extendedProperties.savingsAmount),\nsolution = tostring(properties.shortDescription.solution),\ncurrency = tostring(properties.extendedProperties.savingsCurrency)\n| summarize\ndcount(resources),\nbin(sum(savings), 0.01)\nby solution, currency\n| project solution, dcount_resources, sum_savings, currency\n| order by sum_savings desc",
          "source": "kql",
          "length": 533,
          "startsWithTable": true
        },
        {
          "code": "AdvisorResources\n| where type == 'microsoft.advisor/recommendations'\n| where properties.category == 'HighAvailability'\n| where properties.shortDescription.solution == 'Upgrade to the latest version of the Azure Connected Machine agent'\n| project\nid,\nJoinId = toupper(properties.resourceMetadata.resourceId),\nmachineName = tostring(properties.impactedValue),\nagentVersion = tostring(properties.extendedProperties.installedVersion),\nexpectedVersion = tostring(properties.extendedProperties.latestVersion)\n| join kind=leftouter(\nResources\n| where type == 'microsoft.hybridcompute/machines'\n| project\nmachineId = toupper(id),\nstatus = tostring (properties.status)\n) on $left.JoinId == $right.machineId\n| where status != 'Expired'\n| summarize by id, machineName, agentVersion, expectedVersion\n| order by tolower(machineName) asc",
          "source": "kql",
          "length": 823,
          "startsWithTable": true
        },
        {
          "code": "AdvisorResources\n| where type == 'microsoft.advisor/recommendations'\n| where properties.category == 'HighAvailability'\n| where properties.shortDescription.solution == 'Upgrade to the latest version of the Azure Connected Machine agent'\n| project  id,  JoinId = toupper(properties.resourceMetadata.resourceId),  machineName = tostring(properties.impactedValue),  agentVersion = tostring(properties.extendedProperties.installedVersion),  expectedVersion = tostring(properties.extendedProperties.latestVersion)\n| join kind=leftouter( Resources\n| where type == 'microsoft.hybridcompute/machines'\n| project  machineId = toupper(id),  status = tostring (properties.status) ) on \\$left.JoinId == \\$right.machineId\n| where status != 'Expired'\n| summarize by id, machineName, agentVersion, expectedVersion\n| order by tolower(machineName) asc",
          "source": "cli",
          "length": 832,
          "startsWithTable": true
        },
        {
          "code": "AdvisorResources\n| where type == 'microsoft.advisor/recommendations'\n| where properties.category == 'HighAvailability'\n| where properties.shortDescription.solution == 'Upgrade to the latest version of the Azure Connected Machine agent'\n| project  id,  JoinId = toupper(properties.resourceMetadata.resourceId),  machineName = tostring(properties.impactedValue),  agentVersion = tostring(properties.extendedProperties.installedVersion),  expectedVersion = tostring(properties.extendedProperties.latestVersion)\n| join kind=leftouter( Resources\n| where type == 'microsoft.hybridcompute/machines'\n| project  machineId = toupper(id),  status = tostring (properties.status) ) on $left.JoinId == $right.machineId\n| where status != 'Expired'\n| summarize by id, machineName, agentVersion, expectedVersion\n| order by tolower(machineName) asc",
          "source": "powershell",
          "length": 830,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.Advisor"
    },
    "aksresources": {
      "name": "aksresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.containerservice/fleets/autoupgradeprofiles",
        "microsoft.containerservice/fleets/members",
        "microsoft.containerservice/fleets/updateruns",
        "microsoft.containerservice/fleets/updatestrategies"
      ]
    },
    "alertsmanagementresources": {
      "name": "alertsmanagementresources",
      "examples": [
        {
          "code": "alertsmanagementresources\n| where type =~ 'microsoft.alertsmanagement/alerts'\n| where todatetime(properties.essentials.startDateTime) >= ago(2h) and todatetime(properties.essentials.startDateTime) < now()\n| project Severity = tostring(properties.essentials.severity)\n| summarize AlertsCount = count() by Severity",
          "source": "kql",
          "length": 312,
          "startsWithTable": true
        },
        {
          "code": "alertsmanagementresources\n| where type =~ 'microsoft.alertsmanagement/alerts'\n| where todatetime(properties.essentials.startDateTime) >= ago(2h) and todatetime(properties.essentials.startDateTime) < now()\n| project Severity = tostring(properties.essentials.severity),\nAlertState= tostring(properties.essentials.alertState)\n| summarize AlertsCount = count() by Severity, AlertState",
          "source": "kql",
          "length": 380,
          "startsWithTable": true
        },
        {
          "code": "alertsmanagementresources\n| where properties.essentials.startDateTime > ago(12h)\n| project\nalertId = id,\nname,\nmonitorCondition = tostring(properties.essentials.monitorCondition),\nseverity = tostring(properties.essentials.severity),\nmonitorService = tostring(properties.essentials.monitorService),\nalertState = tostring(properties.essentials.alertState),\ntargetResourceType = tostring(properties.essentials.targetResourceType),\ntargetResource = tostring(properties.essentials.targetResource),\nsubscriptionId,\nstartDateTime = todatetime(properties.essentials.startDateTime),\nlastModifiedDateTime = todatetime(properties.essentials.lastModifiedDateTime),\ndimensions = properties.context.context.condition.allOf[0].dimensions, properties",
          "source": "kql",
          "length": 734,
          "startsWithTable": true
        },
        {
          "code": "alertsmanagementresources\n| where type =~ 'microsoft.alertsmanagement/alerts'\n| where todatetime(properties.essentials.startDateTime) >= ago(2h) and todatetime(properties.essentials.startDateTime) < now()\n| project Severity = tostring(properties.essentials.severity),\nMonitorCondition = tostring(properties.essentials.monitorCondition),\nObjectState = tostring(properties.essentials.alertState),\nMonitorService = tostring(properties.essentials.monitorService),\nAlertRuleId = tostring(properties.essentials.alertRule),\nSignalType = tostring(properties.essentials.signalType),\nTargetResource = tostring(properties.essentials.targetResourceName),\nTargetResourceType = tostring(properties.essentials.targetResourceName), id\n| summarize AlertsCount = count() by Severity, MonitorService , TargetResourceType",
          "source": "kql",
          "length": 801,
          "startsWithTable": true
        },
        {
          "code": "alertsmanagementresources\n| where properties.essentials.startDateTime > ago(12h)\n| where tostring(properties.essentials.monitorService)  \"ActivityLog Administrative\"\n| project // converting extracted fields to string / datetime to allow grouping\nalertId = id,\nname,\nmonitorCondition = tostring(properties.essentials.monitorCondition),\nseverity = tostring(properties.essentials.severity),\nmonitorService = tostring(properties.essentials.monitorService),\nalertState = tostring(properties.essentials.alertState),\ntargetResourceType = tostring(properties.essentials.targetResourceType),\ntargetResource = tostring(properties.essentials.targetResource),\nsubscriptionId,\nstartDateTime = todatetime(properties.essentials.startDateTime),\nlastModifiedDateTime = todatetime(properties.essentials.lastModifiedDateTime),\ndimensions = properties.context.context.condition.allOf[0].dimensions, // usefor metric alerts and log search alerts\nproperties\n| extend targetResource = tolower(targetResource)\n| join kind=leftouter\n( resources | project targetResource = tolower(id), targetResourceTags = tags) on targetResource\n| project-away targetResource1",
          "source": "kql",
          "length": 1135,
          "startsWithTable": true
        },
        {
          "code": "alertsmanagementresources\n| where properties.essentials.startDateTime > ago(12h)\n| where tostring(properties.essentials.monitorService)",
          "source": "cli",
          "length": 135,
          "startsWithTable": true
        },
        {
          "code": "alertsmanagementresources\n| where properties.essentials.startDateTime > ago(12h)\n| project   alertId = id,   name,   monitorCondition = tostring(properties.essentials.monitorCondition),   severity = tostring(properties.essentials.severity),   monitorService = tostring(properties.essentials.monitorService),   alertState = tostring(properties.essentials.alertState),   targetResourceType = tostring(properties.essentials.targetResourceType),   targetResource = tostring(properties.essentials.targetResource),   subscriptionId,   startDateTime = todatetime(properties.essentials.startDateTime),   lastModifiedDateTime = todatetime(properties.essentials.lastModifiedDateTime),   dimensions = properties.context.context.condition.allOf[0].dimensions, properties",
          "source": "cli",
          "length": 758,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.AlertsManagement",
      "resourceTypes": [
        "microsoft.alertsmanagement/alerts"
      ]
    },
    "appserviceresources": {
      "name": "appserviceresources",
      "examples": [
        {
          "code": "AppServiceResources\n| where type =~ 'microsoft.web/sites/config'\n| project id, name, properties.MinTlsVersion",
          "source": "kql",
          "length": 109,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.Web",
      "resourceTypes": [
        "microsoft.web/sites/config",
        "microsoft.web/sites/slots/config",
        "microsoft.web/sites/workflows"
      ]
    },
    "authorizationresources": {
      "name": "authorizationresources",
      "examples": [
        {
          "code": "authorizationresources\n| where type =~ 'microsoft.authorization/classicadministrators'\n| extend state = properties.adminState\n| extend roles = split(properties.role, ';')\n| take 5",
          "source": "kql",
          "length": 179,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| where type =~ 'microsoft.authorization/roledefinitions'\n| extend assignableScopes = properties.assignableScopes\n| extend permissionsList = properties.permissions\n| extend isServiceRole = properties.isServiceRole\n| take 5",
          "source": "kql",
          "length": 245,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| where type =~ 'microsoft.authorization/roleassignments'\n| extend roleDefinitionId = properties.roleDefinitionId\n| extend principalType = properties.principalType\n| extend principalId = properties.principalId\n| extend scope = properties.scope\n| take 5",
          "source": "kql",
          "length": 275,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| where type =~ 'microsoft.authorization/roledefinitions'\n| extend assignableScopes = properties.assignableScopes\n| extend permissionsList = properties.permissions\n| extend isServiceRole = properties.isServiceRole\n| mv-expand permissionsList\n| extend Actions = permissionsList.Actions\n| extend notActions = permissionsList.notActions\n| extend DataActions = permissionsList.DataActions\n| extend notDataActions = permissionsList.notDataActions\n| take 5",
          "source": "kql",
          "length": 473,
          "startsWithTable": true
        },
        {
          "code": "AuthorizationResources\n| where type =~ \"microsoft.authorization/roledefinitions\"\n| where tolower(properties.type) == \"customrole\"\n| extend rdId = tolower(id)\n| extend Scope = tolower(properties.assignableScopes)\n| join kind = leftouter (\nAuthorizationResources\n| where type =~ \"microsoft.authorization/roleassignments\"\n| extend RoleId = tolower(tostring(properties.roleDefinitionId))\n| summarize RoleAssignmentCount = count() by RoleId\n) on $left.rdId == $right.RoleId\n| where isempty(RoleAssignmentCount)\n| project RoleDefinitionId = rdId, RoleDefinitionName = tostring(properties.roleName), Scope",
          "source": "kql",
          "length": 598,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| where type =~ 'microsoft.authorization/roledefinitions'\n| extend assignableScopes = properties.assignableScopes\n| extend permissionsList = properties.permissions\n| extend isServiceRole = properties.isServiceRole\n| mv-expand permissionsList\n| extend Actions = permissionsList.Actions\n| extend notActions = permissionsList.notActions\n| extend DataActions = permissionsList.DataActions\n| extend notDataActions = permissionsList.notDataActions\n| summarize make_set(Actions), make_set(notActions), make_set(DataActions), make_set(notDataActions), any(assignableScopes, isServiceRole) by id",
          "source": "kql",
          "length": 609,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| where type =~ \"microsoft.authorization/roleassignments\"\n| where id startswith \"/subscriptions\"\n| extend RoleId = tolower(tostring(properties.roleDefinitionId))\n| join kind = leftouter (\nauthorizationresources\n| where type =~ \"microsoft.authorization/roledefinitions\"\n| extend RoleDefinitionName = tostring(properties.roleName)\n| extend RoleId = tolower(id)\n| project RoleDefinitionName, RoleId\n) on $left.RoleId == $right.RoleId\n| extend principalId = tostring(properties.principalId)\n| extend principal_to_ra = pack(principalId, id)\n| summarize count_ = count(), AllPrincipals = make_set(principal_to_ra) by RoleDefinitionId = RoleId, Scope = tolower(properties.scope), RoleDefinitionName\n| where count_ > 1\n| order by count_ desc",
          "source": "kql",
          "length": 756,
          "startsWithTable": true
        },
        {
          "code": "AuthorizationResources\n| where type =~ \"microsoft.authorization/roleassignments\"\n| where id startswith \"/subscriptions\"\n| extend PrincipalId = tostring(properties.principalId)\n| extend Scope = tolower(properties.scope)\n| extend RoleDefinitionId = tolower(tostring(properties.roleDefinitionId))\n| join kind = leftouter (\nAuthorizationResources\n| where type =~ \"microsoft.authorization/roledefinitions\"\n| extend RoleName = tostring(properties.roleName)\n| extend RoleId = tolower(id)\n| extend RoleType = tostring(properties.type)\n| where RoleType == \"BuiltInRole\"\n| extend RoleId_RoleName = pack(RoleId, RoleName)\n) on $left.RoleDefinitionId == $right.RoleId\n| summarize count_ = count(), AllRD = make_set(RoleId_RoleName) by PrincipalId, Scope\n| where count_ > 1\n| order by count_ desc",
          "source": "kql",
          "length": 783,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| where type =~ \"microsoft.authorization/roleassignments\"\n| where id startswith \"/subscriptions\"\n| extend RoleId = tolower(tostring(properties.roleDefinitionId))\n| extend condition = tostring(properties.condition)\n| join kind = leftouter (\nauthorizationresources\n| where type =~ \"microsoft.authorization/roledefinitions\"\n| extend RoleDefinitionName = tostring(properties.roleName)\n| extend RoleId = tolower(id)\n| project RoleDefinitionName, RoleId\n) on $left.RoleId == $right.RoleId\n| extend principalId = tostring(properties.principalId)\n| extend principal_to_ra = pack(principalId, id)\n| summarize count_ = count(), AllPrincipals = make_set(principal_to_ra) by RoleDefinitionId = RoleId, Scope = tolower(properties.scope), RoleDefinitionName, condition\n| where count_ > 1\n| order by count_ desc",
          "source": "kql",
          "length": 819,
          "startsWithTable": true
        },
        {
          "code": "AuthorizationResources\n| where type =~ \"microsoft.authorization/roleassignments\"\n| where id startswith \"/subscriptions\"\n| extend PrincipalId = tostring(properties.principalId)\n| extend Scope = tolower(properties.scope)\n| extend RoleDefinitionId = tolower(tostring(properties.roleDefinitionId))\n| extend condition = tostring(properties.condition)\n| join kind = leftouter (\nAuthorizationResources\n| where type =~ \"microsoft.authorization/roledefinitions\"\n| extend RoleName = tostring(properties.roleName)\n| extend RoleId = tolower(id)\n| extend RoleType = tostring(properties.type)\n| where RoleType == \"BuiltInRole\"\n| extend RoleId_RoleName = pack(RoleId, RoleName)\n) on $left.RoleDefinitionId == $right.RoleId\n| summarize count_ = count(), AllRD = make_set(RoleId_RoleName) by PrincipalId, Scope, condition\n| where count_ > 1\n| order by count_ desc",
          "source": "kql",
          "length": 846,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| where type =~ \"microsoft.authorization/roleassignments\"\n| where id startswith \"/subscriptions\"\n| extend RoleDefinitionId = tolower(tostring(properties.roleDefinitionId))\n| extend PrincipalId = tolower(properties.principalId)\n| extend RoleDefinitionId_PrincipalId = strcat(RoleDefinitionId, \"_\", PrincipalId)\n| join kind = leftouter (\nauthorizationresources\n| where type =~ \"microsoft.authorization/roledefinitions\"\n| extend RoleDefinitionName = tostring(properties.roleName)\n| extend rdId = tolower(id)\n| project RoleDefinitionName, rdId\n) on $left.RoleDefinitionId == $right.rdId\n| summarize count_ = count(), Scopes = make_set(tolower(properties.scope)) by RoleDefinitionId_PrincipalId,RoleDefinitionName\n| project RoleDefinitionId = split(RoleDefinitionId_PrincipalId, \"_\", 0)[0], RoleDefinitionName, PrincipalId = split(RoleDefinitionId_PrincipalId, \"_\", 1)[0], count_, Scopes\n| where count_ > 1\n| order by count_ desc",
          "source": "kql",
          "length": 947,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| where type =~ \"microsoft.authorization/roleassignments\"\n| where id startswith \"/subscriptions\"\n| extend RoleDefinitionId = tolower(tostring(properties.roleDefinitionId))\n| extend PrincipalId = tolower(properties.principalId)\n| extend RoleDefinitionId_PrincipalId = strcat(RoleDefinitionId, \"_\", PrincipalId)\n| extend condition = tostring(properties.condition)\n| join kind = leftouter (\nauthorizationresources\n| where type =~ \"microsoft.authorization/roledefinitions\"\n| extend RoleDefinitionName = tostring(properties.roleName)\n| extend rdId = tolower(id)\n| project RoleDefinitionName, rdId\n) on $left.RoleDefinitionId == $right.rdId\n| summarize count_ = count(), Scopes = make_set(tolower(properties.scope)) by RoleDefinitionId_PrincipalId,RoleDefinitionName\n| project RoleDefinitionId = split(RoleDefinitionId_PrincipalId, \"_\", 0)[0], RoleDefinitionName, PrincipalId = split(RoleDefinitionId_PrincipalId, \"_\", 1)[0], count_, Scopes, condition\n| where count_ > 1\n| order by count_ desc",
          "source": "kql",
          "length": 1010,
          "startsWithTable": true
        },
        {
          "code": "authorizationresources\n| summarize count()",
          "source": "powershell",
          "length": 42,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.Authorization",
      "resourceTypes": [
        "microsoft.authorization/classicadministrators",
        "microsoft.authorization/roleassignments",
        "microsoft.authorization/roledefinitions"
      ]
    },
    "awsresources": {
      "name": "awsresources",
      "examples": [],
      "description": "Related to Microsoft.AwsConnector",
      "resourceTypes": [
        "microsoft.awsconnector/ec2instances",
        "microsoft.awsconnector/eksclusters"
      ]
    },
    "azurebusinesscontinuityresources": {
      "name": "azurebusinesscontinuityresources",
      "examples": [],
      "description": "Related to Microsoft.AzureBusinessContinuity",
      "resourceTypes": [
        "microsoft.azurebusinesscontinuity/deletedunifiedprotecteditems",
        "microsoft.azurebusinesscontinuity/unifiedprotecteditems"
      ]
    },
    "azuredevopsplatformresources": {
      "name": "azuredevopsplatformresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.azuredevopsplatform/organizations"
      ]
    },
    "batchresources": {
      "name": "batchresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.batch/batchaccounts/pools"
      ]
    },
    "capabilityresources": {
      "name": "capabilityresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.resources/capabilities"
      ]
    },
    "chaosresources": {
      "name": "chaosresources",
      "examples": [],
      "description": "Related to Microsoft.Chaos",
      "resourceTypes": [
        "microsoft.chaos/experiments/executions",
        "microsoft.chaos/experiments/statuses",
        "microsoft.chaos/targets",
        "microsoft.chaos/targets/capabilities"
      ]
    },
    "communitygalleryresources": {
      "name": "communitygalleryresources",
      "examples": [],
      "description": "Related to Microsoft.Compute",
      "resourceTypes": []
    },
    "computeresources": {
      "name": "computeresources",
      "examples": [
        {
          "code": "ComputeResources\n| where type =~ 'microsoft.compute/virtualmachinescalesets/virtualmachines'\n| extend powerState = properties.extended.instanceView.powerState.code\n| project name, powerState, id",
          "source": "kql",
          "length": 194,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.Compute Virtual Machine Scale Sets",
      "resourceTypes": []
    },
    "containerserviceeventresources": {
      "name": "containerserviceeventresources",
      "resourceTypes": [
        "microsoft.containerservice/managedclusters/scheduledevents"
      ],
      "examples": []
    },
    "deploymentresources": {
      "name": "deploymentresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.resources/deploymentstacks"
      ]
    },
    "desktopvirtualizationresources": {
      "name": "desktopvirtualizationresources",
      "examples": [],
      "description": "Related to Microsoft.DesktopVirtualization",
      "resourceTypes": [
        "microsoft.desktopvirtualization/hostpools/sessionhosts"
      ]
    },
    "dnsresources": {
      "name": "dnsresources",
      "examples": [],
      "description": "Related to Microsoft.Network",
      "resourceTypes": [
        "microsoft.network/dnszones/a",
        "microsoft.network/dnszones/aaaa",
        "microsoft.network/dnszones/cname",
        "microsoft.network/dnszones/mx",
        "microsoft.network/dnszones/ptr",
        "microsoft.network/dnszones/soa",
        "microsoft.network/dnszones/srv",
        "microsoft.network/dnszones/txt",
        "microsoft.network/privatednszones/a",
        "microsoft.network/privatednszones/aaaa",
        "microsoft.network/privatednszones/cname",
        "microsoft.network/privatednszones/mx",
        "microsoft.network/privatednszones/ptr",
        "microsoft.network/privatednszones/soa",
        "microsoft.network/privatednszones/srv",
        "microsoft.network/privatednszones/txt"
      ]
    },
    "edgeorderresources": {
      "name": "edgeorderresources",
      "examples": [],
      "description": "Related to Microsoft.EdgeOrder",
      "resourceTypes": [
        "microsoft.edgeorder/orders"
      ]
    },
    "elasticsanresources": {
      "name": "elasticsanresources",
      "examples": [],
      "description": "Related to Microsoft.ElasticSan",
      "resourceTypes": [
        "microsoft.elasticsan/elasticsans",
        "microsoft.elasticsan/elasticsans/volumegroups",
        "microsoft.elasticsan/elasticsans/volumegroups/volumes"
      ]
    },
    "extendedlocationresources": {
      "name": "extendedlocationresources",
      "examples": [
        {
          "code": "ExtendedLocationResources\n| where type == 'microsoft.extendedlocation/customlocations/enabledresourcetypes'",
          "source": "kql",
          "length": 107,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.ExtendedLocation",
      "resourceTypes": [
        "microsoft.extendedlocation/customlocations/enabledresourcetypes"
      ]
    },
    "extensibilityresourcechanges": {
      "name": "extensibilityresourcechanges",
      "resourceTypes": [
        "microsoft.resources/changes"
      ],
      "examples": []
    },
    "featureresources": {
      "name": "featureresources",
      "resourceTypes": [
        "microsoft.features/featureprovidernamespaces/featureconfigurations",
        "microsoft.features/featureproviders/subscriptionfeatureregistrations"
      ],
      "examples": [],
      "description": "Related to Microsoft.Features"
    },
    "gcpresources": {
      "name": "gcpresources",
      "resourceTypes": [
        "microsoft.gcpconnector/computeinstances"
      ],
      "examples": []
    },
    "guestconfigurationresources": {
      "name": "guestconfigurationresources",
      "examples": [
        {
          "code": "GuestConfigurationResources\n| where type =~ 'microsoft.guestconfiguration/guestconfigurationassignments'\n| extend vmid = split(properties.targetResourceId,'/')\n| mvexpand properties.latestAssignmentReport.resources\n| where properties_latestAssignmentReport_resources.resourceId != 'Invalid assignment package.'\n| project machine = tostring(vmid[(-1)]),type = tostring(vmid[(-3)])\n| distinct machine, type\n| summarize count() by type",
          "source": "kql",
          "length": 432,
          "startsWithTable": true
        },
        {
          "code": "GuestConfigurationResources\n| where name in ('installed_application_linux')\n| project id, name, resources = properties.latestAssignmentReport.resources, vmid = split(properties.targetResourceId,'/')[(-1)], status = tostring(properties.complianceStatus)\n| extend resources = iff(isnull(resources[0]), dynamic([{}]), resources)\n| mvexpand resources\n| extend reasons = resources.reasons\n| extend reasons = iff(isnull(reasons[0]), dynamic([{}]), reasons)\n| mvexpand reasons\n| where reasons.phrase contains 'chrome'\n| project id, vmid, name, status, resource = resources.resourceId, reason = reasons.phrase",
          "source": "kql",
          "length": 601,
          "startsWithTable": true
        },
        {
          "code": "GuestConfigurationResources\n| where type =~ 'microsoft.guestconfiguration/guestconfigurationassignments'\n| project id, name, resources = properties.latestAssignmentReport.resources, vmid = split(properties.targetResourceId,'/')[(-1)], status = tostring(properties.complianceStatus)\n| extend resources = iff(isnull(resources[0]), dynamic([{}]), resources)\n| mvexpand resources\n| extend reasons = resources.reasons\n| extend reasons = iff(isnull(reasons[0]), dynamic([{}]), reasons)\n| mvexpand reasons\n| project id, vmid, name, status, resource = tostring(resources.resourceId), reason = reasons.phrase\n| summarize count() by resource, name\n| order by count_\n| limit 100",
          "source": "kql",
          "length": 667,
          "startsWithTable": true
        },
        {
          "code": "GuestConfigurationResources\n| where type =~ 'microsoft.guestconfiguration/guestconfigurationassignments'\n| where properties.complianceStatus == 'NonCompliant'\n| project id, name, resources = properties.latestAssignmentReport.resources, machine = split(properties.targetResourceId,'/')[(-1)], status = tostring(properties.complianceStatus)\n| extend resources = iff(isnull(resources[0]), dynamic([{}]), resources)\n| mvexpand resources\n| extend reasons = resources.reasons\n| extend reasons = iff(isnull(reasons[0]), dynamic([{}]), reasons)\n| mvexpand reasons\n| where machine == 'MACHINENAME'\n| project id, machine, name, status, resource = resources.resourceId, reason = reasons.phrase",
          "source": "kql",
          "length": 682,
          "startsWithTable": true
        },
        {
          "code": "GuestConfigurationResources\n| where name in ('WindowsPendingReboot')\n| project id, name, resources = properties.latestAssignmentReport.resources, vmid = split(properties.targetResourceId,'/'), status = tostring(properties.complianceStatus)\n| extend resources = iff(isnull(resources[0]), dynamic([{}]), resources)\n| mvexpand resources\n| extend reasons = resources.reasons\n| extend reasons = iff(isnull(reasons[0]), dynamic([{}]), reasons)\n| mvexpand reasons\n| project id, vmid, name, status, resource = resources.resourceId, reason = reasons.phrase\n| summarize name = any(name), status = any(status), vmid = any(vmid), resources = make_list_if(resource, isnotnull(resource)), reasons = make_list_if(reason, isnotnull(reason)) by id = tolower(id)\n| project id, machine = tostring(vmid[(-1)]), type = tostring(vmid[(-3)]), name, status, reasons",
          "source": "kql",
          "length": 841,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.GuestConfiguration",
      "resourceTypes": [
        "microsoft.guestconfiguration/guestconfigurationassignments",
        "microsoft.guestconfiguration/guestconfigurationassignments/reports"
      ]
    },
    "healthresourcechanges": {
      "name": "healthresourcechanges",
      "resourceTypes": [
        "microsoft.resources/changes"
      ],
      "examples": [],
      "description": "Related to Microsoft.Resources"
    },
    "healthresources": {
      "name": "healthresources",
      "resourceTypes": [
        "microsoft.resourcehealth/availabilitystatuses",
        "microsoft.resourcehealth/resourceannotations"
      ],
      "examples": [
        {
          "code": "HealthResources\n| where type =~ 'microsoft.resourcehealth/availabilitystatuses'\n| summarize count() by subscriptionId, AvailabilityState = tostring(properties.availabilityState)",
          "source": "kql",
          "length": 177,
          "startsWithTable": true
        },
        {
          "code": "HealthResources\n| where type =~ 'microsoft.resourcehealth/availabilitystatuses'\n| summarize by ResourceId = tolower(tostring(properties.targetResourceId)), AvailabilityState = tostring(properties.availabilityState)",
          "source": "kql",
          "length": 214,
          "startsWithTable": true
        },
        {
          "code": "HealthResources\n| where type =~ 'microsoft.resourcehealth/availabilitystatuses'\n| where tostring(properties.availabilityState) != 'Available'\n| summarize by ResourceId = tolower(tostring(properties.targetResourceId)), AvailabilityState = tostring(properties.availabilityState)",
          "source": "kql",
          "length": 276,
          "startsWithTable": true
        },
        {
          "code": "HealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/availabilitystatuses'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))\n| extend AvailabilityState = tostring(properties['availabilityState'])\n| where AvailabilityState != 'Available'\n| project VmId, todatetime(properties['occurredTime']), AvailabilityState\n| join kind = inner (\nHealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/resourceannotations'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))) on $left.VmId == $right.VmId\n| join kind = inner (Resources\n| where subscriptionId == 'mySubscriptionId'\n| where type startswith 'microsoft.workloads/sapvirtualinstances/'\n| where id startswith 'myResourceId'\n| mv-expand d = properties.vmDetails\n| project VmId = tolower(d.virtualMachineId))\non $left.VmId1 == $right.VmId\n| extend AnnotationName = tostring(properties['annotationName']), ImpactType = tostring(properties['impactType']), Context = tostring(properties['context']), Summary = tostring(properties['summary']), Reason = tostring(properties['reason']), OccurredTime = todatetime(properties['occurredTime'])\n| project VmId, OccurredTime, AvailabilityState, AnnotationName, ImpactType, Context, Summary, Reason\n| project-rename ['Virtual Machine ID'] = VmId, ['Time Since Not Available'] = OccurredTime, ['Availability State'] = AvailabilityState, ['Annotation Name'] = AnnotationName, ['Impact Type'] = ImpactType",
          "source": "kql",
          "length": 1641,
          "startsWithTable": true
        },
        {
          "code": "HealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/availabilitystatuses'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))\n| extend AvailabilityState = tostring(properties['availabilityState'])\n| where AvailabilityState != 'Available'\n| project VmId, todatetime(properties['occurredTime']), AvailabilityState\n| join kind = inner (HealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/resourceannotations'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))) on \\$left.VmId == \\$right.VmId\n| join kind = inner (Resources\n| where subscriptionId == 'mySubscriptionId'\n| where type startswith 'microsoft.workloads/sapvirtualinstances/'\n| where id startswith 'myResourceId'\n| mv-expand d = properties.vmDetails\n| project VmId = tolower(d.virtualMachineId)) on \\$left.VmId1 == \\$right.VmId\n| extend AnnotationName = tostring(properties['annotationName']), ImpactType = tostring(properties['impactType']), Context = tostring(properties['context']), Summary = tostring(properties['summary']), Reason = tostring(properties['reason']), OccurredTime = todatetime(properties['occurredTime'])\n| project VmId, OccurredTime, AvailabilityState, AnnotationName, ImpactType, Context, Summary, Reason\n| project-rename ['Virtual Machine ID'] = VmId, ['Time Since Not Available'] = OccurredTime, ['Availability State'] = AvailabilityState, ['Annotation Name'] = AnnotationName, ['Impact Type'] = ImpactType",
          "source": "cli",
          "length": 1644,
          "startsWithTable": true
        },
        {
          "code": "HealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/availabilitystatuses'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))\n| extend AvailabilityState = tostring(properties['availabilityState'])\n| where AvailabilityState != 'Available'\n| project VmId, todatetime(properties['occurredTime']), AvailabilityState\n| join kind = inner (HealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/resourceannotations'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))) on $left.VmId == $right.VmId\n| join kind = inner (Resources\n| where subscriptionId == 'mySubscriptionId'\n| where type startswith 'microsoft.workloads/sapvirtualinstances/'\n| where id startswith 'myResourceId'\n| mv-expand d = properties.vmDetails\n| project VmId = tolower(d.virtualMachineId)) on $left.VmId1 == $right.VmId\n| extend AnnotationName = tostring(properties['annotationName']), ImpactType = tostring(properties['impactType']), Context = tostring(properties['context']), Summary = tostring(properties['summary']), Reason = tostring(properties['reason']), OccurredTime = todatetime(properties['occurredTime'])\n| project VmId, OccurredTime, AvailabilityState, AnnotationName, ImpactType, Context, Summary, Reason\n| project-rename ['Virtual Machine ID'] = VmId, ['Time Since Not Available'] = OccurredTime, ['Availability State'] = AvailabilityState, ['Annotation Name'] = AnnotationName, ['Impact Type'] = ImpactType",
          "source": "powershell",
          "length": 1640,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.ResourceHealth"
    },
    "impactreportresources": {
      "name": "impactreportresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.impact/connectors",
        "microsoft.impact/workloadimpacts",
        "microsoft.impact/workloadimpacts/insights"
      ]
    },
    "insightsresources": {
      "name": "insightsresources",
      "resourceTypes": [
        "microsoft.insights/datacollectionruleassociations",
        "microsoft.insights/tenantactiongroups"
      ],
      "examples": [
        {
          "code": "insightsresources\n| where type == 'microsoft.insights/datacollectionruleassociations'\n| where id contains 'microsoft.compute/virtualmachines/'\n| project id = trim_start('/', tolower(id)), properties\n| extend idComponents = split(id, '/')\n| extend subscription = tolower(tostring(idComponents[1])), resourceGroup = tolower(tostring(idComponents[3])), vmName = tolower(tostring(idComponents[7]))\n| extend dcrId = properties['dataCollectionRuleId']\n| where isnotnull(dcrId)\n| extend dcrId = tostring(dcrId)\n| summarize dcrList = make_list(dcrId), dcrCount = count() by subscription, resourceGroup, vmName\n| sort by dcrCount desc",
          "source": "kql",
          "length": 625,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.Insights"
    },
    "iotsecurityresources": {
      "name": "iotsecurityresources",
      "examples": [
        {
          "code": "iotsecurityresources\n| where type == 'microsoft.iotsecurity/sites'\n| where properties.tags['key'] =~ 'value1'",
          "source": "kql",
          "length": 109,
          "startsWithTable": true
        },
        {
          "code": "iotsecurityresources\n| where type == 'microsoft.iotsecurity/sensors'\n| summarize count() by tostring(properties.sensorType)",
          "source": "kql",
          "length": 123,
          "startsWithTable": true
        },
        {
          "code": "iotsecurityresources\n| where type == 'microsoft.iotsecurity/locations/devicegroups/recommendations'\n| where properties.severity == 'High'",
          "source": "kql",
          "length": 137,
          "startsWithTable": true
        },
        {
          "code": "iotsecurityresources\n| where type == 'microsoft.iotsecurity/locations/devicegroups/devices'\n| summarize count() by tostring(properties.operatingSystem.platform)",
          "source": "kql",
          "length": 160,
          "startsWithTable": true
        },
        {
          "code": "iotsecurityresources\n| where type == 'microsoft.iotsecurity/locations/devicegroups/alerts'\n| where todatetime(properties.startTimeUtc) > ago(30d) and properties.status == 'New'",
          "source": "kql",
          "length": 176,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.IoTSecurity and Microsoft.IoTFirmwareDefense",
      "resourceTypes": [
        "microsoft.iotfirmwaredefense/firmwaregroups/firmwares",
        "microsoft.iotsecurity/locations/devicegroups/alerts",
        "microsoft.iotsecurity/locations/devicegroups/devices",
        "microsoft.iotsecurity/locations/devicegroups/recommendations",
        "microsoft.iotsecurity/locations/sites",
        "microsoft.iotsecurity/locations/sites/sensors",
        "microsoft.iotsecurity/onpremisesensors",
        "microsoft.iotsecurity/sensors",
        "microsoft.iotsecurity/sites"
      ]
    },
    "kubernetesconfigurationresources": {
      "name": "kubernetesconfigurationresources",
      "examples": [
        {
          "code": "kubernetesconfigurationresources\n| where type == 'microsoft.kubernetesconfiguration/fluxconfigurations'\n| where properties.complianceState == 'Non-Compliant'\n| project id",
          "source": "kql",
          "length": 170,
          "startsWithTable": true
        },
        {
          "code": "KubernetesConfigurationResources\n| where type == 'microsoft.kubernetesconfiguration/extensions'\n| where properties.ExtensionType  == 'microsoft.azuremonitor.containers'\n| parse id with connectedClusterId '/providers/Microsoft.KubernetesConfiguration/Extensions' *\n| project connectedClusterId",
          "source": "kql",
          "length": 292,
          "startsWithTable": true
        },
        {
          "code": "KubernetesConfigurationResources\n| where type == 'microsoft.kubernetesconfiguration/extensions'\n| where properties.ExtensionType == 'microsoft.azuremonitor.containers'\n| parse id with connectedClusterId '/providers/Microsoft.KubernetesConfiguration/Extensions' *\n| project connectedClusterId",
          "source": "cli",
          "length": 291,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.KubernetesConfiguration",
      "resourceTypes": [
        "microsoft.kubernetesconfiguration/extensions",
        "microsoft.kubernetesconfiguration/fluxconfigurations",
        "microsoft.kubernetesconfiguration/namespaces",
        "microsoft.kubernetesconfiguration/sourcecontrolconfigurations"
      ]
    },
    "kustoresources": {
      "name": "kustoresources",
      "examples": [],
      "description": "Related to Microsoft.Kusto",
      "resourceTypes": [
        "microsoft.kusto/clusters/databases/dataconnections"
      ]
    },
    "machinesinventoryinsightsresources": {
      "name": "machinesinventoryinsightsresources",
      "resourceTypes": [
        "microsoft.offazure/hypervsites/machines/inventoryinsights",
        "microsoft.offazure/hypervsites/machines/inventoryinsights/pendingupdates",
        "microsoft.offazure/serversites/machines/inventoryinsights",
        "microsoft.offazure/serversites/machines/inventoryinsights/pendingupdates",
        "microsoft.offazure/serversites/machines/inventoryinsights/software",
        "microsoft.offazure/serversites/machines/inventoryinsights/vulnerabilities",
        "microsoft.offazure/serversites/machines/pendingupdates",
        "microsoft.offazure/serversites/machines/software",
        "microsoft.offazure/vmwaresites/machines/inventoryinsights",
        "microsoft.offazure/vmwaresites/machines/inventoryinsights/pendingupdates",
        "microsoft.offazure/vmwaresites/machines/inventoryinsights/software",
        "microsoft.offazure/vmwaresites/machines/inventoryinsights/vulnerabilities"
      ],
      "examples": []
    },
    "maintenanceresourcechanges": {
      "name": "maintenanceresourcechanges",
      "resourceTypes": [
        "microsoft.resources/changes"
      ],
      "examples": []
    },
    "maintenanceresources": {
      "name": "maintenanceresources",
      "resourceTypes": [
        "microsoft.containerservice/managedclusters/scheduledevents",
        "microsoft.maintenance/applyupdates",
        "microsoft.maintenance/computemrpresponse/applyupdates",
        "microsoft.maintenance/configurationassignments",
        "microsoft.maintenance/maintenanceconfigurations/applyupdates",
        "microsoft.maintenance/updates"
      ],
      "examples": [],
      "description": "Related to Microsoft.Maintenance"
    },
    "managedservicesresources": {
      "name": "managedservicesresources",
      "resourceTypes": [
        "microsoft.managedservices/registrationassignments",
        "microsoft.managedservices/registrationdefinitions"
      ],
      "examples": [],
      "description": "Related to Microsoft.ManagedServices"
    },
    "migrateresources": {
      "name": "migrateresources",
      "resourceTypes": [
        "microsoft.applicationmigration/discoveryhubs/applications",
        "microsoft.applicationmigration/discoveryhubs/applications/members",
        "microsoft.applicationmigration/pgsqlsites/agents",
        "microsoft.applicationmigration/pgsqlsites/pgsqldatabases",
        "microsoft.applicationmigration/pgsqlsites/pgsqlinstances",
        "microsoft.applicationmigration/storagesites/agents",
        "microsoft.applicationmigration/storagesites/fileshares",
        "microsoft.migrate/assessmentprojects/aksassessments",
        "microsoft.migrate/assessmentprojects/aksassessments/assessedwebapps",
        "microsoft.migrate/assessmentprojects/aksassessments/clusters",
        "microsoft.migrate/assessmentprojects/aksassessments/costdetails",
        "microsoft.migrate/assessmentprojects/aksassessments/summaries",
        "microsoft.migrate/assessmentprojects/applicationassessments",
        "microsoft.migrate/assessmentprojects/applicationassessments/assessedapplications",
        "microsoft.migrate/assessmentprojects/assessments",
        "microsoft.migrate/assessmentprojects/assessments/assessedmachines",
        "microsoft.migrate/assessmentprojects/assessments/summaries",
        "microsoft.migrate/assessmentprojects/avsassessments",
        "microsoft.migrate/assessmentprojects/avsassessments/avsassessedmachines",
        "microsoft.migrate/assessmentprojects/avsassessments/summaries",
        "microsoft.migrate/assessmentprojects/businesscases",
        "microsoft.migrate/assessmentprojects/castconnections",
        "microsoft.migrate/assessmentprojects/groups",
        "microsoft.migrate/assessmentprojects/groups/assessments",
        "microsoft.migrate/assessmentprojects/groups/assessments/assessedmachines",
        "microsoft.migrate/assessmentprojects/groups/avsassessments",
        "microsoft.migrate/assessmentprojects/groups/avsassessments/avsassessedmachines",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqldatabases",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqlinstances",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqlmachines",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/recommendedassessedentities",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/summaries",
        "microsoft.migrate/assessmentprojects/groups/webappassessments",
        "microsoft.migrate/assessmentprojects/groups/webappassessments/assessedwebapps",
        "microsoft.migrate/assessmentprojects/groups/webappassessments/summaries",
        "microsoft.migrate/assessmentprojects/groups/webappassessments/webappserviceplans",
        "microsoft.migrate/assessmentprojects/heterogeneousassessments",
        "microsoft.migrate/assessmentprojects/heterogeneousassessments/summaries",
        "microsoft.migrate/assessmentprojects/machineassessments/assessedmachines",
        "microsoft.migrate/assessmentprojects/mysqlassessments",
        "microsoft.migrate/assessmentprojects/mysqlassessments/assessedinstances",
        "microsoft.migrate/assessmentprojects/mysqlassessments/summaries",
        "microsoft.migrate/assessmentprojects/pgsqlassessments",
        "microsoft.migrate/assessmentprojects/pgsqlassessments/assessedinstances",
        "microsoft.migrate/assessmentprojects/pgsqlassessments/summaries",
        "microsoft.migrate/assessmentprojects/sqlassessments",
        "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqldatabases",
        "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqlinstances",
        "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqlmachines",
        "microsoft.migrate/assessmentprojects/sqlassessments/summaries",
        "microsoft.migrate/assessmentprojects/webappassessments",
        "microsoft.migrate/assessmentprojects/webappassessments/assessedwebapps",
        "microsoft.migrate/assessmentprojects/webappassessments/summaries",
        "microsoft.migrate/assessmentprojects/webappassessments/webappserviceplans",
        "microsoft.migrate/assessmentprojects/webappcompoundassessments",
        "microsoft.migrate/assessmentprojects/webappcompoundassessments/assessedwebapps",
        "microsoft.migrate/assessmentprojects/webappcompoundassessments/summaries",
        "microsoft.migrate/castscanreports",
        "microsoft.migrate/castscanreports/codescanissues",
        "microsoft.migrate/migrateprojects/migrationentities",
        "microsoft.migrate/migrateprojects/migrationentitygroups",
        "microsoft.migrate/migrateprojects/tasks",
        "microsoft.migrate/migrateprojects/waves",
        "microsoft.migrate/migrateprojects/waves/workloads",
        "microsoft.mysqldiscovery/mysqlsites/mysqlservers",
        "microsoft.offazure/hypervsites/clusters",
        "microsoft.offazure/hypervsites/hosts",
        "microsoft.offazure/hypervsites/machines",
        "microsoft.offazure/hypervsites/machines/softwareinventories",
        "microsoft.offazure/importsites/machines",
        "microsoft.offazure/mastersites/sqlsites/sqldatabases",
        "microsoft.offazure/mastersites/sqlsites/sqlservers",
        "microsoft.offazure/mastersites/webappsites/extendedmachines",
        "microsoft.offazure/mastersites/webappsites/iiswebapplications",
        "microsoft.offazure/mastersites/webappsites/iiswebservers",
        "microsoft.offazure/mastersites/webappsites/tomcatwebapplications",
        "microsoft.offazure/mastersites/webappsites/tomcatwebservers",
        "microsoft.offazure/serversites/machines",
        "microsoft.offazure/serversites/machines/softwareinventories",
        "microsoft.offazure/vmwaresites/hosts",
        "microsoft.offazure/vmwaresites/machines",
        "microsoft.offazure/vmwaresites/machines/softwareinventories",
        "microsoft.offazure/vmwaresites/vcenters",
        "microsoft.offazurespringboot/springbootsites/springbootapps",
        "microsoft.offazurespringboot/springbootsites/springbootservers"
      ],
      "examples": [],
      "description": "Related to Microsoft.OffAzure"
    },
    "networkresourcechanges": {
      "name": "networkresourcechanges",
      "resourceTypes": [
        "microsoft.resources/changes"
      ],
      "examples": []
    },
    "networkresources": {
      "name": "networkresources",
      "resourceTypes": [
        "microsoft.network/effectiveconnectivityconfigurations",
        "microsoft.network/effectivesecurityadminrules",
        "microsoft.network/firewallpolicies/rulecollectiongroups",
        "microsoft.network/networkgroupmemberships",
        "microsoft.network/networkmanagerconnections",
        "microsoft.network/networkmanagers/connectivityconfigurations",
        "microsoft.network/networkmanagers/connectivityconfigurations/snapshots",
        "microsoft.network/networkmanagers/connectivityregionalgoalstates",
        "microsoft.network/networkmanagers/networkgroups",
        "microsoft.network/networkmanagers/networkgroups/aggregatedipaddressspaces",
        "microsoft.network/networkmanagers/networkgroups/members",
        "microsoft.network/networkmanagers/networkgroups/staticmembers",
        "microsoft.network/networkmanagers/regionalgoalstates",
        "microsoft.network/networkmanagers/routingconfigurations",
        "microsoft.network/networkmanagers/routingconfigurations/rulecollections",
        "microsoft.network/networkmanagers/routingconfigurations/rulecollections/rules",
        "microsoft.network/networkmanagers/routingconfigurations/rulecollections/rules/snapshots",
        "microsoft.network/networkmanagers/routingconfigurations/rulecollections/snapshots",
        "microsoft.network/networkmanagers/routingconfigurations/snapshots",
        "microsoft.network/networkmanagers/routingregionalgoalstates",
        "microsoft.network/networkmanagers/securityadminconfigurations",
        "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections",
        "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/rules",
        "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/rules/snapshots",
        "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/snapshots",
        "microsoft.network/networkmanagers/securityadminconfigurations/snapshots",
        "microsoft.network/networkmanagers/securityadminregionalgoalstates",
        "microsoft.network/networkmanagers/securityuserconfigurations",
        "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections",
        "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/rules",
        "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/rules/snapshots",
        "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/snapshots",
        "microsoft.network/networkmanagers/securityuserconfigurations/snapshots",
        "microsoft.network/networkmanagers/securityuserregionalgoalstates",
        "microsoft.network/networkmanagers/verifierworkspaces/reachabilityanalysisintents",
        "microsoft.network/networksecurityperimeters/linkreferences",
        "microsoft.network/networksecurityperimeters/links",
        "microsoft.network/networksecurityperimeters/loggingconfigurations",
        "microsoft.network/networksecurityperimeters/profiles",
        "microsoft.network/networksecurityperimeters/profiles/accessrules",
        "microsoft.network/networksecurityperimeters/resourceassociations",
        "microsoft.network/rulecollectiongroups",
        "microsoft.network/virtualnetworks/subnets/effectiveroutingrules",
        "microsoft.network/virtualnetworks/subnets/effectivesecurityuserrules"
      ],
      "examples": [],
      "description": "Related to Microsoft.Network"
    },
    "orbitalresources": {
      "name": "orbitalresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.orbital/spacecrafts/contacts"
      ]
    },
    "patchassessmentresources": {
      "name": "patchassessmentresources",
      "examples": [
        {
          "code": "PatchAssessmentResources\n| where type has 'softwarepatches' and properties !has 'version'\n| extend machineName = tostring(split(id, '/', 8)), resourceType = tostring(split(type, '/', 0)), tostring(rgName = split(id, '/', 4)), tostring(RunID = split(id, '/', 10))\n| extend prop = parse_json(properties)\n| extend lTime = todatetime(prop.lastModifiedDateTime), patchName = tostring(prop.patchName), kbId = tostring(prop.kbId), installationState = tostring(prop.installationState), classifications = tostring(prop.classifications)\n| where lTime > ago(7d)\n| project lTime, RunID, machineName, rgName, resourceType, patchName, kbId, classifications, installationState\n| sort by RunID",
          "source": "kql",
          "length": 677,
          "startsWithTable": true
        },
        {
          "code": "PatchAssessmentResources\n| where type has 'softwarepatches' and properties has 'version'\n| extend machineName = tostring(split(id, '/', 8)), resourceType = tostring(split(type, '/', 0)), tostring(rgName = split(id, '/', 4)), tostring(RunID = split(id, '/', 10))\n| extend prop = parse_json(properties)\n| extend lTime = todatetime(prop.lastModifiedDateTime), patchName = tostring(prop.patchName), version = tostring(prop.version), installationState = tostring(prop.installationState), classifications = tostring(prop.classifications)\n| where lTime > ago(7d)\n| project lTime, RunID, machineName, rgName, resourceType, patchName, version, classifications, installationState\n| sort by RunID",
          "source": "kql",
          "length": 685,
          "startsWithTable": true
        },
        {
          "code": "PatchAssessmentResources\n| where type !has 'softwarepatches'\n| extend machineName = tostring(split(id, '/', 8)), resourceType = tostring(split(type, '/', 0)), tostring(rgName = split(id, '/', 4))\n| extend prop = parse_json(properties)\n| extend lTime = todatetime(prop.lastModifiedDateTime), OS = tostring(prop.osType), installedPatchCount = tostring(prop.installedPatchCount), failedPatchCount = tostring(prop.failedPatchCount), pendingPatchCount = tostring(prop.pendingPatchCount), excludedPatchCount = tostring(prop.excludedPatchCount), notSelectedPatchCount = tostring(prop.notSelectedPatchCount)\n| where lTime > ago(7d)\n| project lTime, RunID=name,machineName, rgName, resourceType, OS, installedPatchCount, failedPatchCount, pendingPatchCount, excludedPatchCount, notSelectedPatchCount",
          "source": "kql",
          "length": 790,
          "startsWithTable": true
        },
        {
          "code": "PatchAssessmentResources\n| where type !has 'softwarepatches'\n| extend prop = parse_json(properties)\n| extend lastTime = properties.lastModifiedDateTime\n| extend updateRollupCount = prop.availablePatchCountByClassification.updateRollup, featurePackCount = prop.availablePatchCountByClassification.featurePack, servicePackCount = prop.availablePatchCountByClassification.servicePack, definitionCount = prop.availablePatchCountByClassification.definition, securityCount = prop.availablePatchCountByClassification.security, criticalCount = prop.availablePatchCountByClassification.critical, updatesCount = prop.availablePatchCountByClassification.updates, toolsCount = prop.availablePatchCountByClassification.tools, otherCount = prop.availablePatchCountByClassification.other, OS = prop.osType\n| project lastTime, id, OS, updateRollupCount, featurePackCount, servicePackCount, definitionCount, securityCount, criticalCount, updatesCount, toolsCount, otherCount",
          "source": "kql",
          "length": 957,
          "startsWithTable": true
        }
      ],
      "description": "Related to Azure Virtual Machines patch assessment Microsoft.Compute and Microsoft.HybridCompute",
      "resourceTypes": [
        "microsoft.connectedvmwarevsphere/virtualmachines/patchassessmentresults",
        "microsoft.connectedvmwarevsphere/virtualmachines/patchassessmentresults/softwarepatches",
        "microsoft.hybridcompute/machines/patchassessmentresults",
        "microsoft.hybridcompute/machines/patchassessmentresults/softwarepatches"
      ]
    },
    "patchinstallationresources": {
      "name": "patchinstallationresources",
      "examples": [],
      "description": "Related to Azure Virtual Machines patch installation Microsoft.Compute and Microsoft.HybridCompute",
      "resourceTypes": [
        "microsoft.connectedvmwarevsphere/virtualmachines/patchinstallationresults",
        "microsoft.connectedvmwarevsphere/virtualmachines/patchinstallationresults/softwarepatches",
        "microsoft.hybridcompute/machines/patchinstallationresults",
        "microsoft.hybridcompute/machines/patchinstallationresults/softwarepatches"
      ]
    },
    "policyresources": {
      "name": "policyresources",
      "examples": [
        {
          "code": "PolicyResources\n| where type == 'microsoft.authorization/policyexemptions'\n| summarize count() by tostring(properties.policyAssignmentId)",
          "source": "kql",
          "length": 137,
          "startsWithTable": true
        },
        {
          "code": "PolicyResources\n| where type == 'microsoft.policyinsights/policystates'\n| extend complianceState = tostring(properties.complianceState)\n| summarize count() by complianceState",
          "source": "kql",
          "length": 174,
          "startsWithTable": true
        },
        {
          "code": "PolicyResources\n| where type == 'microsoft.policyinsights/policystates'\n| where properties.complianceState == 'NonCompliant'\n| extend NonCompliantResourceId = properties.resourceId, PolicyAssignmentName = properties.policyAssignmentName",
          "source": "kql",
          "length": 236,
          "startsWithTable": true
        },
        {
          "code": "PolicyResources\n| where type == 'microsoft.authorization/policyexemptions'\n| extend expiresOnC = todatetime(properties.expiresOn)\n| where isnotnull(expiresOnC)\n| where expiresOnC >= now() and expiresOnC < now(+90d)\n| project name, expiresOnC",
          "source": "kql",
          "length": 241,
          "startsWithTable": true
        },
        {
          "code": "PolicyResources\n| where type == 'microsoft.policyinsights/policystates'\n| extend complianceState = tostring(properties.complianceState)\n| extend resourceLocation = tostring(properties.resourceLocation)\n| summarize count() by resourceLocation, complianceState",
          "source": "kql",
          "length": 258,
          "startsWithTable": true
        },
        {
          "code": "PolicyResources\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\n| extend complianceState = tostring(properties.complianceState)\n| extend\nresourceId = tostring(properties.resourceId),\nresourceType = tolower(tostring(properties.resourceType)),\npolicyAssignmentId = tostring(properties.policyAssignmentId),\npolicyDefinitionId = tostring(properties.policyDefinitionId),\npolicyDefinitionReferenceId = tostring(properties.policyDefinitionReferenceId),\nstateWeight = iff(complianceState == 'NonCompliant', int(300), iff(complianceState == 'Compliant', int(200), iff(complianceState == 'Conflict', int(100), iff(complianceState == 'Exempt', int(50), int(0)))))\n| summarize max(stateWeight) by resourceId, resourceType\n| summarize counts = count() by resourceType, max_stateWeight\n| summarize overallStateWeight = max(max_stateWeight),\nnonCompliantCount = sumif(counts, max_stateWeight == 300),\ncompliantCount = sumif(counts, max_stateWeight == 200),\nconflictCount = sumif(counts, max_stateWeight == 100),\nexemptCount = sumif(counts, max_stateWeight == 50) by resourceType\n| extend totalResources = todouble(nonCompliantCount + compliantCount + conflictCount + exemptCount)\n| extend compliancePercentage = iff(totalResources == 0, todouble(100), 100 * todouble(compliantCount + exemptCount) / totalResources)\n| project resourceType,\noverAllComplianceState = iff(overallStateWeight == 300, 'noncompliant', iff(overallStateWeight == 200, 'compliant', iff(overallStateWeight == 100, 'conflict', iff(overallStateWeight == 50, 'exempt', 'notstarted')))),\ncompliancePercentage,\ncompliantCount,\nnonCompliantCount,\nconflictCount,\nexemptCount",
          "source": "kql",
          "length": 1632,
          "startsWithTable": true
        },
        {
          "code": "PolicyResources\n| where type =~ 'Microsoft.PolicyInsights/PolicyStates'\n| extend complianceState = tostring(properties.complianceState)\n| extend\nresourceId = tostring(properties.resourceId),\npolicyAssignmentId = tostring(properties.policyAssignmentId),\npolicyAssignmentScope = tostring(properties.policyAssignmentScope),\npolicyAssignmentName = tostring(properties.policyAssignmentName),\npolicyDefinitionId = tostring(properties.policyDefinitionId),\npolicyDefinitionReferenceId = tostring(properties.policyDefinitionReferenceId),\nstateWeight = iff(complianceState == 'NonCompliant', int(300), iff(complianceState == 'Compliant', int(200), iff(complianceState == 'Conflict', int(100), iff(complianceState == 'Exempt', int(50), int(0)))))\n| summarize max(stateWeight) by resourceId, policyAssignmentId, policyAssignmentScope, policyAssignmentName\n| summarize counts = count() by policyAssignmentId, policyAssignmentScope, max_stateWeight, policyAssignmentName\n| summarize overallStateWeight = max(max_stateWeight),\nnonCompliantCount = sumif(counts, max_stateWeight == 300),\ncompliantCount = sumif(counts, max_stateWeight == 200),\nconflictCount = sumif(counts, max_stateWeight == 100),\nexemptCount = sumif(counts, max_stateWeight == 50) by policyAssignmentId, policyAssignmentScope, policyAssignmentName\n| extend totalResources = todouble(nonCompliantCount + compliantCount + conflictCount + exemptCount)\n| extend compliancePercentage = iff(totalResources == 0, todouble(100), 100 * todouble(compliantCount + exemptCount) / totalResources)\n| project policyAssignmentName, scope = policyAssignmentScope,\ncomplianceState = iff(overallStateWeight == 300, 'noncompliant', iff(overallStateWeight == 200, 'compliant', iff(overallStateWeight == 100, 'conflict', iff(overallStateWeight == 50, 'exempt', 'notstarted')))),\ncompliancePercentage,\ncompliantCount,\nnonCompliantCount,\nconflictCount,\nexemptCount",
          "source": "kql",
          "length": 1892,
          "startsWithTable": true
        },
        {
          "code": "PolicyResources\n| where type == 'microsoft.policyinsights/policystates'\n| where properties.complianceState == 'NonCompliant'",
          "source": "powershell",
          "length": 124,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.PolicyInsights",
      "resourceTypes": [
        "microsoft.authorization/policyassignments",
        "microsoft.authorization/policydefinitions",
        "microsoft.authorization/policydefinitions/versions",
        "microsoft.authorization/policyenrollments",
        "microsoft.authorization/policyexemptions",
        "microsoft.authorization/policysetdefinitions",
        "microsoft.authorization/policysetdefinitions/versions",
        "microsoft.policyinsights/componentpolicystates",
        "microsoft.policyinsights/policymetadata",
        "microsoft.policyinsights/policystates"
      ]
    },
    "quotaresourcechanges": {
      "name": "quotaresourcechanges",
      "resourceTypes": [
        "microsoft.resources/changes"
      ],
      "examples": []
    },
    "recoveryservicesresources": {
      "name": "recoveryservicesresources",
      "resourceTypes": [
        "microsoft.azurebusinesscontinuity/deletedunifiedprotecteditems",
        "microsoft.azurebusinesscontinuity/unifiedprotecteditems",
        "microsoft.dataprotection/backupvaults/backupinstances",
        "microsoft.dataprotection/backupvaults/backupjobs",
        "microsoft.dataprotection/backupvaults/backuppolicies",
        "microsoft.dataprotection/backupvaults/deletedbackupinstances",
        "microsoft.recoveryservices/locations/deletedvaults",
        "microsoft.recoveryservices/locations/deletedvaults/backupfabrics/protectioncontainers/protecteditems",
        "microsoft.recoveryservices/vaults",
        "microsoft.recoveryservices/vaults/alerts",
        "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protectableitems",
        "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems",
        "microsoft.recoveryservices/vaults/backupjobs",
        "microsoft.recoveryservices/vaults/backuppolicies",
        "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationmigrationitems",
        "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotectableitems",
        "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems",
        "microsoft.recoveryservices/vaults/replicationjobs",
        "microsoft.recoveryservices/vaults/replicationpolicies",
        "microsoft.recoveryservices/vaults/replicationrecoveryplans"
      ],
      "examples": [],
      "description": "Related to Microsoft.DataProtection and Microsoft.RecoveryServices"
    },
    "resourcechanges": {
      "name": "resourcechanges",
      "resourceTypes": [
        "microsoft.resources/changes"
      ],
      "examples": [],
      "description": "Related to Microsoft.Resources"
    },
    "resourcecontainerchanges": {
      "name": "resourcecontainerchanges",
      "resourceTypes": [
        "microsoft.resources/changes"
      ],
      "examples": [],
      "description": "Related to Microsoft.Resources"
    },
    "resourcecontainers": {
      "name": "resourcecontainers",
      "resourceTypes": [
        "microsoft.management/managementgroups",
        "microsoft.management/servicegroups",
        "microsoft.resources/subscriptions",
        "microsoft.resources/subscriptions/resourcegroups"
      ],
      "examples": [
        {
          "code": "resourcecontainers\n| where type == \"microsoft.management/servicegroups\"",
          "source": "kql",
          "length": 71,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type =~ 'microsoft.resources/subscriptions'\n| project subscriptionId, name",
          "source": "kql",
          "length": 101,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type=='microsoft.resources/subscriptions/resourcegroups' | project name, type  | limit 5\n| union  (Resources | project name, type | limit 5)",
          "source": "kql",
          "length": 167,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type =~ 'microsoft.resources/subscriptions'\n| extend  mgParent = properties.managementGroupAncestorsChain\n| mv-expand with_itemindex=MGHierarchy mgParent\n| project subscriptionId, name, mgParent, MGHierarchy, mgParent.name",
          "source": "kql",
          "length": 249,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type =~ 'microsoft.management/managementgroups'\n| extend  mgParent = properties.details.managementGroupAncestorsChain\n| mv-expand with_itemindex=MGHierarchy mgParent\n| project name, properties.displayName, mgParent, MGHierarchy, mgParent.name",
          "source": "kql",
          "length": 269,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type =~ 'microsoft.management/managementgroups'\n| project mgname = name\n| join kind=leftouter (resourcecontainers | where type=~ 'microsoft.resources/subscriptions'\n| extend  mgParent = properties.managementGroupAncestorsChain | project id, mgname = tostring(mgParent[0].name)) on mgname\n| summarize count() by mgname",
          "source": "kql",
          "length": 344,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where isnotempty(tags)\n| project tags\n| mvexpand tags\n| extend tagKey = tostring(bag_keys(tags)[0])\n| extend tagValue = tostring(tags[tagKey])\n| union (\nresources\n| where isnotempty(tags)\n| project tags\n| mvexpand tags\n| extend tagKey = tostring(bag_keys(tags)[0])\n| extend tagValue = tostring(tags[tagKey])\n)\n| distinct tagKey, tagValue\n| where tagKey !startswith \"hidden-\"",
          "source": "kql",
          "length": 395,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type=='microsoft.resources/subscriptions/resourcegroups'\n| project name, type\n| limit 5\n| union  (Resources\n| project name, type\n| limit 5)",
          "source": "cli",
          "length": 166,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type =~ 'microsoft.resources/subscriptions'\n| extend mgParent = properties.managementGroupAncestorsChain\n| mv-expand with_itemindex=MGHierarchy mgParent\n| project subscriptionId, name, mgParent, MGHierarchy, mgParent.name",
          "source": "cli",
          "length": 248,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type =~ 'microsoft.management/managementgroups'\n| extend mgParent = properties.details.managementGroupAncestorsChain\n| mv-expand with_itemindex=MGHierarchy mgParent\n| project name, properties.displayName, mgParent, MGHierarchy, mgParent.name",
          "source": "cli",
          "length": 268,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where type =~ 'microsoft.management/managementgroups'\n| project mgname = name\n| join kind=leftouter (resourcecontainers\n| where type=~ 'microsoft.resources/subscriptions'\n| extend mgParent = properties.managementGroupAncestorsChain\n| project id, mgname = tostring(mgParent[0].name)) on mgname\n| summarize count() by mgname",
          "source": "cli",
          "length": 343,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where isnotempty(tags)\n| project tags\n| mvexpand tags\n| extend tagKey = tostring(bag_keys(tags)[0])\n| extend tagValue = tostring(tags[tagKey])\n| union (resources\n| where notempty(tags)\n| project tags\n| mvexpand tags\n| extend tagKey = tostring(bag_keys(tags)[0])\n| extend tagValue = tostring(tags[tagKey]) )\n| distinct tagKey, tagValue\n| where tagKey !startswith",
          "source": "cli",
          "length": 382,
          "startsWithTable": true
        },
        {
          "code": "ResourceContainers\n| where isnotempty(tags)\n| project tags\n| mvexpand tags\n| extend tagKey = tostring(bag_keys(tags)[0])\n| extend tagValue = tostring(tags[tagKey])\n| union ( resources\n| where isnotempty(tags)\n| project tags\n| mvexpand tags\n| extend tagKey = tostring(bag_keys(tags)[0])\n| extend tagValue = tostring(tags[tagKey]) )\n| distinct tagKey, tagValue\n| where tagKey !startswith",
          "source": "cli",
          "length": 385,
          "startsWithTable": true
        }
      ],
      "description": "Includes management group (Microsoft.Management/managementGroups), subscription (Microsoft.Resources/subscriptions) and resource group (Microsoft.Resources/subscriptions/resourcegroups) resource types and data"
    },
    "resources": {
      "name": "resources",
      "examples": [
        {
          "code": "Resources\n| summarize count()",
          "source": "kql",
          "length": 29,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| project tags\n| summarize buildschema(tags)",
          "source": "kql",
          "length": 54,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type contains 'storage' | distinct type",
          "source": "kql",
          "length": 57,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| project name, type, location\n| order by name asc",
          "source": "kql",
          "length": 60,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.keyvault/vaults'\n| count",
          "source": "kql",
          "length": 61,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where tags.environment=~'internal'\n| project name, tags",
          "source": "kql",
          "length": 67,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| distinct type, apiVersion\n| where isnotnull(apiVersion)\n| order by type asc",
          "source": "kql",
          "length": 87,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'Microsoft.Storage/storageAccounts'\n| where tags['tag with a space']=='Custom value'",
          "source": "kql",
          "length": 110,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| project name, location, type\n| where type =~ 'Microsoft.Compute/virtualMachines'\n| order by name desc",
          "source": "kql",
          "length": 113,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type contains 'publicIPAddresses' and isnotempty(properties.ipAddress)\n| summarize count () by subscriptionId",
          "source": "kql",
          "length": 127,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type contains 'publicIPAddresses' and isnotempty(properties.ipAddress)\n| project properties.ipAddress\n| limit 100",
          "source": "kql",
          "length": 131,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'Microsoft.Compute/virtualMachines'\n| summarize count() by tostring(properties.storageProfile.osDisk.osType)",
          "source": "kql",
          "length": 134,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'Microsoft.Compute/virtualMachines'\n| project name, properties.storageProfile.osDisk.osType\n| top 5 by name desc",
          "source": "kql",
          "length": 138,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.compute/virtualmachines' and name matches regex @'^Contoso(.*)[0-9]+$'\n| project name\n| order by name asc",
          "source": "kql",
          "length": 142,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.compute/virtualmachines'\n| summarize count() by tostring(properties.extended.instanceView.powerState.code)",
          "source": "kql",
          "length": 143,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'Microsoft.Compute/virtualMachines'\n| extend os = properties.storageProfile.osDisk.osType\n| summarize count() by tostring(os)",
          "source": "kql",
          "length": 151,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.compute/virtualmachines'\n| summarize count() by PowerState = tostring(properties.extended.instanceView.powerState.code)",
          "source": "kql",
          "length": 156,
          "startsWithTable": true
        },
        {
          "code": "resources\n| where type == 'microsoft.insights/datacollectionrules'\n| summarize dcrCount = count() by subscriptionId, resourceGroup, location\n| sort by dcrCount desc",
          "source": "kql",
          "length": 164,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.network/networksecuritygroups' and isnull(properties.networkInterfaces) and isnull(properties.subnets)\n| project name, resourceGroup\n| sort by name asc",
          "source": "kql",
          "length": 188,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.network/virtualnetworks'\n| extend subnets = properties.subnets\n| mv-expand subnets\n| project name, subnets.name, subnets.properties.addressPrefix, location, resourceGroup, subscriptionId",
          "source": "kql",
          "length": 223,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type=~ 'microsoft.compute/virtualmachinescalesets'\n| where name contains 'contoso'\n| project subscriptionId, name, location, resourceGroup, Capacity = toint(sku.capacity), Tier = sku.name\n| order by Capacity desc",
          "source": "kql",
          "length": 230,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| join kind=leftouter (ResourceContainers | where type=='microsoft.resources/subscriptions' | project SubName=name, subscriptionId) on subscriptionId\n| where type == 'microsoft.keyvault/vaults'\n| project type, name, SubName",
          "source": "kql",
          "length": 233,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| summarize resourceCount=count() by subscriptionId\n| join (ResourceContainers | where type=='microsoft.resources/subscriptions' | project SubName=name, subscriptionId) on subscriptionId\n| project-away subscriptionId, subscriptionId1",
          "source": "kql",
          "length": 243,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.compute/virtualmachines'\n| extend powerState = tostring(properties.extended.instanceView.powerState.code)\n| extend VMSS = tostring(properties.virtualMachineScaleSet.id)\n| where isnotempty(VMSS)\n| project name, powerState, id",
          "source": "kql",
          "length": 261,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| project id, subscriptionId, location, type, properties.agentVersion, properties.kubernetesVersion, properties.distribution, properties.infrastructure, properties.totalNodeCount, properties.totalCoreCount\n| where type =~ 'Microsoft.Kubernetes/connectedClusters'",
          "source": "kql",
          "length": 272,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.documentdb/databaseaccounts'\n| project id, name, writeLocations = (properties.writeLocations)\n| mv-expand writeLocations\n| project id, name, writeLocation = tostring(writeLocations.locationName)\n| where writeLocation in ('East US', 'West US')\n| summarize by id, name",
          "source": "kql",
          "length": 303,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.storage/storageaccounts'\n| join kind=inner (\nResourceContainers\n| where type =~ 'microsoft.resources/subscriptions/resourcegroups'\n| where tags['Key1'] =~ 'Value1'\n| project subscriptionId, resourceGroup)\non subscriptionId, resourceGroup\n| project-away subscriptionId1, resourceGroup1",
          "source": "kql",
          "length": 321,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.network/networkinterfaces'\n| project id, ipConfigurations = properties.ipConfigurations\n| mvexpand ipConfigurations\n| project id, subnetId = tostring(ipConfigurations.properties.subnet.id)\n| parse kind=regex subnetId with '/virtualNetworks/' virtualNetwork '/subnets/' subnet\n| project id, virtualNetwork, subnet",
          "source": "kql",
          "length": 349,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type in (\n'microsoft.managedidentity/userassignedidentities',\n'microsoft.keyvault/vaults',\n'microsoft.sql/servers/databases',\n'microsoft.datalakestore/accounts',\n'microsoft.containerservice/managedclusters')\nor identity has 'SystemAssigned'\nor (type =~ 'microsoft.storage/storageaccounts' and properties['isHnsEnabled'] == true)\n| summarize count() by type",
          "source": "kql",
          "length": 374,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.hybridcompute/machines'\n| project domain=tostring(properties.domainName)\n| summarize Domains=make_list(domain), TotalMachineCount=sum(1)\n| mvexpand EachDomain = Domains\n| summarize PerDomainMachineCount = count() by tostring(EachDomain), TotalMachineCount\n| extend Pct = 100 * bin(todouble(PerDomainMachineCount) / todouble(TotalMachineCount), 0.001)",
          "source": "kql",
          "length": 387,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.storage/storageaccounts'\n| join kind=inner (\nResourceContainers\n| where type =~ 'microsoft.resources/subscriptions/resourcegroups'\n| mv-expand bagexpansion=array tags\n| where isnotempty(tags)\n| where tags[0] =~ 'key1' and tags[1] =~ 'value1'\n| project subscriptionId, resourceGroup)\non subscriptionId, resourceGroup\n| project-away subscriptionId1, resourceGroup1",
          "source": "kql",
          "length": 399,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.sql/servers/databases'\n| project databaseId = id, databaseName = name, elasticPoolId = tolower(tostring(properties.elasticPoolId))\n| join kind=leftouter (\nResources\n| where type =~ 'microsoft.sql/servers/elasticpools'\n| project elasticPoolId = tolower(id), elasticPoolName = name, elasticPoolState = properties.state)\non elasticPoolId\n| project-away elasticPoolId1",
          "source": "kql",
          "length": 401,
          "startsWithTable": true
        },
        {
          "code": "resources\n| where type =~ 'Microsoft.Kubernetes/connectedClusters' or type =~ 'Microsoft.ContainerService/managedClusters' | extend clusterId = tolower(id) | project clusterId\n| join\n( kubernetesconfigurationresources\n| where type == 'microsoft.kubernetesconfiguration/fluxconfigurations'\n| parse tolower(id) with clusterId '/providers/microsoft.kubernetesconfiguration/fluxconfigurations' *\n| project clusterId\n) on clusterId\n| project clusterId",
          "source": "kql",
          "length": 446,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'Microsoft.Compute/virtualMachines'\n| where properties.extended.instanceView.powerState.code != 'PowerState/running'\n| project vmName = name, power = properties.extended.instanceView.powerState.code\n| join kind = leftouter (GuestConfigurationResources\n| extend vmName = tostring(split(properties.targetResourceId,'/')[(-1)])\n| project vmName, name, compliance = properties.complianceStatus) on vmName | project-away vmName1",
          "source": "kql",
          "length": 449,
          "startsWithTable": true
        },
        {
          "code": "resources\n| where type == 'microsoft.insights/datacollectionrules'\n| extend destinations = properties['destinations']\n| extend logAnalyticsWorkspaces = destinations['logAnalytics']\n| where isnotnull(logAnalyticsWorkspaces)\n| mv-expand logAnalyticsWorkspace = logAnalyticsWorkspaces\n| extend logAnalyticsWorkspaceResourceId = tolower(tostring(logAnalyticsWorkspace['workspaceResourceId']))\n| summarize dcrList = make_list(id), dcrCount = count() by logAnalyticsWorkspaceResourceId\n| sort by dcrCount desc",
          "source": "kql",
          "length": 503,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.hybridcompute/machines'\n| project\nid,\nJoinID = toupper(id),\nComputerName = tostring(properties.osProfile.computerName),\nOSName = tostring(properties.osName)\n| join kind=leftouter(\nResources\n| where type == 'microsoft.hybridcompute/machines/extensions'\n| project\nMachineId = toupper(substring(id, 0, indexof(id, '/extensions'))),\nExtensionName = name\n) on $left.JoinID == $right.MachineId\n| summarize Extensions = make_list(ExtensionName) by id, ComputerName, OSName\n| order by tolower(OSName) asc",
          "source": "kql",
          "length": 533,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'Microsoft.Kubernetes/connectedClusters' | extend connectedClusterId = tolower(id) | project connectedClusterId\n| join kind = leftouter\n(KubernetesConfigurationResources\n| where type == 'microsoft.kubernetesconfiguration/extensions'\n| where properties.ExtensionType  == 'microsoft.azuremonitor.containers'\n| parse tolower(id) with connectedClusterId '/providers/microsoft.kubernetesconfiguration/extensions' *\n| project connectedClusterId\n)  on connectedClusterId\n| where connectedClusterId1 == ''\n| project connectedClusterId",
          "source": "kql",
          "length": 552,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.compute/virtualmachines'\n| extend\nJoinID = toupper(id),\nOSName = tostring(properties.osProfile.computerName),\nOSType = tostring(properties.storageProfile.osDisk.osType),\nVMSize = tostring(properties.hardwareProfile.vmSize)\n| join kind=leftouter(\nResources\n| where type == 'microsoft.compute/virtualmachines/extensions'\n| extend\nVMId = toupper(substring(id, 0, indexof(id, '/extensions'))),\nExtensionName = name\n) on $left.JoinID == $right.VMId\n| summarize Extensions = make_list(ExtensionName) by id, OSName, OSType, VMSize\n| order by tolower(OSName) asc",
          "source": "kql",
          "length": 591,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.compute/virtualmachines'\n| project resourceGroup, Id = tolower(id), PowerState = tostring( properties.extended.instanceView.powerState.code)\n| join kind=leftouter (\nHealthResources\n| where type =~ 'microsoft.resourcehealth/availabilitystatuses'\n| where tostring(properties.targetResourceType) =~ 'microsoft.compute/virtualmachines'\n| project targetResourceId = tolower(tostring(properties.targetResourceId)), AvailabilityState = tostring(properties.availabilityState))\non $left.Id == $right.targetResourceId\n| project-away targetResourceId\n| where PowerState != 'PowerState/deallocated'",
          "source": "kql",
          "length": 623,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.extendedlocation/customlocations' and properties.provisioningState =~ 'succeeded'\n| extend clusterExtensionIds=properties.clusterExtensionIds\n| mvexpand clusterExtensionIds\n| extend clusterExtensionId = tolower(clusterExtensionIds)\n| join kind=leftouter(\nExtendedLocationResources\n| where type =~ 'microsoft.extendedlocation/customLocations/enabledResourcetypes'\n| project clusterExtensionId = tolower(properties.clusterExtensionId), extensionType = tolower(properties.extensionType)\n| where extensionType in~ ('microsoft.scvmm','microsoft.vmware')\n) on clusterExtensionId\n| where extensionType in~ ('microsoft.scvmm','microsoft.vmware')\n| summarize virtualMachineKindsEnabled=make_set(extensionType) by id,name,location\n| sort by name asc",
          "source": "kql",
          "length": 776,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.compute/virtualmachines'\n| project vmId = tolower(id), vmNics = properties.networkProfile.networkInterfaces\n| join (\nResources |\nwhere type =~ 'microsoft.network/networkinterfaces' |\nproject nicVMId = tolower(tostring(properties.virtualMachine.id)), allVMNicID = tolower(id), nicIPConfigs = properties.ipConfigurations)\non $left.vmId == $right.nicVMId\n| join (\nResources\n| where type =~ 'microsoft.network/publicipaddresses' and isnotnull(properties.ipConfiguration.id)\n| where sku.name == 'Basic' // exclude to find all VMs with Public IPs\n| project pipId = id, pipSku = sku.name, pipAssociatedNicId = tolower(tostring(split(properties.ipConfiguration.id, '/ipConfigurations/')[0])))\non $left.allVMNicID == $right.pipAssociatedNicId\n| project vmId, pipId, pipSku",
          "source": "kql",
          "length": 800,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where subscriptionId == 'mySubscriptionId'\n| where type startswith 'microsoft.workloads/sapvirtualinstances/'\n| where id startswith 'myResourceId'\n| mv-expand d = properties.vmDetails\n| project VmId = tolower(d.virtualMachineId)\n| join kind = inner (\nHealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/availabilitystatuses'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))\n| extend AvailabilityState = tostring(properties['availabilityState']))\non $left.VmId == $right.VmId\n| project VmId, todatetime(properties['occurredTime']), AvailabilityState\n| project-rename ['Virtual Machine ID'] = VmId, UTCTimeStamp = properties_occurredTime, ['Availability State'] = AvailabilityState",
          "source": "kql",
          "length": 823,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.compute/virtualmachines'\n| extend nics=array_length(properties.networkProfile.networkInterfaces)\n| mv-expand nic=properties.networkProfile.networkInterfaces\n| where nics == 1 or nic.properties.primary =~ 'true' or isempty(nic)\n| project vmId = id, vmName = name, vmSize=tostring(properties.hardwareProfile.vmSize), nicId = tostring(nic.id)\n| join kind=leftouter (\nResources\n| where type =~ 'microsoft.network/networkinterfaces'\n| extend ipConfigsCount=array_length(properties.ipConfigurations)\n| mv-expand ipconfig=properties.ipConfigurations\n| where ipConfigsCount == 1 or ipconfig.properties.primary =~ 'true'\n| project nicId = id, publicIpId = tostring(ipconfig.properties.publicIPAddress.id))\non nicId\n| project-away nicId1\n| summarize by vmId, vmName, vmSize, nicId, publicIpId\n| join kind=leftouter (\nResources\n| where type =~ 'microsoft.network/publicipaddresses'\n| project publicIpId = id, publicIpAddress = properties.ipAddress)\non publicIpId\n| project-away publicIpId1",
          "source": "kql",
          "length": 1015,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where subscriptionId == 'mySubscriptionId'\n| where type startswith 'microsoft.workloads/sapvirtualinstances/'\n| where id startswith 'myResourceId'\n| mv-expand d = properties.vmDetails\n| project VmId = tolower(d.virtualMachineId)\n| join kind = leftouter (\nHealthResourceChanges\n| where subscriptionId == 'mySubscriptionId'\n| where id !has '/virtualMachineScaleSets/'\n| where id has '/virtualMachines/'\n| extend timestamp = todatetime(properties.changeAttributes.timestamp)\n| extend VmId = tolower(tostring(split(id, '/providers/Microsoft.ResourceHealth/')[0]))\n| where properties has 'properties.availabilityState' or properties has 'properties.annotationName'\n| extend HealthChangeType = iff(properties has 'properties.availabilityState', 'Availability', 'Annotation')\n| extend ChangeType = tostring(properties.changeType)\n| where ChangeType == 'Update'  or ChangeType == 'Delete')\non $left.VmId == $right.VmId\n| extend Changes = parse_json(tostring(properties.changes))\n| extend AvailabilityStateJson = parse_json(tostring(Changes['properties.availabilityState']))\n| extend AnnotationNameJson = parse_json(tostring(Changes['properties.annotationName']))\n| extend AnnotationSummary = parse_json(tostring(Changes['properties.summary']))\n| extend AnnotationReason = parse_json(tostring(Changes['properties.reason']))\n| extend AnnotationImpactType = parse_json(tostring(Changes['properties.impactType']))\n| extend AnnotationContext = parse_json(tostring(Changes['properties.context']))\n| extend AnnotationCategory = parse_json(tostring(Changes['properties.category']))\n| extend AvailabilityStatePreviousValue = tostring(AvailabilityStateJson.previousValue)\n| extend AvailabilityStateCurrentValue = tostring(AvailabilityStateJson.newValue)\n| extend AnnotationNamePreviousValue = tostring(AnnotationNameJson.previousValue)\n| extend AnnotationNameCurrentValue = tostring(AnnotationNameJson.newValue)\n| extend AnnotationSummaryCurrentValue = tostring(AnnotationSummary.newValue)\n| extend AnnotationReasonCurrentValue = tostring(AnnotationReason.newValue)\n| extend AnnotationImpactTypeCurrentValue = tostring(AnnotationImpactType.newValue)\n| extend AnnotationContextCurrentValue = tostring(AnnotationContext.newValue)\n| extend AnnotationCategoryCurrentValue = tostring(AnnotationCategory.newValue)\n| project id = VmId, timestamp, ChangeType, AvailabilityStateCurrentValue, AnnotationNameCurrentValue, AnnotationSummaryCurrentValue, AnnotationReasonCurrentValue, AnnotationImpactTypeCurrentValue, AnnotationContextCurrentValue, AnnotationCategoryCurrentValue, Changes\n| order by id, timestamp asc\n| project-rename ['Virtual Machine ID'] = id, UTCTimeStamp = timestamp, ['Change Type'] = ChangeType, ['Availability State'] = AvailabilityStateCurrentValue, ['Summary'] = AnnotationSummaryCurrentValue, ['Reason'] = AnnotationReasonCurrentValue, ['Impact Type'] = AnnotationImpactTypeCurrentValue, Category = AnnotationCategoryCurrentValue, Context = AnnotationContextCurrentValue",
          "source": "kql",
          "length": 2980,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.hybridcompute/machines'\n| project id, JoinID = toupper(id), ComputerName = tostring(properties.osProfile.computerName), OSName = tostring(properties.osName)\n| join kind=leftouter( Resources\n| where type == 'microsoft.hybridcompute/machines/extensions'\n| project  MachineId = toupper(substring(id, 0, indexof(id, '/extensions'))),  ExtensionName = name ) on \\$left.JoinID == \\$right.MachineId\n| summarize Extensions = make_list(ExtensionName) by id, ComputerName, OSName\n| order by tolower(OSName) asc",
          "source": "cli",
          "length": 537,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'Microsoft.Kubernetes/connectedClusters'\n| extend connectedClusterId = tolower(id)\n| project connectedClusterId\n| join kind = leftouter (KubernetesConfigurationResources\n| where type == 'microsoft.kubernetesconfiguration/extensions'\n| where properties.ExtensionType == 'microsoft.azuremonitor.containers'\n| parse tolower(id) with connectedClusterId '/providers/microsoft.kubernetesconfiguration/extensions' *\n| project connectedClusterId ) on connectedClusterId\n| where connectedClusterId1 == ''\n| project connectedClusterId",
          "source": "cli",
          "length": 550,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.compute/virtualmachines'\n| extend JoinID = toupper(id), OSName = tostring(properties.osProfile.computerName), OSType = tostring(properties.storageProfile.osDisk.osType), VMSize = tostring(properties.hardwareProfile.vmSize)\n| join kind=leftouter( Resources\n| where type == 'microsoft.compute/virtualmachines/extensions'\n| extend VMId = toupper(substring(id, 0, indexof(id, '/extensions'))), ExtensionName = name ) on \\$left.JoinID == \\$right.VMId\n| summarize Extensions = make_list(ExtensionName) by id, OSName, OSType, VMSize\n| order by tolower(OSName) asc",
          "source": "cli",
          "length": 593,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.compute/virtualmachines'\n| extend JoinID = toupper(id), OSName = tostring(properties.osProfile.computerName), OSType = tostring(properties.storageProfile.osDisk.osType), VMSize = tostring(properties.hardwareProfile.vmSize)\n| join kind=leftouter( Resources\n| where type == 'microsoft.compute/virtualmachines/extensions'\n| extend  VMId = toupper(substring(id, 0, indexof(id, '/extensions'))),  ExtensionName = name ) on \\$left.JoinID == \\$right.VMId\n| summarize Extensions = make_list(ExtensionName) by id, OSName, OSType, VMSize\n| order by tolower(OSName) asc",
          "source": "cli",
          "length": 595,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.compute/virtualmachines'\n| project resourceGroup, Id = tolower(id), PowerState = tostring( properties.extended.instanceView.powerState.code)\n| join kind=leftouter ( HealthResources\n| where type =~ 'microsoft.resourcehealth/availabilitystatuses'\n| where tostring(properties.targetResourceType) =~ 'microsoft.compute/virtualmachines'\n| project targetResourceId = tolower(tostring(properties.targetResourceId)), AvailabilityState = tostring(properties.availabilityState)) on \\$left.Id == \\$right.targetResourceId\n| project-away targetResourceId\n| where PowerState != 'PowerState/deallocated'",
          "source": "cli",
          "length": 625,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.compute/virtualmachines'\n| project vmId = tolower(id), vmNics = properties.networkProfile.networkInterfaces\n| join (Resources\n| where type =~ 'microsoft.network/networkinterfaces'\n| project nicVMId = tolower(tostring(properties.virtualMachine.id)), allVMNicID = tolower(id), nicIPConfigs = properties.ipConfigurations) on \\$left.vmId == \\$right.nicVMId\n| join ( Resources\n| where type =~ 'microsoft.network/publicipaddresses' and isnotnull(properties.ipConfiguration.id)\n| where sku.name == 'Basic'\n| project pipId = id, pipSku = sku.name, pipAssociatedNicId = tolower(tostring(split(properties.ipConfiguration.id, '/ipConfigurations/')[0]))) on \\$left.allVMNicID == \\$right.pipAssociatedNicId\n| project vmId, pipId, pipSku",
          "source": "cli",
          "length": 760,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where subscriptionId == 'mySubscriptionId'\n| where type startswith 'microsoft.workloads/sapvirtualinstances/'\n| where id startswith 'myResourceId'\n| mv-expand d = properties.vmDetails\n| project VmId = tolower(d.virtualMachineId)\n| join kind = inner (HealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/availabilitystatuses'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))\n| extend AvailabilityState = tostring(properties['availabilityState'])) on \\$left.VmId == \\$right.VmId\n| project VmId, todatetime(properties['occurredTime']), AvailabilityState\n| project-rename ['Virtual Machine ID'] = VmId, UTCTimeStamp = properties_occurredTime, ['Availability State'] = AvailabilityState",
          "source": "cli",
          "length": 824,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type == 'microsoft.hybridcompute/machines'\n| project id, JoinID = toupper(id), ComputerName = tostring(properties.osProfile.computerName), OSName = tostring(properties.osName)\n| join kind=leftouter( Resources\n| where type == 'microsoft.hybridcompute/machines/extensions'\n| project  MachineId = toupper(substring(id, 0, indexof(id, '/extensions'))),  ExtensionName = name ) on $left.JoinID == $right.MachineId\n| summarize Extensions = make_list(ExtensionName) by id, ComputerName, OSName\n| order by tolower(OSName) asc",
          "source": "powershell",
          "length": 535,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where type =~ 'microsoft.compute/virtualmachines'\n| project vmId = tolower(id), vmNics = properties.networkProfile.networkInterfaces\n| join (Resources\n| where type =~ 'microsoft.network/networkinterfaces'\n| project nicVMId = tolower(tostring(properties.virtualMachine.id)), allVMNicID = tolower(id), nicIPConfigs = properties.ipConfigurations) on $left.vmId == $right.nicVMId\n| join ( Resources\n| where type =~ 'microsoft.network/publicipaddresses' and isnotnull(properties.ipConfiguration.id)\n| where sku.name == 'Basic'\n| project pipId = id, pipSku = sku.name, pipAssociatedNicId = tolower(tostring(split(properties.ipConfiguration.id, '/ipConfigurations/')[0]))) on $left.allVMNicID == $right.pipAssociatedNicId\n| project vmId, pipId, pipSku",
          "source": "powershell",
          "length": 756,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where subscriptionId == 'mySubscriptionId'\n| where type startswith 'microsoft.workloads/sapvirtualinstances/'\n| where id startswith 'myResourceId'\n| mv-expand d = properties.vmDetails\n| project VmId = tolower(d.virtualMachineId)\n| join kind = inner (HealthResources\n| where subscriptionId == 'mySubscriptionId'\n| where type == 'microsoft.resourcehealth/availabilitystatuses'\n| where properties contains 'Microsoft.Compute/virtualMachines'\n| extend VmId = tolower(tostring(properties['targetResourceId']))\n| extend AvailabilityState = tostring(properties['availabilityState'])) on $left.VmId == $right.VmId\n| project VmId, todatetime(properties['occurredTime']), AvailabilityState\n| project-rename ['Virtual Machine ID'] = VmId, UTCTimeStamp = properties_occurredTime, ['Availability State'] = AvailabilityState",
          "source": "powershell",
          "length": 822,
          "startsWithTable": true
        },
        {
          "code": "Resources\n| where subscriptionId == 'mySubscriptionId'\n| where type startswith 'microsoft.workloads/sapvirtualinstances/'\n| where id startswith 'myResourceId'\n| mv-expand d = properties.vmDetails\n| project VmId = tolower(d.virtualMachineId)\n| join kind = leftouter (HealthResourceChanges\n| where subscriptionId == 'mySubscriptionId'\n| where id !has '/virtualMachineScaleSets/'\n| where id has '/virtualMachines/'\n| extend timestamp = todatetime(properties.changeAttributes.timestamp)\n| extend VmId = tolower(tostring(split(id, '/providers/Microsoft.ResourceHealth/')[0]))\n| where properties has 'properties.availabilityState' or properties has 'properties.annotationName'\n| extend HealthChangeType = iff(properties has 'properties.availabilityState', 'Availability', 'Annotation')\n| extend ChangeType = tostring(properties.changeType)\n| where ChangeType == 'Update' or ChangeType == 'Delete') on $left.VmId == $right.VmId\n| extend Changes = parse_json(tostring(properties.changes))\n| extend AvailabilityStateJson = parse_json(tostring(Changes['properties.availabilityState']))\n| extend AnnotationNameJson = parse_json(tostring(Changes['properties.annotationName']))\n| extend AnnotationSummary = parse_json(tostring(Changes['properties.summary']))\n| extend AnnotationReason = parse_json(tostring(Changes['properties.reason']))\n| extend AnnotationImpactType = parse_json(tostring(Changes['properties.impactType']))\n| extend AnnotationContext = parse_json(tostring(Changes['properties.context']))\n| extend AnnotationCategory = parse_json(tostring(Changes['properties.category']))\n| extend AvailabilityStatePreviousValue = tostring(AvailabilityStateJson.previousValue)\n| extend AvailabilityStateCurrentValue = tostring(AvailabilityStateJson.newValue)\n| extend AnnotationNamePreviousValue = tostring(AnnotationNameJson.previousValue)\n| extend AnnotationNameCurrentValue = tostring(AnnotationNameJson.newValue)\n| extend AnnotationSummaryCurrentValue = tostring(AnnotationSummary.newValue)\n| extend AnnotationReasonCurrentValue = tostring(AnnotationReason.newValue)\n| extend AnnotationImpactTypeCurrentValue = tostring(AnnotationImpactType.newValue)\n| extend AnnotationContextCurrentValue = tostring(AnnotationContext.newValue)\n| extend AnnotationCategoryCurrentValue = tostring(AnnotationCategory.newValue)\n| project id = VmId, timestamp, ChangeType, AvailabilityStateCurrentValue, AnnotationNameCurrentValue, AnnotationSummaryCurrentValue, AnnotationReasonCurrentValue, AnnotationImpactTypeCurrentValue, AnnotationContextCurrentValue, AnnotationCategoryCurrentValue, Changes\n| order by id, timestamp asc\n| project-rename ['Virtual Machine ID'] = id, UTCTimeStamp = timestamp, ['Change Type'] = ChangeType, ['Availability State'] = AvailabilityStateCurrentValue, ['Summary'] = AnnotationSummaryCurrentValue, ['Reason'] = AnnotationReasonCurrentValue, ['Impact Type'] = AnnotationImpactTypeCurrentValue, Category = AnnotationCategoryCurrentValue, Context = AnnotationContextCurrentValue",
          "source": "powershell",
          "length": 2978,
          "startsWithTable": true
        }
      ],
      "description": "\nThe default table if a table isn't defined in the query. Most Resource Manager resource types and properties are here",
      "resourceTypes": [
        "aka.ms/yourcaliforniaprivacychoices"
      ]
    },
    "securityresources": {
      "name": "securityresources",
      "examples": [
        {
          "code": "SecurityResources\n| where type =~ 'microsoft.security/iotalerts' and properties.systemAlertId contains '{system_Alert_Id}'",
          "source": "kql",
          "length": 122,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type =~ 'microsoft.security/iotalerts' and id contains '{hub_id}' and properties.alertType contains '{alert_type}'",
          "source": "kql",
          "length": 140,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/pricings'\n| project Subscription= subscriptionId, Azure_Defender_plan= name, Status= properties.pricingTier",
          "source": "kql",
          "length": 161,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/insights/classification'\n| where properties.associatedResource contains '$resource_id'\n| project SensitivityInsight = properties.insightProperties.purviewCatalogs[0].sensitivity",
          "source": "kql",
          "length": 231,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/securescores'\n| extend percentageScore=properties.score.percentage,\ncurrentScore=properties.score.current,\nmaxScore=properties.score.max,\nweight=properties.weight\n| project tenantId, subscriptionId, percentageScore, currentScore, maxScore, weight",
          "source": "kql",
          "length": 300,
          "startsWithTable": true
        },
        {
          "code": "securityresources\n| where type =~ 'microsoft.security/locations/alerts'\n| where properties.Status in ('Active')\n| where properties.Severity in ('Low', 'Medium', 'High')\n| project alert_type = tostring(properties.AlertType), SystemAlertId = tostring(properties.SystemAlertId), ResourceIdentifiers = todynamic(properties.ResourceIdentifiers)",
          "source": "kql",
          "length": 339,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/regulatorycompliancestandards'\n| extend complianceStandard=name,\nstate=properties.state,\npassedControls=properties.passedControls,\nfailedControls=properties.failedControls,\nskippedControls=properties.skippedControls,\nunsupportedControls=properties.unsupportedControls\n| project tenantId, subscriptionId, complianceStandard, state, passedControls, failedControls, skippedControls, unsupportedControls",
          "source": "kql",
          "length": 453,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments'\n| extend assessmentName=properties.description,\ncomplianceStandard=extract(@'/regulatoryComplianceStandards/(.+)/regulatoryComplianceControls',1,id),\ncomplianceControl=extract(@'/regulatoryComplianceControls/(.+)/regulatoryComplianceAssessments',1,id),\nskippedResources=properties.skippedResources,\npassedResources=properties.passedResources,\nfailedResources=properties.failedResources,\nstate=properties.state\n| project tenantId, subscriptionId, id, complianceStandard, complianceControl, assessmentName, state, skippedResources, passedResources, failedResources",
          "source": "kql",
          "length": 708,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/assessments'\n| extend resourceId=id,\nrecommendationId=name,\nresourceType=type,\nrecommendationName=properties.displayName,\nsource=properties.resourceDetails.Source,\nrecommendationState=properties.status.code,\ndescription=properties.metadata.description,\nassessmentType=properties.metadata.assessmentType,\nremediationDescription=properties.metadata.remediationDescription,\npolicyDefinitionId=properties.metadata.policyDefinitionId,\nimplementationEffort=properties.metadata.implementationEffort,\nrecommendationSeverity=properties.metadata.severity,\ncategory=properties.metadata.categories,\nuserImpact=properties.metadata.userImpact,\nthreats=properties.metadata.threats,\nportalLink=properties.links.azurePortal\n| summarize numberOfResources=count(resourceId) by tostring(recommendationName), tostring(recommendationState)",
          "source": "kql",
          "length": 871,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/securescores/securescorecontrols'\n| extend controlName=properties.displayName,\ncontrolId=properties.definition.name,\nnotApplicableResourceCount=properties.notApplicableResourceCount,\nunhealthyResourceCount=properties.unhealthyResourceCount,\nhealthyResourceCount=properties.healthyResourceCount,\npercentageScore=properties.score.percentage,\ncurrentScore=properties.score.current,\nmaxScore=properties.definition.properties.maxScore,\nweight=properties.weight,\ncontrolType=properties.definition.properties.source.sourceType,\ncontrolRecommendationIds=properties.definition.properties.assessmentDefinitions\n| project tenantId, subscriptionId, controlName, controlId, unhealthyResourceCount, healthyResourceCount, notApplicableResourceCount, percentageScore, currentScore, maxScore, weight, controlType, controlRecommendationIds",
          "source": "kql",
          "length": 875,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/securescores'\n| project subscriptionId,\nsubscriptionTotal = iff(properties.score.max == 0, 0.00, round(tolong(properties.weight) * todouble(properties.score.current)/tolong(properties.score.max),2)),\nweight = tolong(iff(properties.weight == 0, 1, properties.weight))\n| join kind=leftouter (\nResourceContainers\n| where type == 'microsoft.resources/subscriptions' and properties.state == 'Enabled'\n| project subscriptionId, mgChain=properties.managementGroupAncestorsChain )\non subscriptionId\n| mv-expand mg=mgChain\n| summarize sumSubs = sum(subscriptionTotal), sumWeight = sum(weight), resultsNum = count() by tostring(mg.displayName), mgId = tostring(mg.name)\n| extend secureScore = iff(tolong(resultsNum) == 0, 404.00, round(sumSubs/sumWeight*100,2))\n| project mgName=mg_displayName, mgId, sumSubs, sumWeight, resultsNum, secureScore\n| order by mgName asc",
          "source": "kql",
          "length": 910,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/assessments'\n| where * contains 'vulnerabilities in your virtual machines'\n| summarize by assessmentKey=name //the ID of the assessment\n| join kind=inner (\nsecurityresources\n| where type == 'microsoft.security/assessments/subassessments'\n| extend assessmentKey = extract('.assessments/(.+?)/.',1,  id)\n) on assessmentKey\n| project assessmentKey, subassessmentKey=name, id, parse_json(properties), resourceGroup, subscriptionId, tenantId\n| extend description = properties.description,\ndisplayName = properties.displayName,\nresourceId = properties.resourceDetails.id,\nresourceSource = properties.resourceDetails.source,\ncategory = properties.category,\nseverity = properties.status.severity,\ncode = properties.status.code,\ntimeGenerated = properties.timeGenerated,\nremediation = properties.remediation,\nimpact = properties.impact,\nvulnId = properties.id,\nadditionalData = properties.additionalData",
          "source": "kql",
          "length": 948,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/assessments'\n| where properties.displayName contains 'Container registry images should have vulnerability findings resolved'\n| summarize by assessmentKey=name //the ID of the assessment\n| join kind=inner (\nsecurityresources\n| where type == 'microsoft.security/assessments/subassessments'\n| extend assessmentKey = extract('.assessments/(.+?)/.',1,  id)\n) on assessmentKey\n| project assessmentKey, subassessmentKey=name, id, parse_json(properties), resourceGroup, subscriptionId, tenantId\n| extend description = properties.description,\ndisplayName = properties.displayName,\nresourceId = properties.resourceDetails.id,\nresourceSource = properties.resourceDetails.source,\ncategory = properties.category,\nseverity = properties.status.severity,\ncode = properties.status.code,\ntimeGenerated = properties.timeGenerated,\nremediation = properties.remediation,\nimpact = properties.impact,\nvulnId = properties.id,\nadditionalData = properties.additionalData",
          "source": "kql",
          "length": 998,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/assessments'\n| extend resourceId=id,\nrecommendationId=name,\nrecommendationName=properties.displayName,\nsource=properties.resourceDetails.Source,\nrecommendationState=properties.status.code,\ndescription=properties.metadata.description,\nassessmentType=properties.metadata.assessmentType,\nremediationDescription=properties.metadata.remediationDescription,\npolicyDefinitionId=properties.metadata.policyDefinitionId,\nimplementationEffort=properties.metadata.implementationEffort,\nrecommendationSeverity=properties.metadata.severity,\ncategory=properties.metadata.categories,\nuserImpact=properties.metadata.userImpact,\nthreats=properties.metadata.threats,\nportalLink=properties.links.azurePortal\n| project tenantId, subscriptionId, resourceId, recommendationName, recommendationId, recommendationState, recommendationSeverity, description, remediationDescription, assessmentType, policyDefinitionId, implementationEffort, userImpact, category, threats, source, portalLink",
          "source": "kql",
          "length": 1017,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/insights/classification'\n| where properties.associatedResource contains '\\$resource_id'\n| project SensitivityInsight = properties.insightProperties.purviewCatalogs[0].sensitivity",
          "source": "cli",
          "length": 232,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/securescores'\n| project subscriptionId, subscriptionTotal = iff(properties.score.max == 0, 0.00, round(tolong(properties.weight)  todouble(properties.score.current)/tolong(properties.score.max),2)), weight = tolong(iff(properties.weight == 0, 1, properties.weight))\n| join kind=leftouter ( ResourceContainers\n| where type == 'microsoft.resources/subscriptions' and properties.state == 'Enabled'\n| project subscriptionId, mgChain=properties.managementGroupAncestorsChain ) on subscriptionId\n| mv-expand mg=mgChain\n| summarize sumSubs = sum(subscriptionTotal), sumWeight = sum(weight), resultsNum = count() by tostring(mg.displayName), mgId = tostring(mg.name)\n| extend secureScore = iff(tolong(resultsNum) == 0, 404.00, round(sumSubs/sumWeight100,2))\n| project mgName=mg_displayName, mgId, sumSubs, sumWeight, resultsNum, secureScore\n| order by mgName asc",
          "source": "cli",
          "length": 908,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/assessments'\n| where  contains 'vulnerabilities in your virtual machines'\n| summarize by assessmentKey=name //the ID of the assessment\n| join kind=inner ( securityresources\n| where type == 'microsoft.security/assessments/subassessments'\n| extend assessmentKey = extract('.assessments/(.+?)/.*',1, id) ) on assessmentKey\n| project assessmentKey, subassessmentKey=name, id, parse_json(properties), resourceGroup, subscriptionId, tenantId\n| extend description = properties.description, displayName = properties.displayName, resourceId = properties.resourceDetails.id, resourceSource = properties.resourceDetails.source, category = properties.category, severity = properties.status.severity, code = properties.status.code, timeGenerated = properties.timeGenerated, remediation = properties.remediation, impact = properties.impact, vulnId = properties.id, additionalData = properties.additionalData",
          "source": "cli",
          "length": 947,
          "startsWithTable": true
        },
        {
          "code": "SecurityResources\n| where type == 'microsoft.security/assessments'\n| where properties.displayName contains 'Container registry images should have vulnerability findings resolved'\n| summarize by assessmentKey=name //the ID of the assessment\n| join kind=inner ( securityresources\n| where type == 'microsoft.security/assessments/subassessments'\n| extend assessmentKey = extract('.assessments/(.+?)/.',1, id) ) on assessmentKey\n| project assessmentKey, subassessmentKey=name, id, parse_json(properties), resourceGroup, subscriptionId, tenantId\n| extend description = properties.description, displayName = properties.displayName, resourceId = properties.resourceDetails.id, resourceSource = properties.resourceDetails.source, category = properties.category, severity = properties.status.severity, code = properties.status.code, timeGenerated = properties.timeGenerated, remediation = properties.remediation, impact = properties.impact, vulnId = properties.id, additionalData = properties.additionalData",
          "source": "cli",
          "length": 997,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.Security",
      "resourceTypes": [
        "microsoft.authorization/locks/providers/assessments/governanceassignments",
        "microsoft.authorization/roleassignments/providers/assessments/governanceassignments",
        "microsoft.security/apicollections",
        "microsoft.security/apicollections/apiendpoints",
        "microsoft.security/assessments",
        "microsoft.security/assessments/governanceassignments",
        "microsoft.security/assessments/subassessments",
        "microsoft.security/attackpaths",
        "microsoft.security/governancerules",
        "microsoft.security/healthreports",
        "microsoft.security/insights",
        "microsoft.security/integrations",
        "microsoft.security/iotalerts",
        "microsoft.security/locations/alerts",
        "microsoft.security/locations/attackpaths",
        "microsoft.security/pricings",
        "microsoft.security/regulatorycompliancestandards",
        "microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols",
        "microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments",
        "microsoft.security/securescores",
        "microsoft.security/securescores/securescorecontrols",
        "microsoft.security/securityconnectors/devops",
        "microsoft.security/securityconnectors/devops/azuredevopsorgs",
        "microsoft.security/securityconnectors/devops/azuredevopsorgs/projects/repos",
        "microsoft.security/securityconnectors/devops/githubowners",
        "microsoft.security/securityconnectors/devops/githubowners/repos",
        "microsoft.security/securityconnectors/devops/gitlabgroups",
        "microsoft.security/securityconnectors/devops/gitlabgroups/projects",
        "microsoft.security/softwareinventories",
        "microsoft.security/softwareinventory",
        "microsoft.security/standardassignments"
      ]
    },
    "servicefabricresources": {
      "name": "servicefabricresources",
      "examples": [],
      "description": "Related to Microsoft.ServiceFabric",
      "resourceTypes": [
        "microsoft.servicefabric/clusters/applications",
        "microsoft.servicefabric/clusters/applications/services",
        "microsoft.servicefabric/clusters/applicationtypes",
        "microsoft.servicefabric/clusters/applicationtypes/versions",
        "microsoft.servicefabric/managedclusters",
        "microsoft.servicefabric/managedclusters/applications",
        "microsoft.servicefabric/managedclusters/applications/services",
        "microsoft.servicefabric/managedclusters/applicationtypes",
        "microsoft.servicefabric/managedclusters/applicationtypes/versions",
        "microsoft.servicefabric/managedclusters/nodetypes"
      ]
    },
    "servicehealthresources": {
      "name": "servicehealthresources",
      "examples": [
        {
          "code": "ServiceHealthResources\n| where type =~ 'Microsoft.ResourceHealth/events'\n| extend eventType = properties.EventType, status = properties.Status, description = properties.Title, trackingId = properties.TrackingId, summary = properties.Summary, priority = properties.Priority, impactStartTime = properties.ImpactStartTime, impactMitigationTime = properties.ImpactMitigationTime\n| where eventType == 'ServiceIssue' and status == 'Active'",
          "source": "kql",
          "length": 433,
          "startsWithTable": true
        },
        {
          "code": "ServiceHealthResources\n| where type =~ 'Microsoft.ResourceHealth/events'\n| extend eventType = properties.EventType, status = properties.Status, description = properties.Title, trackingId = properties.TrackingId, summary = properties.Summary, priority = properties.Priority, impactStartTime = properties.ImpactStartTime, impactMitigationTime = todatetime(tolong(properties.ImpactMitigationTime))\n| where eventType == 'HealthAdvisory' and impactMitigationTime > now()",
          "source": "kql",
          "length": 465,
          "startsWithTable": true
        },
        {
          "code": "ServiceHealthResources\n| where type =~ 'Microsoft.ResourceHealth/events'\n| extend eventType = properties.EventType, status = properties.Status, description = properties.Title, trackingId = properties.TrackingId, summary = properties.Summary, priority = properties.Priority, impactStartTime = properties.ImpactStartTime, impactMitigationTime = todatetime(tolong(properties.ImpactMitigationTime))\n| where eventType == 'PlannedMaintenance' and impactMitigationTime > now()",
          "source": "kql",
          "length": 469,
          "startsWithTable": true
        },
        {
          "code": "ServiceHealthResources\n| where type =~ 'Microsoft.ResourceHealth/events'\n| extend eventType = tostring(properties.EventType), status = properties.Status, description = properties.Title, trackingId = properties.TrackingId, summary = properties.Summary, priority = properties.Priority, impactStartTime = properties.ImpactStartTime, impactMitigationTime = properties.ImpactMitigationTime\n| where eventType == 'ServiceIssue' and status == 'Active'\n| summarize count(subscriptionId) by name",
          "source": "kql",
          "length": 485,
          "startsWithTable": true
        },
        {
          "code": "ServiceHealthResources\n| where type =~ 'Microsoft.ResourceHealth/events'\n| extend eventType = properties.EventType, status = properties.Status, description = properties.Title, trackingId = properties.TrackingId, summary = properties.Summary, priority = properties.Priority, impactStartTime = properties.ImpactStartTime, impactMitigationTime = properties.ImpactMitigationTime\n| where (eventType in ('HealthAdvisory', 'SecurityAdvisory', 'PlannedMaintenance') and impactMitigationTime > now()) or (eventType == 'ServiceIssue' and status == 'Active')",
          "source": "kql",
          "length": 547,
          "startsWithTable": true
        }
      ],
      "description": "Related to Microsoft.ResourceHealth/events",
      "resourceTypes": [
        "microsoft.resourcehealth/events",
        "microsoft.resourcehealth/events/impactedresources"
      ]
    },
    "sharedgalleryresources": {
      "name": "sharedgalleryresources",
      "resourceTypes": [
        "microsoft.compute/locations/sharedgalleries"
      ],
      "examples": []
    },
    "spotresources": {
      "name": "spotresources",
      "resourceTypes": [
        "microsoft.compute/skualternativespotvmsize/location",
        "microsoft.compute/skuspotevictionrate/location",
        "microsoft.compute/skuspotpricehistory/ostype/location"
      ],
      "examples": [],
      "description": "Related to Microsoft.Compute"
    },
    "tagsresources": {
      "name": "tagsresources",
      "resourceTypes": [
        "microsoft.resources/tagnamespaces",
        "microsoft.resources/tagnamespaces/tagnames",
        "microsoft.resources/tagnamespaces/tags"
      ],
      "examples": [],
      "description": "Related to Microsoft.Resources/tagnamespaces"
    },
    "insightresources": {
      "name": "insightresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.insights/datacollectionruleassociations",
        "microsoft.insights/tenantactiongroups"
      ]
    },
    "managedserviceresources": {
      "name": "managedserviceresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.managedservices/registrationassignments",
        "microsoft.managedservices/registrationdefinitions"
      ]
    },
    "mirgateresources": {
      "name": "mirgateresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.migrate/assessmentprojects/aksassessments",
        "microsoft.migrate/assessmentprojects/aksassessments/assessedwebapps",
        "microsoft.migrate/assessmentprojects/aksassessments/clusters",
        "microsoft.migrate/assessmentprojects/aksassessments/costdetails",
        "microsoft.migrate/assessmentprojects/aksassessments/summaries",
        "microsoft.migrate/assessmentprojects/assessments",
        "microsoft.migrate/assessmentprojects/assessments/assessedmachines",
        "microsoft.migrate/assessmentprojects/assessments/summaries",
        "microsoft.migrate/assessmentprojects/avsassessments",
        "microsoft.migrate/assessmentprojects/avsassessments/avsassessedmachines",
        "microsoft.migrate/assessmentprojects/avsassessments/summaries",
        "microsoft.migrate/assessmentprojects/groups",
        "microsoft.migrate/assessmentprojects/groups/assessments",
        "microsoft.migrate/assessmentprojects/groups/assessments/assessedmachines",
        "microsoft.migrate/assessmentprojects/groups/avsassessments",
        "microsoft.migrate/assessmentprojects/groups/avsassessments/avsassessedmachines",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqldatabases",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqlinstances",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqlmachines",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/recommendedassessedentities",
        "microsoft.migrate/assessmentprojects/groups/sqlassessments/summaries",
        "microsoft.migrate/assessmentprojects/groups/webappassessments",
        "microsoft.migrate/assessmentprojects/groups/webappassessments/assessedwebapps",
        "microsoft.migrate/assessmentprojects/groups/webappassessments/summaries",
        "microsoft.migrate/assessmentprojects/groups/webappassessments/webappserviceplans",
        "microsoft.migrate/assessmentprojects/heterogeneousassessments",
        "microsoft.migrate/assessmentprojects/heterogeneousassessments/summaries",
        "microsoft.migrate/assessmentprojects/machineassessments/assessedmachines",
        "microsoft.migrate/assessmentprojects/mysqlassessments",
        "microsoft.migrate/assessmentprojects/mysqlassessments/assessedinstances",
        "microsoft.migrate/assessmentprojects/mysqlassessments/summaries",
        "microsoft.migrate/assessmentprojects/sqlassessments",
        "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqldatabases",
        "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqlinstances",
        "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqlmachines",
        "microsoft.migrate/assessmentprojects/sqlassessments/summaries",
        "microsoft.migrate/assessmentprojects/webappassessments",
        "microsoft.migrate/assessmentprojects/webappassessments/assessedwebapps",
        "microsoft.migrate/assessmentprojects/webappassessments/summaries",
        "microsoft.migrate/assessmentprojects/webappassessments/webappserviceplans",
        "microsoft.migrate/assessmentprojects/webappcompoundassessments",
        "microsoft.migrate/assessmentprojects/webappcompoundassessments/summaries",
        "microsoft.migrate/migrateprojects/waves",
        "microsoft.migrate/migrateprojects/waves/workloads",
        "microsoft.offazure/hypervsites/clusters",
        "microsoft.offazure/hypervsites/hosts",
        "microsoft.offazure/hypervsites/machines",
        "microsoft.offazure/hypervsites/machines/softwareinventories",
        "microsoft.offazure/importsites/machines",
        "microsoft.offazure/mastersites/sqlsites/sqldatabases",
        "microsoft.offazure/mastersites/sqlsites/sqlservers",
        "microsoft.offazure/mastersites/webappsites/extendedmachines",
        "microsoft.offazure/mastersites/webappsites/iiswebapplications",
        "microsoft.offazure/mastersites/webappsites/iiswebservers",
        "microsoft.offazure/mastersites/webappsites/tomcatwebapplications",
        "microsoft.offazure/mastersites/webappsites/tomcatwebservers",
        "microsoft.offazure/serversites/machines",
        "microsoft.offazure/serversites/machines/softwareinventories",
        "microsoft.offazure/vmwaresites/hosts",
        "microsoft.offazure/vmwaresites/machines",
        "microsoft.offazure/vmwaresites/machines/softwareinventories",
        "microsoft.offazure/vmwaresites/vcenters",
        "microsoft.offazurespringboot/springbootsites/springbootapps",
        "microsoft.offazurespringboot/springbootsites/springbootservers"
      ]
    },
    "sportresources": {
      "name": "sportresources",
      "examples": [],
      "resourceTypes": []
    },
    "tagresources": {
      "name": "tagresources",
      "examples": [],
      "resourceTypes": [
        "microsoft.resources/tagnamespaces",
        "microsoft.resources/tagnamespaces/tagnames",
        "microsoft.resources/tagnamespaces/tags"
      ]
    }
  },
  "resourceTypes": {
    "microsoft.advisor/assessments": {
      "name": "microsoft.advisor/assessments",
      "table": "advisorresources",
      "properties": []
    },
    "microsoft.advisor/configurations": {
      "name": "microsoft.advisor/configurations",
      "table": "advisorresources",
      "properties": []
    },
    "microsoft.advisor/recommendations": {
      "name": "microsoft.advisor/recommendations",
      "table": "advisorresources",
      "properties": []
    },
    "microsoft.advisor/recommendations/suppressions": {
      "name": "microsoft.advisor/recommendations/suppressions",
      "table": "advisorresources",
      "properties": []
    },
    "microsoft.advisor/resiliencyreviews": {
      "name": "microsoft.advisor/resiliencyreviews",
      "table": "advisorresources",
      "properties": []
    },
    "microsoft.advisor/suppressions": {
      "name": "microsoft.advisor/suppressions",
      "table": "advisorresources",
      "properties": []
    },
    "microsoft.advisor/triagerecommendations": {
      "name": "microsoft.advisor/triagerecommendations",
      "table": "advisorresources",
      "properties": []
    },
    "microsoft.advisor/triageresources": {
      "name": "microsoft.advisor/triageresources",
      "table": "advisorresources",
      "properties": []
    },
    "microsoft.containerservice/fleetmemberships": {
      "name": "microsoft.containerservice/fleetmemberships",
      "table": "aksresources",
      "properties": []
    },
    "microsoft.containerservice/fleets/autoupgradeprofiles": {
      "table": "aksresources",
      "type": "microsoft.containerservice/fleets/autoupgradeprofiles"
    },
    "microsoft.containerservice/fleets/gates": {
      "name": "microsoft.containerservice/fleets/gates",
      "table": "aksresources",
      "properties": []
    },
    "microsoft.containerservice/fleets/members": {
      "table": "aksresources",
      "type": "microsoft.containerservice/fleets/members"
    },
    "microsoft.containerservice/fleets/updateruns": {
      "table": "aksresources",
      "type": "microsoft.containerservice/fleets/updateruns"
    },
    "microsoft.containerservice/fleets/updatestrategies": {
      "table": "aksresources",
      "type": "microsoft.containerservice/fleets/updatestrategies"
    },
    "microsoft.alertsmanagement/alerts": {
      "table": "alertsmanagementresources",
      "type": "microsoft.alertsmanagement/alerts"
    },
    "microsoft.web/sites/config": {
      "table": "appserviceresources",
      "type": "microsoft.web/sites/config"
    },
    "microsoft.web/sites/slots/config": {
      "table": "appserviceresources",
      "type": "microsoft.web/sites/slots/config"
    },
    "microsoft.web/sites/workflows": {
      "table": "appserviceresources",
      "type": "microsoft.web/sites/workflows"
    },
    "microsoft.authorization/classicadministrators": {
      "table": "authorizationresources",
      "type": "microsoft.authorization/classicadministrators"
    },
    "microsoft.authorization/roleassignments": {
      "table": "authorizationresources",
      "type": "microsoft.authorization/roleassignments"
    },
    "microsoft.authorization/roledefinitions": {
      "table": "authorizationresources",
      "type": "microsoft.authorization/roledefinitions"
    },
    "microsoft.awsconnector/ec2instances": {
      "table": "awsresources",
      "type": "microsoft.awsconnector/ec2instances"
    },
    "microsoft.awsconnector/eksclusters": {
      "table": "awsresources",
      "type": "microsoft.awsconnector/eksclusters"
    },
    "microsoft.azurebusinesscontinuity/deletedunifiedprotecteditems": {
      "table": "resources",
      "type": "microsoft.azurebusinesscontinuity/deletedunifiedprotecteditems"
    },
    "microsoft.azurebusinesscontinuity/unifiedprotecteditems": {
      "table": "azurebusinesscontinuityresources",
      "type": "microsoft.azurebusinesscontinuity/unifiedprotecteditems"
    },
    "microsoft.azuredevopsplatform/organizations": {
      "table": "azuredevopsplatformresources",
      "type": "microsoft.azuredevopsplatform/organizations"
    },
    "microsoft.batch/batchaccounts/pools": {
      "table": "batchresources",
      "type": "microsoft.batch/batchaccounts/pools"
    },
    "microsoft.resources/capabilities": {
      "table": "capabilityresources",
      "type": "microsoft.resources/capabilities"
    },
    "microsoft.chaos/experiments/executions": {
      "table": "chaosresources",
      "type": "microsoft.chaos/experiments/executions"
    },
    "microsoft.chaos/experiments/statuses": {
      "table": "chaosresources",
      "type": "microsoft.chaos/experiments/statuses"
    },
    "microsoft.chaos/targets": {
      "table": "chaosresources",
      "type": "microsoft.chaos/targets"
    },
    "microsoft.chaos/targets/capabilities": {
      "table": "chaosresources",
      "type": "microsoft.chaos/targets/capabilities"
    },
    "microsoft.compute/locations/communitygalleries": {
      "name": "microsoft.compute/locations/communitygalleries",
      "table": "communitygalleryresources",
      "properties": []
    },
    "microsoft.compute/locations/communitygalleries/applications": {
      "name": "microsoft.compute/locations/communitygalleries/applications",
      "table": "communitygalleryresources",
      "properties": []
    },
    "microsoft.compute/locations/communitygalleries/applications/versions": {
      "name": "microsoft.compute/locations/communitygalleries/applications/versions",
      "table": "communitygalleryresources",
      "properties": []
    },
    "microsoft.compute/locations/communitygalleries/images": {
      "name": "microsoft.compute/locations/communitygalleries/images",
      "table": "communitygalleryresources",
      "properties": []
    },
    "microsoft.compute/locations/communitygalleries/images/versions": {
      "name": "microsoft.compute/locations/communitygalleries/images/versions",
      "table": "communitygalleryresources",
      "properties": []
    },
    "microsoft.compute/virtualmachinescalesets/virtualmachines": {
      "name": "microsoft.compute/virtualmachinescalesets/virtualmachines",
      "table": "computeresources",
      "properties": []
    },
    "microsoft.compute/virtualmachinescalesets/virtualmachines/networkinterfaces": {
      "name": "microsoft.compute/virtualmachinescalesets/virtualmachines/networkinterfaces",
      "table": "computeresources",
      "properties": []
    },
    "microsoft.compute/virtualmachinescalesets/virtualmachines/networkinterfaces/ipconfigurations/publicipaddresses": {
      "name": "microsoft.compute/virtualmachinescalesets/virtualmachines/networkinterfaces/ipconfigurations/publicipaddresses",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerservice/managedclusters/scheduledevents": {
      "table": "resources",
      "type": "microsoft.containerservice/managedclusters/scheduledevents"
    },
    "microsoft.resources/deploymentstacks": {
      "table": "deploymentresources",
      "type": "microsoft.resources/deploymentstacks"
    },
    "microsoft.desktopvirtualization/hostpools/sessionhosts": {
      "table": "desktopvirtualizationresources",
      "type": "microsoft.desktopvirtualization/hostpools/sessionhosts"
    },
    "microsoft.network/dnszones/a": {
      "table": "dnsresources",
      "type": "microsoft.network/dnszones/a"
    },
    "microsoft.network/dnszones/aaaa": {
      "table": "dnsresources",
      "type": "microsoft.network/dnszones/aaaa"
    },
    "microsoft.network/dnszones/caa": {
      "name": "microsoft.network/dnszones/caa",
      "table": "dnsresources",
      "properties": []
    },
    "microsoft.network/dnszones/cname": {
      "table": "dnsresources",
      "type": "microsoft.network/dnszones/cname"
    },
    "microsoft.network/dnszones/ds": {
      "name": "microsoft.network/dnszones/ds",
      "table": "dnsresources",
      "properties": []
    },
    "microsoft.network/dnszones/mx": {
      "table": "dnsresources",
      "type": "microsoft.network/dnszones/mx"
    },
    "microsoft.network/dnszones/naptr": {
      "name": "microsoft.network/dnszones/naptr",
      "table": "dnsresources",
      "properties": []
    },
    "microsoft.network/dnszones/ns": {
      "name": "microsoft.network/dnszones/ns",
      "table": "dnsresources",
      "properties": []
    },
    "microsoft.network/dnszones/ptr": {
      "table": "dnsresources",
      "type": "microsoft.network/dnszones/ptr"
    },
    "microsoft.network/dnszones/soa": {
      "table": "dnsresources",
      "type": "microsoft.network/dnszones/soa"
    },
    "microsoft.network/dnszones/srv": {
      "table": "dnsresources",
      "type": "microsoft.network/dnszones/srv"
    },
    "microsoft.network/dnszones/tlsa": {
      "name": "microsoft.network/dnszones/tlsa",
      "table": "dnsresources",
      "properties": []
    },
    "microsoft.network/dnszones/txt": {
      "table": "dnsresources",
      "type": "microsoft.network/dnszones/txt"
    },
    "microsoft.network/privatednszones/a": {
      "table": "dnsresources",
      "type": "microsoft.network/privatednszones/a"
    },
    "microsoft.network/privatednszones/aaaa": {
      "table": "dnsresources",
      "type": "microsoft.network/privatednszones/aaaa"
    },
    "microsoft.network/privatednszones/cname": {
      "table": "dnsresources",
      "type": "microsoft.network/privatednszones/cname"
    },
    "microsoft.network/privatednszones/mx": {
      "table": "dnsresources",
      "type": "microsoft.network/privatednszones/mx"
    },
    "microsoft.network/privatednszones/ptr": {
      "table": "dnsresources",
      "type": "microsoft.network/privatednszones/ptr"
    },
    "microsoft.network/privatednszones/soa": {
      "table": "dnsresources",
      "type": "microsoft.network/privatednszones/soa"
    },
    "microsoft.network/privatednszones/srv": {
      "table": "dnsresources",
      "type": "microsoft.network/privatednszones/srv"
    },
    "microsoft.network/privatednszones/txt": {
      "table": "dnsresources",
      "type": "microsoft.network/privatednszones/txt"
    },
    "microsoft.edgeorder/orders": {
      "table": "edgeorderresources",
      "type": "microsoft.edgeorder/orders"
    },
    "microsoft.elasticsan/elasticsans": {
      "table": "elasticsanresources",
      "type": "microsoft.elasticsan/elasticsans"
    },
    "microsoft.elasticsan/elasticsans/volumegroups": {
      "table": "elasticsanresources",
      "type": "microsoft.elasticsan/elasticsans/volumegroups"
    },
    "microsoft.elasticsan/elasticsans/volumegroups/volumes": {
      "table": "elasticsanresources",
      "type": "microsoft.elasticsan/elasticsans/volumegroups/volumes"
    },
    "microsoft.extendedlocation/customlocations/enabledresourcetypes": {
      "table": "extendedlocationresources",
      "type": "microsoft.extendedlocation/customlocations/enabledresourcetypes"
    },
    "microsoft.resources/changes": {
      "table": "resources",
      "type": "microsoft.resources/changes"
    },
    "microsoft.features/featureprovidernamespaces/featureconfigurations": {
      "table": "resources",
      "type": "microsoft.features/featureprovidernamespaces/featureconfigurations"
    },
    "microsoft.features/featureproviders/subscriptionfeatureregistrations": {
      "table": "resources",
      "type": "microsoft.features/featureproviders/subscriptionfeatureregistrations"
    },
    "microsoft.gcpconnector/computeinstances": {
      "name": "microsoft.gcpconnector/computeinstances",
      "table": "gcpresources",
      "properties": []
    },
    "microsoft.guestconfiguration/guestconfigurationassignments": {
      "table": "guestconfigurationresources",
      "type": "microsoft.guestconfiguration/guestconfigurationassignments"
    },
    "microsoft.guestconfiguration/guestconfigurationassignments/reports": {
      "table": "guestconfigurationresources",
      "type": "microsoft.guestconfiguration/guestconfigurationassignments/reports"
    },
    "microsoft.resourcehealth/availabilitystatuses": {
      "table": "resources",
      "type": "microsoft.resourcehealth/availabilitystatuses"
    },
    "microsoft.resourcehealth/resourceannotations": {
      "table": "resources",
      "type": "microsoft.resourcehealth/resourceannotations"
    },
    "microsoft.impact/connectors": {
      "table": "impactreportresources",
      "type": "microsoft.impact/connectors"
    },
    "microsoft.impact/workloadimpacts": {
      "table": "impactreportresources",
      "type": "microsoft.impact/workloadimpacts"
    },
    "microsoft.impact/workloadimpacts/insights": {
      "table": "impactreportresources",
      "type": "microsoft.impact/workloadimpacts/insights"
    },
    "microsoft.insights/datacollectionruleassociations": {
      "table": "insightresources",
      "type": "microsoft.insights/datacollectionruleassociations"
    },
    "microsoft.insights/tenantactiongroups": {
      "table": "insightresources",
      "type": "microsoft.insights/tenantactiongroups"
    },
    "microsoft.iotfirmwaredefense/firmwaregroups/firmwares": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotfirmwaredefense/firmwaregroups/firmwares"
    },
    "microsoft.iotfirmwaredefense/workspaces/firmwares": {
      "name": "microsoft.iotfirmwaredefense/workspaces/firmwares",
      "table": "iotsecurityresources",
      "properties": []
    },
    "microsoft.iotsecurity/locations/devicegroups/alerts": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotsecurity/locations/devicegroups/alerts"
    },
    "microsoft.iotsecurity/locations/devicegroups/devices": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotsecurity/locations/devicegroups/devices"
    },
    "microsoft.iotsecurity/locations/devicegroups/recommendations": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotsecurity/locations/devicegroups/recommendations"
    },
    "microsoft.iotsecurity/locations/devicegroups/vulnerabilities": {
      "name": "microsoft.iotsecurity/locations/devicegroups/vulnerabilities",
      "table": "iotsecurityresources",
      "properties": []
    },
    "microsoft.iotsecurity/locations/sites": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotsecurity/locations/sites"
    },
    "microsoft.iotsecurity/locations/sites/sensors": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotsecurity/locations/sites/sensors"
    },
    "microsoft.iotsecurity/onpremisesensors": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotsecurity/onpremisesensors"
    },
    "microsoft.iotsecurity/sensors": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotsecurity/sensors"
    },
    "microsoft.iotsecurity/sites": {
      "table": "iotsecurityresources",
      "type": "microsoft.iotsecurity/sites"
    },
    "microsoft.kubernetesconfiguration/extensions": {
      "table": "kubernetesconfigurationresources",
      "type": "microsoft.kubernetesconfiguration/extensions"
    },
    "microsoft.kubernetesconfiguration/fluxconfigurations": {
      "table": "kubernetesconfigurationresources",
      "type": "microsoft.kubernetesconfiguration/fluxconfigurations"
    },
    "microsoft.kubernetesconfiguration/namespaces": {
      "table": "kubernetesconfigurationresources",
      "type": "microsoft.kubernetesconfiguration/namespaces"
    },
    "microsoft.kubernetesconfiguration/sourcecontrolconfigurations": {
      "table": "kubernetesconfigurationresources",
      "type": "microsoft.kubernetesconfiguration/sourcecontrolconfigurations"
    },
    "microsoft.kusto/clusters/databases/dataconnections": {
      "table": "kustoresources",
      "type": "microsoft.kusto/clusters/databases/dataconnections"
    },
    "microsoft.offazure/hypervsites/machines/inventoryinsights": {
      "name": "microsoft.offazure/hypervsites/machines/inventoryinsights",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/hypervsites/machines/inventoryinsights/pendingupdates": {
      "name": "microsoft.offazure/hypervsites/machines/inventoryinsights/pendingupdates",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/serversites/machines/inventoryinsights": {
      "name": "microsoft.offazure/serversites/machines/inventoryinsights",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/serversites/machines/inventoryinsights/pendingupdates": {
      "name": "microsoft.offazure/serversites/machines/inventoryinsights/pendingupdates",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/serversites/machines/inventoryinsights/software": {
      "name": "microsoft.offazure/serversites/machines/inventoryinsights/software",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/serversites/machines/inventoryinsights/vulnerabilities": {
      "name": "microsoft.offazure/serversites/machines/inventoryinsights/vulnerabilities",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/serversites/machines/pendingupdates": {
      "name": "microsoft.offazure/serversites/machines/pendingupdates",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/serversites/machines/software": {
      "name": "microsoft.offazure/serversites/machines/software",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/vmwaresites/machines/inventoryinsights": {
      "name": "microsoft.offazure/vmwaresites/machines/inventoryinsights",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/vmwaresites/machines/inventoryinsights/pendingupdates": {
      "name": "microsoft.offazure/vmwaresites/machines/inventoryinsights/pendingupdates",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/vmwaresites/machines/inventoryinsights/software": {
      "name": "microsoft.offazure/vmwaresites/machines/inventoryinsights/software",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.offazure/vmwaresites/machines/inventoryinsights/vulnerabilities": {
      "name": "microsoft.offazure/vmwaresites/machines/inventoryinsights/vulnerabilities",
      "table": "machinesinventoryinsightsresources",
      "properties": []
    },
    "microsoft.maintenance/applyupdates": {
      "table": "resources",
      "type": "microsoft.maintenance/applyupdates"
    },
    "microsoft.maintenance/computemrpresponse/applyupdates": {
      "name": "microsoft.maintenance/computemrpresponse/applyupdates",
      "table": "maintenanceresources",
      "properties": []
    },
    "microsoft.maintenance/configurationassignments": {
      "table": "resources",
      "type": "microsoft.maintenance/configurationassignments"
    },
    "microsoft.maintenance/maintenanceconfigurations/applyupdates": {
      "table": "resources",
      "type": "microsoft.maintenance/maintenanceconfigurations/applyupdates"
    },
    "microsoft.maintenance/updates": {
      "table": "resources",
      "type": "microsoft.maintenance/updates"
    },
    "microsoft.managedservices/registrationassignments": {
      "table": "managedserviceresources",
      "type": "microsoft.managedservices/registrationassignments"
    },
    "microsoft.managedservices/registrationdefinitions": {
      "table": "managedserviceresources",
      "type": "microsoft.managedservices/registrationdefinitions"
    },
    "microsoft.applicationmigration/discoveryhubs/applications": {
      "name": "microsoft.applicationmigration/discoveryhubs/applications",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.applicationmigration/discoveryhubs/applications/members": {
      "name": "microsoft.applicationmigration/discoveryhubs/applications/members",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.applicationmigration/pgsqlsites/agents": {
      "name": "microsoft.applicationmigration/pgsqlsites/agents",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.applicationmigration/pgsqlsites/pgsqldatabases": {
      "name": "microsoft.applicationmigration/pgsqlsites/pgsqldatabases",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.applicationmigration/pgsqlsites/pgsqlinstances": {
      "name": "microsoft.applicationmigration/pgsqlsites/pgsqlinstances",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.applicationmigration/storagesites/agents": {
      "name": "microsoft.applicationmigration/storagesites/agents",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.applicationmigration/storagesites/fileshares": {
      "name": "microsoft.applicationmigration/storagesites/fileshares",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/aksassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/aksassessments"
    },
    "microsoft.migrate/assessmentprojects/aksassessments/assessedwebapps": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/aksassessments/assessedwebapps"
    },
    "microsoft.migrate/assessmentprojects/aksassessments/clusters": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/aksassessments/clusters"
    },
    "microsoft.migrate/assessmentprojects/aksassessments/costdetails": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/aksassessments/costdetails"
    },
    "microsoft.migrate/assessmentprojects/aksassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/aksassessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/applicationassessments": {
      "name": "microsoft.migrate/assessmentprojects/applicationassessments",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/applicationassessments/assessedapplications": {
      "name": "microsoft.migrate/assessmentprojects/applicationassessments/assessedapplications",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/assessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/assessments"
    },
    "microsoft.migrate/assessmentprojects/assessments/assessedmachines": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/assessments/assessedmachines"
    },
    "microsoft.migrate/assessmentprojects/assessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/assessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/avsassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/avsassessments"
    },
    "microsoft.migrate/assessmentprojects/avsassessments/avsassessedmachines": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/avsassessments/avsassessedmachines"
    },
    "microsoft.migrate/assessmentprojects/avsassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/avsassessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/businesscases": {
      "name": "microsoft.migrate/assessmentprojects/businesscases",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/castconnections": {
      "name": "microsoft.migrate/assessmentprojects/castconnections",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/groups": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups"
    },
    "microsoft.migrate/assessmentprojects/groups/assessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/assessments"
    },
    "microsoft.migrate/assessmentprojects/groups/assessments/assessedmachines": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/assessments/assessedmachines"
    },
    "microsoft.migrate/assessmentprojects/groups/avsassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/avsassessments"
    },
    "microsoft.migrate/assessmentprojects/groups/avsassessments/avsassessedmachines": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/avsassessments/avsassessedmachines"
    },
    "microsoft.migrate/assessmentprojects/groups/sqlassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/sqlassessments"
    },
    "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqldatabases": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqldatabases"
    },
    "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqlinstances": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqlinstances"
    },
    "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqlmachines": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/sqlassessments/assessedsqlmachines"
    },
    "microsoft.migrate/assessmentprojects/groups/sqlassessments/recommendedassessedentities": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/sqlassessments/recommendedassessedentities"
    },
    "microsoft.migrate/assessmentprojects/groups/sqlassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/sqlassessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/groups/webappassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/webappassessments"
    },
    "microsoft.migrate/assessmentprojects/groups/webappassessments/assessedwebapps": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/webappassessments/assessedwebapps"
    },
    "microsoft.migrate/assessmentprojects/groups/webappassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/webappassessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/groups/webappassessments/webappserviceplans": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/groups/webappassessments/webappserviceplans"
    },
    "microsoft.migrate/assessmentprojects/heterogeneousassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/heterogeneousassessments"
    },
    "microsoft.migrate/assessmentprojects/heterogeneousassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/heterogeneousassessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/machineassessments/assessedmachines": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/machineassessments/assessedmachines"
    },
    "microsoft.migrate/assessmentprojects/mysqlassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/mysqlassessments"
    },
    "microsoft.migrate/assessmentprojects/mysqlassessments/assessedinstances": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/mysqlassessments/assessedinstances"
    },
    "microsoft.migrate/assessmentprojects/mysqlassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/mysqlassessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/pgsqlassessments": {
      "name": "microsoft.migrate/assessmentprojects/pgsqlassessments",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/pgsqlassessments/assessedinstances": {
      "name": "microsoft.migrate/assessmentprojects/pgsqlassessments/assessedinstances",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/pgsqlassessments/summaries": {
      "name": "microsoft.migrate/assessmentprojects/pgsqlassessments/summaries",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/sqlassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/sqlassessments"
    },
    "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqldatabases": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqldatabases"
    },
    "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqlinstances": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqlinstances"
    },
    "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqlmachines": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/sqlassessments/assessedsqlmachines"
    },
    "microsoft.migrate/assessmentprojects/sqlassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/sqlassessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/webappassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/webappassessments"
    },
    "microsoft.migrate/assessmentprojects/webappassessments/assessedwebapps": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/webappassessments/assessedwebapps"
    },
    "microsoft.migrate/assessmentprojects/webappassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/webappassessments/summaries"
    },
    "microsoft.migrate/assessmentprojects/webappassessments/webappserviceplans": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/webappassessments/webappserviceplans"
    },
    "microsoft.migrate/assessmentprojects/webappcompoundassessments": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/webappcompoundassessments"
    },
    "microsoft.migrate/assessmentprojects/webappcompoundassessments/assessedwebapps": {
      "name": "microsoft.migrate/assessmentprojects/webappcompoundassessments/assessedwebapps",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects/webappcompoundassessments/summaries": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/assessmentprojects/webappcompoundassessments/summaries"
    },
    "microsoft.migrate/castscanreports": {
      "name": "microsoft.migrate/castscanreports",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/castscanreports/codescanissues": {
      "name": "microsoft.migrate/castscanreports/codescanissues",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/migrateprojects/migrationentities": {
      "name": "microsoft.migrate/migrateprojects/migrationentities",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/migrateprojects/migrationentitygroups": {
      "name": "microsoft.migrate/migrateprojects/migrationentitygroups",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/migrateprojects/tasks": {
      "name": "microsoft.migrate/migrateprojects/tasks",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.migrate/migrateprojects/waves": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/migrateprojects/waves"
    },
    "microsoft.migrate/migrateprojects/waves/workloads": {
      "table": "mirgateresources",
      "type": "microsoft.migrate/migrateprojects/waves/workloads"
    },
    "microsoft.mysqldiscovery/mysqlsites/mysqlservers": {
      "name": "microsoft.mysqldiscovery/mysqlsites/mysqlservers",
      "table": "migrateresources",
      "properties": []
    },
    "microsoft.offazure/hypervsites/clusters": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/hypervsites/clusters"
    },
    "microsoft.offazure/hypervsites/hosts": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/hypervsites/hosts"
    },
    "microsoft.offazure/hypervsites/machines": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/hypervsites/machines"
    },
    "microsoft.offazure/hypervsites/machines/softwareinventories": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/hypervsites/machines/softwareinventories"
    },
    "microsoft.offazure/importsites/machines": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/importsites/machines"
    },
    "microsoft.offazure/mastersites/sqlsites/sqldatabases": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/mastersites/sqlsites/sqldatabases"
    },
    "microsoft.offazure/mastersites/sqlsites/sqlservers": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/mastersites/sqlsites/sqlservers"
    },
    "microsoft.offazure/mastersites/webappsites/extendedmachines": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/mastersites/webappsites/extendedmachines"
    },
    "microsoft.offazure/mastersites/webappsites/iiswebapplications": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/mastersites/webappsites/iiswebapplications"
    },
    "microsoft.offazure/mastersites/webappsites/iiswebservers": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/mastersites/webappsites/iiswebservers"
    },
    "microsoft.offazure/mastersites/webappsites/tomcatwebapplications": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/mastersites/webappsites/tomcatwebapplications"
    },
    "microsoft.offazure/mastersites/webappsites/tomcatwebservers": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/mastersites/webappsites/tomcatwebservers"
    },
    "microsoft.offazure/serversites/machines": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/serversites/machines"
    },
    "microsoft.offazure/serversites/machines/softwareinventories": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/serversites/machines/softwareinventories"
    },
    "microsoft.offazure/vmwaresites/hosts": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/vmwaresites/hosts"
    },
    "microsoft.offazure/vmwaresites/machines": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/vmwaresites/machines"
    },
    "microsoft.offazure/vmwaresites/machines/softwareinventories": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/vmwaresites/machines/softwareinventories"
    },
    "microsoft.offazure/vmwaresites/vcenters": {
      "table": "mirgateresources",
      "type": "microsoft.offazure/vmwaresites/vcenters"
    },
    "microsoft.offazurespringboot/springbootsites/springbootapps": {
      "table": "mirgateresources",
      "type": "microsoft.offazurespringboot/springbootsites/springbootapps"
    },
    "microsoft.offazurespringboot/springbootsites/springbootservers": {
      "table": "mirgateresources",
      "type": "microsoft.offazurespringboot/springbootsites/springbootservers"
    },
    "microsoft.network/effectiveconnectivityconfigurations": {
      "table": "resources",
      "type": "microsoft.network/effectiveconnectivityconfigurations"
    },
    "microsoft.network/effectivesecurityadminrules": {
      "table": "resources",
      "type": "microsoft.network/effectivesecurityadminrules"
    },
    "microsoft.network/firewallpolicies/rulecollectiongroups": {
      "table": "resources",
      "type": "microsoft.network/firewallpolicies/rulecollectiongroups"
    },
    "microsoft.network/networkgroupmemberships": {
      "table": "resources",
      "type": "microsoft.network/networkgroupmemberships"
    },
    "microsoft.network/networkmanagerconnections": {
      "table": "resources",
      "type": "microsoft.network/networkmanagerconnections"
    },
    "microsoft.network/networkmanagers/connectivityconfigurations": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/connectivityconfigurations"
    },
    "microsoft.network/networkmanagers/connectivityconfigurations/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/connectivityconfigurations/snapshots"
    },
    "microsoft.network/networkmanagers/connectivityregionalgoalstates": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/connectivityregionalgoalstates"
    },
    "microsoft.network/networkmanagers/networkgroups": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/networkgroups"
    },
    "microsoft.network/networkmanagers/networkgroups/aggregatedipaddressspaces": {
      "name": "microsoft.network/networkmanagers/networkgroups/aggregatedipaddressspaces",
      "table": "networkresources",
      "properties": []
    },
    "microsoft.network/networkmanagers/networkgroups/members": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/networkgroups/members"
    },
    "microsoft.network/networkmanagers/networkgroups/staticmembers": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/networkgroups/staticmembers"
    },
    "microsoft.network/networkmanagers/regionalgoalstates": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/regionalgoalstates"
    },
    "microsoft.network/networkmanagers/routingconfigurations": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/routingconfigurations"
    },
    "microsoft.network/networkmanagers/routingconfigurations/rulecollections": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/routingconfigurations/rulecollections"
    },
    "microsoft.network/networkmanagers/routingconfigurations/rulecollections/rules": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/routingconfigurations/rulecollections/rules"
    },
    "microsoft.network/networkmanagers/routingconfigurations/rulecollections/rules/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/routingconfigurations/rulecollections/rules/snapshots"
    },
    "microsoft.network/networkmanagers/routingconfigurations/rulecollections/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/routingconfigurations/rulecollections/snapshots"
    },
    "microsoft.network/networkmanagers/routingconfigurations/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/routingconfigurations/snapshots"
    },
    "microsoft.network/networkmanagers/routingregionalgoalstates": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/routingregionalgoalstates"
    },
    "microsoft.network/networkmanagers/securityadminconfigurations": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityadminconfigurations"
    },
    "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections"
    },
    "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/rules": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/rules"
    },
    "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/rules/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/rules/snapshots"
    },
    "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityadminconfigurations/rulecollections/snapshots"
    },
    "microsoft.network/networkmanagers/securityadminconfigurations/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityadminconfigurations/snapshots"
    },
    "microsoft.network/networkmanagers/securityadminregionalgoalstates": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityadminregionalgoalstates"
    },
    "microsoft.network/networkmanagers/securityuserconfigurations": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityuserconfigurations"
    },
    "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections"
    },
    "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/rules": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/rules"
    },
    "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/rules/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/rules/snapshots"
    },
    "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityuserconfigurations/rulecollections/snapshots"
    },
    "microsoft.network/networkmanagers/securityuserconfigurations/snapshots": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityuserconfigurations/snapshots"
    },
    "microsoft.network/networkmanagers/securityuserregionalgoalstates": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/securityuserregionalgoalstates"
    },
    "microsoft.network/networkmanagers/verifierworkspaces/reachabilityanalysisintents": {
      "table": "resources",
      "type": "microsoft.network/networkmanagers/verifierworkspaces/reachabilityanalysisintents"
    },
    "microsoft.network/networksecurityperimeters/linkreferences": {
      "table": "resources",
      "type": "microsoft.network/networksecurityperimeters/linkreferences"
    },
    "microsoft.network/networksecurityperimeters/links": {
      "table": "resources",
      "type": "microsoft.network/networksecurityperimeters/links"
    },
    "microsoft.network/networksecurityperimeters/loggingconfigurations": {
      "name": "microsoft.network/networksecurityperimeters/loggingconfigurations",
      "table": "networkresources",
      "properties": []
    },
    "microsoft.network/networksecurityperimeters/profiles": {
      "table": "resources",
      "type": "microsoft.network/networksecurityperimeters/profiles"
    },
    "microsoft.network/networksecurityperimeters/profiles/accessrules": {
      "table": "resources",
      "type": "microsoft.network/networksecurityperimeters/profiles/accessrules"
    },
    "microsoft.network/networksecurityperimeters/resourceassociations": {
      "table": "resources",
      "type": "microsoft.network/networksecurityperimeters/resourceassociations"
    },
    "microsoft.network/rulecollectiongroups": {
      "table": "resources",
      "type": "microsoft.network/rulecollectiongroups"
    },
    "microsoft.network/virtualnetworks/subnets/effectiveroutingrules": {
      "table": "resources",
      "type": "microsoft.network/virtualnetworks/subnets/effectiveroutingrules"
    },
    "microsoft.network/virtualnetworks/subnets/effectivesecurityuserrules": {
      "table": "resources",
      "type": "microsoft.network/virtualnetworks/subnets/effectivesecurityuserrules"
    },
    "microsoft.orbital/spacecrafts/contacts": {
      "table": "orbitalresources",
      "type": "microsoft.orbital/spacecrafts/contacts"
    },
    "microsoft.compute/virtualmachines/patchassessmentresults": {
      "name": "microsoft.compute/virtualmachines/patchassessmentresults",
      "table": "patchassessmentresources",
      "properties": []
    },
    "microsoft.compute/virtualmachines/patchassessmentresults/softwarepatches": {
      "name": "microsoft.compute/virtualmachines/patchassessmentresults/softwarepatches",
      "table": "patchassessmentresources",
      "properties": []
    },
    "microsoft.compute/virtualmachinescalesets/virtualmachines/patchassessmentresults": {
      "name": "microsoft.compute/virtualmachinescalesets/virtualmachines/patchassessmentresults",
      "table": "patchassessmentresources",
      "properties": []
    },
    "microsoft.compute/virtualmachinescalesets/virtualmachines/patchassessmentresults/softwarepatches": {
      "name": "microsoft.compute/virtualmachinescalesets/virtualmachines/patchassessmentresults/softwarepatches",
      "table": "patchassessmentresources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/virtualmachines/patchassessmentresults": {
      "table": "patchassessmentresources",
      "type": "microsoft.connectedvmwarevsphere/virtualmachines/patchassessmentresults"
    },
    "microsoft.connectedvmwarevsphere/virtualmachines/patchassessmentresults/softwarepatches": {
      "table": "patchassessmentresources",
      "type": "microsoft.connectedvmwarevsphere/virtualmachines/patchassessmentresults/softwarepatches"
    },
    "microsoft.hybridcompute/machines/patchassessmentresults": {
      "table": "patchassessmentresources",
      "type": "microsoft.hybridcompute/machines/patchassessmentresults"
    },
    "microsoft.hybridcompute/machines/patchassessmentresults/softwarepatches": {
      "table": "patchassessmentresources",
      "type": "microsoft.hybridcompute/machines/patchassessmentresults/softwarepatches"
    },
    "microsoft.compute/virtualmachines/patchinstallationresults": {
      "name": "microsoft.compute/virtualmachines/patchinstallationresults",
      "table": "patchinstallationresources",
      "properties": []
    },
    "microsoft.compute/virtualmachines/patchinstallationresults/softwarepatches": {
      "name": "microsoft.compute/virtualmachines/patchinstallationresults/softwarepatches",
      "table": "patchinstallationresources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/virtualmachines/patchinstallationresults": {
      "table": "patchinstallationresources",
      "type": "microsoft.connectedvmwarevsphere/virtualmachines/patchinstallationresults"
    },
    "microsoft.connectedvmwarevsphere/virtualmachines/patchinstallationresults/softwarepatches": {
      "table": "patchinstallationresources",
      "type": "microsoft.connectedvmwarevsphere/virtualmachines/patchinstallationresults/softwarepatches"
    },
    "microsoft.hybridcompute/machines/patchinstallationresults": {
      "table": "patchinstallationresources",
      "type": "microsoft.hybridcompute/machines/patchinstallationresults"
    },
    "microsoft.hybridcompute/machines/patchinstallationresults/softwarepatches": {
      "table": "patchinstallationresources",
      "type": "microsoft.hybridcompute/machines/patchinstallationresults/softwarepatches"
    },
    "microsoft.authorization/policyassignments": {
      "table": "policyresources",
      "type": "microsoft.authorization/policyassignments"
    },
    "microsoft.authorization/policydefinitions": {
      "table": "policyresources",
      "type": "microsoft.authorization/policydefinitions"
    },
    "microsoft.authorization/policydefinitions/versions": {
      "table": "policyresources",
      "type": "microsoft.authorization/policydefinitions/versions"
    },
    "microsoft.authorization/policyenrollments": {
      "table": "policyresources",
      "type": "microsoft.authorization/policyenrollments"
    },
    "microsoft.authorization/policyexemptions": {
      "table": "policyresources",
      "type": "microsoft.authorization/policyexemptions"
    },
    "microsoft.authorization/policysetdefinitions": {
      "table": "policyresources",
      "type": "microsoft.authorization/policysetdefinitions"
    },
    "microsoft.authorization/policysetdefinitions/versions": {
      "table": "policyresources",
      "type": "microsoft.authorization/policysetdefinitions/versions"
    },
    "microsoft.policyinsights/componentpolicystates": {
      "table": "policyresources",
      "type": "microsoft.policyinsights/componentpolicystates"
    },
    "microsoft.policyinsights/policymetadata": {
      "table": "policyresources",
      "type": "microsoft.policyinsights/policymetadata"
    },
    "microsoft.policyinsights/policystates": {
      "table": "policyresources",
      "type": "microsoft.policyinsights/policystates"
    },
    "microsoft.dataprotection/backupvaults/backupinstances": {
      "table": "resources",
      "type": "microsoft.dataprotection/backupvaults/backupinstances"
    },
    "microsoft.dataprotection/backupvaults/backupjobs": {
      "table": "resources",
      "type": "microsoft.dataprotection/backupvaults/backupjobs"
    },
    "microsoft.dataprotection/backupvaults/backuppolicies": {
      "table": "resources",
      "type": "microsoft.dataprotection/backupvaults/backuppolicies"
    },
    "microsoft.dataprotection/backupvaults/deletedbackupinstances": {
      "table": "resources",
      "type": "microsoft.dataprotection/backupvaults/deletedbackupinstances"
    },
    "microsoft.recoveryservices/locations/deletedvaults": {
      "table": "resources",
      "type": "microsoft.recoveryservices/locations/deletedvaults"
    },
    "microsoft.recoveryservices/locations/deletedvaults/backupfabrics/protectioncontainers/protecteditems": {
      "table": "resources",
      "type": "microsoft.recoveryservices/locations/deletedvaults/backupfabrics/protectioncontainers/protecteditems"
    },
    "microsoft.recoveryservices/vaults": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults"
    },
    "microsoft.recoveryservices/vaults/alerts": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/alerts"
    },
    "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protectableitems": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protectableitems"
    },
    "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems"
    },
    "microsoft.recoveryservices/vaults/backupjobs": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/backupjobs"
    },
    "microsoft.recoveryservices/vaults/backuppolicies": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/backuppolicies"
    },
    "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationmigrationitems": {
      "name": "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationmigrationitems",
      "table": "recoveryservicesresources",
      "properties": []
    },
    "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotectableitems": {
      "name": "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotectableitems",
      "table": "recoveryservicesresources",
      "properties": []
    },
    "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/replicationfabrics/replicationprotectioncontainers/replicationprotecteditems"
    },
    "microsoft.recoveryservices/vaults/replicationjobs": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/replicationjobs"
    },
    "microsoft.recoveryservices/vaults/replicationpolicies": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/replicationpolicies"
    },
    "microsoft.recoveryservices/vaults/replicationrecoveryplans": {
      "table": "resources",
      "type": "microsoft.recoveryservices/vaults/replicationrecoveryplans"
    },
    "microsoft.management/managementgroups": {
      "name": "microsoft.management/managementgroups",
      "table": "resourcecontainers",
      "properties": []
    },
    "microsoft.management/servicegroups": {
      "name": "microsoft.management/servicegroups",
      "table": "resourcecontainers",
      "properties": []
    },
    "microsoft.resources/subscriptions": {
      "name": "microsoft.resources/subscriptions",
      "table": "resourcecontainers",
      "properties": []
    },
    "microsoft.resources/subscriptions/resourcegroups": {
      "name": "microsoft.resources/subscriptions/resourcegroups",
      "table": "resourcecontainers",
      "properties": []
    },
    "admincenter": {
      "name": "admincenter",
      "table": "resources",
      "properties": []
    },
    "advancedthreatprotection.windows": {
      "name": "advancedthreatprotection.windows",
      "table": "resources",
      "properties": []
    },
    "agents": {
      "name": "agents",
      "table": "resources",
      "properties": []
    },
    "arizeai.observabilityeval/organizations": {
      "name": "arizeai.observabilityeval/organizations",
      "table": "resources",
      "properties": []
    },
    "assessmentplatform": {
      "name": "assessmentplatform",
      "table": "resources",
      "properties": []
    },
    "astronomer.astro/organizations": {
      "name": "astronomer.astro/organizations",
      "table": "resources",
      "properties": []
    },
    "azuremonitorlinuxagent": {
      "name": "azuremonitorlinuxagent",
      "table": "resources",
      "properties": []
    },
    "azuremonitorwindowsagent": {
      "name": "azuremonitorwindowsagent",
      "table": "resources",
      "properties": []
    },
    "azuresecuritylinuxagent": {
      "name": "azuresecuritylinuxagent",
      "table": "resources",
      "properties": []
    },
    "azuresecuritywindowsagent": {
      "name": "azuresecuritywindowsagent",
      "table": "resources",
      "properties": []
    },
    "changetracking-linux": {
      "name": "changetracking-linux",
      "table": "resources",
      "properties": []
    },
    "changetracking-windows": {
      "name": "changetracking-windows",
      "table": "resources",
      "properties": []
    },
    "citrix.services/xenappessentials": {
      "name": "citrix.services/xenappessentials",
      "table": "resources",
      "properties": []
    },
    "citrix.services/xendesktopessentials": {
      "name": "citrix.services/xendesktopessentials",
      "table": "resources",
      "properties": []
    },
    "commvault.contentstore/cloudaccounts": {
      "name": "commvault.contentstore/cloudaccounts",
      "table": "resources",
      "properties": []
    },
    "customscript": {
      "name": "customscript",
      "table": "resources",
      "properties": []
    },
    "customscriptextension": {
      "name": "customscriptextension",
      "table": "resources",
      "properties": []
    },
    "dell.storage/filesystems": {
      "name": "dell.storage/filesystems",
      "table": "resources",
      "properties": []
    },
    "dependencyagentlinux": {
      "name": "dependencyagentlinux",
      "table": "resources",
      "properties": []
    },
    "dependencyagentwindows": {
      "name": "dependencyagentwindows",
      "table": "resources",
      "properties": []
    },
    "dynatrace.observability/monitors": {
      "name": "dynatrace.observability/monitors",
      "table": "resources",
      "properties": []
    },
    "firstparty": {
      "name": "firstparty",
      "table": "resources",
      "properties": []
    },
    "github.enterprise/accounts": {
      "name": "github.enterprise/accounts",
      "table": "resources",
      "properties": []
    },
    "github.network/networksettings": {
      "name": "github.network/networksettings",
      "table": "resources",
      "properties": []
    },
    "hns": {
      "name": "hns",
      "table": "resources",
      "properties": []
    },
    "hybridworkerforlinux": {
      "name": "hybridworkerforlinux",
      "table": "resources",
      "properties": []
    },
    "hybridworkerforwindows": {
      "name": "hybridworkerforwindows",
      "table": "resources",
      "properties": []
    },
    "iaasantimalware": {
      "name": "iaasantimalware",
      "table": "resources",
      "properties": []
    },
    "informatica.datamanagement/organizations": {
      "name": "informatica.datamanagement/organizations",
      "table": "resources",
      "properties": []
    },
    "keyvaultforlinux": {
      "name": "keyvaultforlinux",
      "table": "resources",
      "properties": []
    },
    "keyvaultforwindows": {
      "name": "keyvaultforwindows",
      "table": "resources",
      "properties": []
    },
    "lambdatest.hyperexecute/organizations": {
      "name": "lambdatest.hyperexecute/organizations",
      "table": "resources",
      "properties": []
    },
    "liftrbasic.samplerp/organizations": {
      "name": "liftrbasic.samplerp/organizations",
      "table": "resources",
      "properties": []
    },
    "linuxagent.azuresecuritycenter": {
      "name": "linuxagent.azuresecuritycenter",
      "table": "resources",
      "properties": []
    },
    "linuxagent.sqlserver": {
      "name": "linuxagent.sqlserver",
      "table": "resources",
      "properties": []
    },
    "linuxosupdateextension": {
      "name": "linuxosupdateextension",
      "table": "resources",
      "properties": []
    },
    "linuxpatchextension": {
      "name": "linuxpatchextension",
      "table": "resources",
      "properties": []
    },
    "mde.linux": {
      "name": "mde.linux",
      "table": "resources",
      "properties": []
    },
    "mde.windows": {
      "name": "mde.windows",
      "table": "resources",
      "properties": []
    },
    "microsoft apps/connectedenvironments/certificates": {
      "name": "microsoft apps/connectedenvironments/certificates",
      "table": "resources",
      "properties": []
    },
    "microsoft.aad/domainservices": {
      "name": "microsoft.aad/domainservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.aadiam/azureadmetrics": {
      "name": "microsoft.aadiam/azureadmetrics",
      "table": "resources",
      "properties": []
    },
    "microsoft.aadiam/privatelinkforazuread": {
      "name": "microsoft.aadiam/privatelinkforazuread",
      "table": "resources",
      "properties": []
    },
    "microsoft.aadiam/tenants": {
      "name": "microsoft.aadiam/tenants",
      "table": "resources",
      "properties": []
    },
    "microsoft.agfoodplatform/farmbeats": {
      "name": "microsoft.agfoodplatform/farmbeats",
      "table": "resources",
      "properties": []
    },
    "microsoft.agricultureplatform/agriservices": {
      "name": "microsoft.agricultureplatform/agriservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.alertsmanagement/actionrules": {
      "name": "microsoft.alertsmanagement/actionrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.alertsmanagement/prometheusrulegroups": {
      "name": "microsoft.alertsmanagement/prometheusrulegroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.alertsmanagement/smartdetectoralertrules": {
      "name": "microsoft.alertsmanagement/smartdetectoralertrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.alicespringsdataplane/e4k": {
      "name": "microsoft.alicespringsdataplane/e4k",
      "table": "resources",
      "properties": []
    },
    "microsoft.alicespringsdataplane/e4k/broker": {
      "name": "microsoft.alicespringsdataplane/e4k/broker",
      "table": "resources",
      "properties": []
    },
    "microsoft.alicespringsdataplane/e4k/broker/authentication": {
      "name": "microsoft.alicespringsdataplane/e4k/broker/authentication",
      "table": "resources",
      "properties": []
    },
    "microsoft.alicespringsdataplane/e4k/broker/listener": {
      "name": "microsoft.alicespringsdataplane/e4k/broker/listener",
      "table": "resources",
      "properties": []
    },
    "microsoft.alicespringsdataplane/e4k/mqttbridgeconnector": {
      "name": "microsoft.alicespringsdataplane/e4k/mqttbridgeconnector",
      "table": "resources",
      "properties": []
    },
    "microsoft.alicespringsdataplane/e4k/mqttbridgeconnector/topicmap": {
      "name": "microsoft.alicespringsdataplane/e4k/mqttbridgeconnector/topicmap",
      "table": "resources",
      "properties": []
    },
    "microsoft.analysisservices/servers": {
      "name": "microsoft.analysisservices/servers",
      "table": "resources",
      "properties": []
    },
    "microsoft.anybuild/clusters": {
      "name": "microsoft.anybuild/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.apicenter/catalogs": {
      "name": "microsoft.apicenter/catalogs",
      "table": "resources",
      "properties": []
    },
    "microsoft.apicenter/services": {
      "name": "microsoft.apicenter/services",
      "table": "resources",
      "properties": []
    },
    "microsoft.apimanagement/gateways": {
      "name": "microsoft.apimanagement/gateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.apimanagement/service": {
      "name": "microsoft.apimanagement/service",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/agents": {
      "name": "microsoft.app/agents",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/appgroups": {
      "name": "microsoft.app/appgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/builders": {
      "name": "microsoft.app/builders",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/connectedenvironments": {
      "name": "microsoft.app/connectedenvironments",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/connectedenvironments/certificates": {
      "name": "microsoft.app/connectedenvironments/certificates",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/containerapps": {
      "name": "microsoft.app/containerapps",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/jobs": {
      "name": "microsoft.app/jobs",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/managedenvironments": {
      "name": "microsoft.app/managedenvironments",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/managedenvironments/certificates": {
      "name": "microsoft.app/managedenvironments/certificates",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/managedenvironments/managedcertificates": {
      "name": "microsoft.app/managedenvironments/managedcertificates",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/sessionpools": {
      "name": "microsoft.app/sessionpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.app/spaces": {
      "name": "microsoft.app/spaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.appassessment/migrateprojects": {
      "name": "microsoft.appassessment/migrateprojects",
      "table": "resources",
      "properties": []
    },
    "microsoft.appconfiguration/configurationstores": {
      "name": "microsoft.appconfiguration/configurationstores",
      "table": "resources",
      "properties": []
    },
    "microsoft.applicationmigration/discoveryhubs": {
      "name": "microsoft.applicationmigration/discoveryhubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.applicationmigration/pgsqlsites": {
      "name": "microsoft.applicationmigration/pgsqlsites",
      "table": "resources",
      "properties": []
    },
    "microsoft.applicationmigration/storagesites": {
      "name": "microsoft.applicationmigration/storagesites",
      "table": "resources",
      "properties": []
    },
    "microsoft.applink/applinks": {
      "name": "microsoft.applink/applinks",
      "table": "resources",
      "properties": []
    },
    "microsoft.applink/applinks/applinkmembers": {
      "name": "microsoft.applink/applinks/applinkmembers",
      "table": "resources",
      "properties": []
    },
    "microsoft.appplatform/spring": {
      "name": "microsoft.appplatform/spring",
      "table": "resources",
      "properties": []
    },
    "microsoft.appsecurity/policies": {
      "name": "microsoft.appsecurity/policies",
      "table": "resources",
      "properties": []
    },
    "microsoft.arcnetworking/arcnwloadbalancers": {
      "name": "microsoft.arcnetworking/arcnwloadbalancers",
      "table": "resources",
      "properties": []
    },
    "microsoft.aszlabhardware/labservers": {
      "name": "microsoft.aszlabhardware/labservers",
      "table": "resources",
      "properties": []
    },
    "microsoft.aszlabhardware/reservations": {
      "name": "microsoft.aszlabhardware/reservations",
      "table": "resources",
      "properties": []
    },
    "microsoft.aszlabhardware/servers": {
      "name": "microsoft.aszlabhardware/servers",
      "table": "resources",
      "properties": []
    },
    "microsoft.attestation/attestationproviders": {
      "name": "microsoft.attestation/attestationproviders",
      "table": "resources",
      "properties": []
    },
    "microsoft.authorization/elevateaccessroleassignment": {
      "name": "microsoft.authorization/elevateaccessroleassignment",
      "table": "resources",
      "properties": []
    },
    "microsoft.authorization/resourcemanagementprivatelinks": {
      "name": "microsoft.authorization/resourcemanagementprivatelinks",
      "table": "resources",
      "properties": []
    },
    "microsoft.automanage/accounts": {
      "name": "microsoft.automanage/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.automanage/configurationprofilepreferences": {
      "name": "microsoft.automanage/configurationprofilepreferences",
      "table": "resources",
      "properties": []
    },
    "microsoft.automanage/configurationprofiles": {
      "name": "microsoft.automanage/configurationprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.automanage/configurationprofiles/versions": {
      "name": "microsoft.automanage/configurationprofiles/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.automanage/patchjobconfigurations": {
      "name": "microsoft.automanage/patchjobconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.automanage/patchtiers": {
      "name": "microsoft.automanage/patchtiers",
      "table": "resources",
      "properties": []
    },
    "microsoft.automation/automationaccounts": {
      "name": "microsoft.automation/automationaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.automation/automationaccounts/configurations": {
      "name": "microsoft.automation/automationaccounts/configurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.automation/automationaccounts/runbooks": {
      "name": "microsoft.automation/automationaccounts/runbooks",
      "table": "resources",
      "properties": []
    },
    "microsoft.autonomousdevelopmentplatform/accounts": {
      "name": "microsoft.autonomousdevelopmentplatform/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.autonomousdevelopmentplatform/workspaces": {
      "name": "microsoft.autonomousdevelopmentplatform/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.autonomoussystems/workspaces": {
      "name": "microsoft.autonomoussystems/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.avs/privateclouds": {
      "name": "microsoft.avs/privateclouds",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/accessanalyzeranalyzers": {
      "name": "microsoft.awsconnector/accessanalyzeranalyzers",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/acmcertificatesummaries": {
      "name": "microsoft.awsconnector/acmcertificatesummaries",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/apigatewayrestapis": {
      "name": "microsoft.awsconnector/apigatewayrestapis",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/apigatewaystages": {
      "name": "microsoft.awsconnector/apigatewaystages",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/appsyncgraphqlapis": {
      "name": "microsoft.awsconnector/appsyncgraphqlapis",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/autoscalingautoscalinggroups": {
      "name": "microsoft.awsconnector/autoscalingautoscalinggroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/cloudformationstacks": {
      "name": "microsoft.awsconnector/cloudformationstacks",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/cloudformationstacksets": {
      "name": "microsoft.awsconnector/cloudformationstacksets",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/cloudfrontdistributions": {
      "name": "microsoft.awsconnector/cloudfrontdistributions",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/cloudtrailtrails": {
      "name": "microsoft.awsconnector/cloudtrailtrails",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/cloudwatchalarms": {
      "name": "microsoft.awsconnector/cloudwatchalarms",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/codebuildprojects": {
      "name": "microsoft.awsconnector/codebuildprojects",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/codebuildsourcecredentialsinfos": {
      "name": "microsoft.awsconnector/codebuildsourcecredentialsinfos",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/configserviceconfigurationrecorders": {
      "name": "microsoft.awsconnector/configserviceconfigurationrecorders",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/configserviceconfigurationrecorderstatuses": {
      "name": "microsoft.awsconnector/configserviceconfigurationrecorderstatuses",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/configservicedeliverychannels": {
      "name": "microsoft.awsconnector/configservicedeliverychannels",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/databasemigrationservicereplicationinstances": {
      "name": "microsoft.awsconnector/databasemigrationservicereplicationinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/daxclusters": {
      "name": "microsoft.awsconnector/daxclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/dynamodbcontinuousbackupsdescriptions": {
      "name": "microsoft.awsconnector/dynamodbcontinuousbackupsdescriptions",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/dynamodbtables": {
      "name": "microsoft.awsconnector/dynamodbtables",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2accountattributes": {
      "name": "microsoft.awsconnector/ec2accountattributes",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2addresses": {
      "name": "microsoft.awsconnector/ec2addresses",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2flowlogs": {
      "name": "microsoft.awsconnector/ec2flowlogs",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2images": {
      "name": "microsoft.awsconnector/ec2images",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2instancestatuses": {
      "name": "microsoft.awsconnector/ec2instancestatuses",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2ipams": {
      "name": "microsoft.awsconnector/ec2ipams",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2keypairs": {
      "name": "microsoft.awsconnector/ec2keypairs",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2networkacls": {
      "name": "microsoft.awsconnector/ec2networkacls",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2networkinterfaces": {
      "name": "microsoft.awsconnector/ec2networkinterfaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2routetables": {
      "name": "microsoft.awsconnector/ec2routetables",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2securitygroups": {
      "name": "microsoft.awsconnector/ec2securitygroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2snapshots": {
      "name": "microsoft.awsconnector/ec2snapshots",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2subnets": {
      "name": "microsoft.awsconnector/ec2subnets",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2volumes": {
      "name": "microsoft.awsconnector/ec2volumes",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2vpcendpoints": {
      "name": "microsoft.awsconnector/ec2vpcendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2vpcpeeringconnections": {
      "name": "microsoft.awsconnector/ec2vpcpeeringconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ec2vpcs": {
      "name": "microsoft.awsconnector/ec2vpcs",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ecrimagedetails": {
      "name": "microsoft.awsconnector/ecrimagedetails",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ecrrepositories": {
      "name": "microsoft.awsconnector/ecrrepositories",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ecsclusters": {
      "name": "microsoft.awsconnector/ecsclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ecsservices": {
      "name": "microsoft.awsconnector/ecsservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ecstaskdefinitions": {
      "name": "microsoft.awsconnector/ecstaskdefinitions",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/efsfilesystems": {
      "name": "microsoft.awsconnector/efsfilesystems",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/efsmounttargets": {
      "name": "microsoft.awsconnector/efsmounttargets",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/eksnodegroups": {
      "name": "microsoft.awsconnector/eksnodegroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/elasticbeanstalkapplications": {
      "name": "microsoft.awsconnector/elasticbeanstalkapplications",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/elasticbeanstalkconfigurationtemplates": {
      "name": "microsoft.awsconnector/elasticbeanstalkconfigurationtemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/elasticbeanstalkenvironments": {
      "name": "microsoft.awsconnector/elasticbeanstalkenvironments",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/elasticloadbalancingv2listeners": {
      "name": "microsoft.awsconnector/elasticloadbalancingv2listeners",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/elasticloadbalancingv2loadbalancers": {
      "name": "microsoft.awsconnector/elasticloadbalancingv2loadbalancers",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/elasticloadbalancingv2targetgroups": {
      "name": "microsoft.awsconnector/elasticloadbalancingv2targetgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/elasticloadbalancingv2targethealthdescriptions": {
      "name": "microsoft.awsconnector/elasticloadbalancingv2targethealthdescriptions",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/emrclusters": {
      "name": "microsoft.awsconnector/emrclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/guarddutydetectors": {
      "name": "microsoft.awsconnector/guarddutydetectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iamaccesskeylastuseds": {
      "name": "microsoft.awsconnector/iamaccesskeylastuseds",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iamaccesskeymetadata": {
      "name": "microsoft.awsconnector/iamaccesskeymetadata",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iamgroups": {
      "name": "microsoft.awsconnector/iamgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iaminstanceprofiles": {
      "name": "microsoft.awsconnector/iaminstanceprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iammfadevices": {
      "name": "microsoft.awsconnector/iammfadevices",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iampasswordpolicies": {
      "name": "microsoft.awsconnector/iampasswordpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iampolicyversions": {
      "name": "microsoft.awsconnector/iampolicyversions",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iamroles": {
      "name": "microsoft.awsconnector/iamroles",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iamservercertificates": {
      "name": "microsoft.awsconnector/iamservercertificates",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/iamvirtualmfadevices": {
      "name": "microsoft.awsconnector/iamvirtualmfadevices",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/kmsaliases": {
      "name": "microsoft.awsconnector/kmsaliases",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/kmskeys": {
      "name": "microsoft.awsconnector/kmskeys",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/lambdafunctioncodelocations": {
      "name": "microsoft.awsconnector/lambdafunctioncodelocations",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/lambdafunctionconfigurations": {
      "name": "microsoft.awsconnector/lambdafunctionconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/lambdafunctions": {
      "name": "microsoft.awsconnector/lambdafunctions",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/lightsailbuckets": {
      "name": "microsoft.awsconnector/lightsailbuckets",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/lightsailinstances": {
      "name": "microsoft.awsconnector/lightsailinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/logsloggroups": {
      "name": "microsoft.awsconnector/logsloggroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/logslogstreams": {
      "name": "microsoft.awsconnector/logslogstreams",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/logsmetricfilters": {
      "name": "microsoft.awsconnector/logsmetricfilters",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/logssubscriptionfilters": {
      "name": "microsoft.awsconnector/logssubscriptionfilters",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/macie2jobsummaries": {
      "name": "microsoft.awsconnector/macie2jobsummaries",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/macieallowlists": {
      "name": "microsoft.awsconnector/macieallowlists",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/networkfirewallfirewallpolicies": {
      "name": "microsoft.awsconnector/networkfirewallfirewallpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/networkfirewallfirewalls": {
      "name": "microsoft.awsconnector/networkfirewallfirewalls",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/networkfirewallrulegroups": {
      "name": "microsoft.awsconnector/networkfirewallrulegroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/opensearchdomainstatuses": {
      "name": "microsoft.awsconnector/opensearchdomainstatuses",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/organizationsaccounts": {
      "name": "microsoft.awsconnector/organizationsaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/organizationsorganizations": {
      "name": "microsoft.awsconnector/organizationsorganizations",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/rdsdbclusters": {
      "name": "microsoft.awsconnector/rdsdbclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/rdsdbinstances": {
      "name": "microsoft.awsconnector/rdsdbinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/rdsdbsnapshotattributesresults": {
      "name": "microsoft.awsconnector/rdsdbsnapshotattributesresults",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/rdsdbsnapshots": {
      "name": "microsoft.awsconnector/rdsdbsnapshots",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/rdseventsubscriptions": {
      "name": "microsoft.awsconnector/rdseventsubscriptions",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/rdsexporttasks": {
      "name": "microsoft.awsconnector/rdsexporttasks",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/redshiftclusterparametergroups": {
      "name": "microsoft.awsconnector/redshiftclusterparametergroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/redshiftclusters": {
      "name": "microsoft.awsconnector/redshiftclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/route53domainsdomainsummaries": {
      "name": "microsoft.awsconnector/route53domainsdomainsummaries",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/route53hostedzones": {
      "name": "microsoft.awsconnector/route53hostedzones",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/route53resourcerecordsets": {
      "name": "microsoft.awsconnector/route53resourcerecordsets",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/s3accesscontrolpolicies": {
      "name": "microsoft.awsconnector/s3accesscontrolpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/s3accesspoints": {
      "name": "microsoft.awsconnector/s3accesspoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/s3bucketpolicies": {
      "name": "microsoft.awsconnector/s3bucketpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/s3buckets": {
      "name": "microsoft.awsconnector/s3buckets",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/sagemakerapps": {
      "name": "microsoft.awsconnector/sagemakerapps",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/sagemakernotebookinstancesummaries": {
      "name": "microsoft.awsconnector/sagemakernotebookinstancesummaries",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/secretsmanagerresourcepolicies": {
      "name": "microsoft.awsconnector/secretsmanagerresourcepolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/secretsmanagersecrets": {
      "name": "microsoft.awsconnector/secretsmanagersecrets",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/snssubscriptions": {
      "name": "microsoft.awsconnector/snssubscriptions",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/snstopics": {
      "name": "microsoft.awsconnector/snstopics",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/sqsqueues": {
      "name": "microsoft.awsconnector/sqsqueues",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ssminstanceinformations": {
      "name": "microsoft.awsconnector/ssminstanceinformations",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ssmparameters": {
      "name": "microsoft.awsconnector/ssmparameters",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/ssmresourcecompliancesummaryitems": {
      "name": "microsoft.awsconnector/ssmresourcecompliancesummaryitems",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/wafv2loggingconfigurations": {
      "name": "microsoft.awsconnector/wafv2loggingconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.awsconnector/wafwebaclsummaries": {
      "name": "microsoft.awsconnector/wafwebaclsummaries",
      "table": "resources",
      "properties": []
    },
    "microsoft.azureactivedirectory/b2cdirectories": {
      "name": "microsoft.azureactivedirectory/b2cdirectories",
      "table": "resources",
      "properties": []
    },
    "microsoft.azureactivedirectory/ciamdirectories": {
      "name": "microsoft.azureactivedirectory/ciamdirectories",
      "table": "resources",
      "properties": []
    },
    "microsoft.azureactivedirectory/guestusages": {
      "name": "microsoft.azureactivedirectory/guestusages",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurearcdata/datacontrollers": {
      "name": "microsoft.azurearcdata/datacontrollers",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurearcdata/postgresinstances": {
      "name": "microsoft.azurearcdata/postgresinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurearcdata/sqlmanagedinstances": {
      "name": "microsoft.azurearcdata/sqlmanagedinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurearcdata/sqlserveresulicenses": {
      "name": "microsoft.azurearcdata/sqlserveresulicenses",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurearcdata/sqlserverinstances": {
      "name": "microsoft.azurearcdata/sqlserverinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurearcdata/sqlserverinstances/availabilitygroups": {
      "name": "microsoft.azurearcdata/sqlserverinstances/availabilitygroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurearcdata/sqlserverinstances/databases": {
      "name": "microsoft.azurearcdata/sqlserverinstances/databases",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurearcdata/sqlserverlicenses": {
      "name": "microsoft.azurearcdata/sqlserverlicenses",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurecis/dstsserviceclientidentities": {
      "name": "microsoft.azurecis/dstsserviceclientidentities",
      "table": "resources",
      "properties": []
    },
    "microsoft.azuredata/sqlbigdataclusters": {
      "name": "microsoft.azuredata/sqlbigdataclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.azuredata/sqlserverregistrations": {
      "name": "microsoft.azuredata/sqlserverregistrations",
      "table": "resources",
      "properties": []
    },
    "microsoft.azuredatatransfer/connections": {
      "name": "microsoft.azuredatatransfer/connections",
      "table": "resources",
      "properties": []
    },
    "microsoft.azuredatatransfer/connections/flows": {
      "name": "microsoft.azuredatatransfer/connections/flows",
      "table": "resources",
      "properties": []
    },
    "microsoft.azuredatatransfer/pipelines": {
      "name": "microsoft.azuredatatransfer/pipelines",
      "table": "resources",
      "properties": []
    },
    "microsoft.azuredatatransfer/pipelines/flowprofiles": {
      "name": "microsoft.azuredatatransfer/pipelines/flowprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurefleet/fleets": {
      "name": "microsoft.azurefleet/fleets",
      "table": "resources",
      "properties": []
    },
    "microsoft.azureimagetestingforlinux/jobs": {
      "name": "microsoft.azureimagetestingforlinux/jobs",
      "table": "resources",
      "properties": []
    },
    "microsoft.azureimagetestingforlinux/jobtemplates": {
      "name": "microsoft.azureimagetestingforlinux/jobtemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurelargeinstance/azurelargeinstances": {
      "name": "microsoft.azurelargeinstance/azurelargeinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurelargeinstance/azurelargestorageinstances": {
      "name": "microsoft.azurelargeinstance/azurelargestorageinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurepercept/accounts": {
      "name": "microsoft.azurepercept/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.azureplaywrightservice/accounts": {
      "name": "microsoft.azureplaywrightservice/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurescan/scanningaccounts": {
      "name": "microsoft.azurescan/scanningaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.azuresphere/catalogs": {
      "name": "microsoft.azuresphere/catalogs",
      "table": "resources",
      "properties": []
    },
    "microsoft.azuresphere/catalogs/products": {
      "name": "microsoft.azuresphere/catalogs/products",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestack/linkedsubscriptions": {
      "name": "microsoft.azurestack/linkedsubscriptions",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestack/registrations": {
      "name": "microsoft.azurestack/registrations",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/clusters": {
      "name": "microsoft.azurestackhci/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/devicepools": {
      "name": "microsoft.azurestackhci/devicepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/edgemachines": {
      "name": "microsoft.azurestackhci/edgemachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/edgenodepools": {
      "name": "microsoft.azurestackhci/edgenodepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/galleryimages": {
      "name": "microsoft.azurestackhci/galleryimages",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/logicalnetworks": {
      "name": "microsoft.azurestackhci/logicalnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/marketplacegalleryimages": {
      "name": "microsoft.azurestackhci/marketplacegalleryimages",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/networkinterfaces": {
      "name": "microsoft.azurestackhci/networkinterfaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/networksecuritygroups": {
      "name": "microsoft.azurestackhci/networksecuritygroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/storagecontainers": {
      "name": "microsoft.azurestackhci/storagecontainers",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/virtualharddisks": {
      "name": "microsoft.azurestackhci/virtualharddisks",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/virtualmachines": {
      "name": "microsoft.azurestackhci/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/virtualmachines/extensions": {
      "name": "microsoft.azurestackhci/virtualmachines/extensions",
      "table": "resources",
      "properties": []
    },
    "microsoft.azurestackhci/virtualnetworks": {
      "name": "microsoft.azurestackhci/virtualnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.backupsolutions/vmwareapplications": {
      "name": "microsoft.backupsolutions/vmwareapplications",
      "table": "resources",
      "properties": []
    },
    "microsoft.bakeryhybrid/pies": {
      "name": "microsoft.bakeryhybrid/pies",
      "table": "resources",
      "properties": []
    },
    "microsoft.baremetal/baremetalconnections": {
      "name": "microsoft.baremetal/baremetalconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.baremetal/consoleconnections": {
      "name": "microsoft.baremetal/consoleconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.baremetal/crayservers": {
      "name": "microsoft.baremetal/crayservers",
      "table": "resources",
      "properties": []
    },
    "microsoft.baremetal/monitoringservers": {
      "name": "microsoft.baremetal/monitoringservers",
      "table": "resources",
      "properties": []
    },
    "microsoft.baremetal/peeringsettings": {
      "name": "microsoft.baremetal/peeringsettings",
      "table": "resources",
      "properties": []
    },
    "microsoft.baremetalinfrastructure/baremetalinstances": {
      "name": "microsoft.baremetalinfrastructure/baremetalinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.baremetalinfrastructure/baremetalstorageinstances": {
      "name": "microsoft.baremetalinfrastructure/baremetalstorageinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.batch/batchaccounts": {
      "name": "microsoft.batch/batchaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.billingbenefits/credits": {
      "name": "microsoft.billingbenefits/credits",
      "table": "resources",
      "properties": []
    },
    "microsoft.billingbenefits/discounts": {
      "name": "microsoft.billingbenefits/discounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.billingbenefits/incentiveschedules": {
      "name": "microsoft.billingbenefits/incentiveschedules",
      "table": "resources",
      "properties": []
    },
    "microsoft.billingbenefits/maccs": {
      "name": "microsoft.billingbenefits/maccs",
      "table": "resources",
      "properties": []
    },
    "microsoft.bing/accounts": {
      "name": "microsoft.bing/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.biztalkservices/biztalk": {
      "name": "microsoft.biztalkservices/biztalk",
      "table": "resources",
      "properties": []
    },
    "microsoft.bluefin/instances": {
      "name": "microsoft.bluefin/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.bluefin/instances/datasets": {
      "name": "microsoft.bluefin/instances/datasets",
      "table": "resources",
      "properties": []
    },
    "microsoft.bluefin/instances/pipelines": {
      "name": "microsoft.bluefin/instances/pipelines",
      "table": "resources",
      "properties": []
    },
    "microsoft.botservice/botservices": {
      "name": "microsoft.botservice/botservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.cache/redis": {
      "name": "microsoft.cache/redis",
      "table": "resources",
      "properties": []
    },
    "microsoft.cache/redisenterprise": {
      "name": "microsoft.cache/redisenterprise",
      "table": "resources",
      "properties": []
    },
    "microsoft.cdn/cdnwebapplicationfirewallpolicies": {
      "name": "microsoft.cdn/cdnwebapplicationfirewallpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.cdn/edgeactions": {
      "name": "microsoft.cdn/edgeactions",
      "table": "resources",
      "properties": []
    },
    "microsoft.cdn/edgeactions/attachments": {
      "name": "microsoft.cdn/edgeactions/attachments",
      "table": "resources",
      "properties": []
    },
    "microsoft.cdn/edgeactions/executionfilters": {
      "name": "microsoft.cdn/edgeactions/executionfilters",
      "table": "resources",
      "properties": []
    },
    "microsoft.cdn/edgeactions/versions": {
      "name": "microsoft.cdn/edgeactions/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.cdn/profiles": {
      "name": "microsoft.cdn/profiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.cdn/profiles/afdendpoints": {
      "name": "microsoft.cdn/profiles/afdendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.cdn/profiles/endpoints": {
      "name": "microsoft.cdn/profiles/endpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.certificateregistration/certificateorders": {
      "name": "microsoft.certificateregistration/certificateorders",
      "table": "resources",
      "properties": []
    },
    "microsoft.chaos/applications": {
      "name": "microsoft.chaos/applications",
      "table": "resources",
      "properties": []
    },
    "microsoft.chaos/experiments": {
      "name": "microsoft.chaos/experiments",
      "table": "resources",
      "properties": []
    },
    "microsoft.chaos/privateaccesses": {
      "name": "microsoft.chaos/privateaccesses",
      "table": "resources",
      "properties": []
    },
    "microsoft.chaos/resilienceprofiles": {
      "name": "microsoft.chaos/resilienceprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.classiccompute/domainnames": {
      "name": "microsoft.classiccompute/domainnames",
      "table": "resources",
      "properties": []
    },
    "microsoft.classiccompute/virtualmachines": {
      "name": "microsoft.classiccompute/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.classicnetwork/networksecuritygroups": {
      "name": "microsoft.classicnetwork/networksecuritygroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.classicnetwork/reservedips": {
      "name": "microsoft.classicnetwork/reservedips",
      "table": "resources",
      "properties": []
    },
    "microsoft.classicnetwork/virtualnetworks": {
      "name": "microsoft.classicnetwork/virtualnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.classicstorage/storageaccounts": {
      "name": "microsoft.classicstorage/storageaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.cleanroom/cleanrooms": {
      "name": "microsoft.cleanroom/cleanrooms",
      "table": "resources",
      "properties": []
    },
    "microsoft.cleanroom/collaborations": {
      "name": "microsoft.cleanroom/collaborations",
      "table": "resources",
      "properties": []
    },
    "microsoft.cleanroom/consortiums": {
      "name": "microsoft.cleanroom/consortiums",
      "table": "resources",
      "properties": []
    },
    "microsoft.cleanroom/microservices": {
      "name": "microsoft.cleanroom/microservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.clouddeviceplatform/delegatedidentities": {
      "name": "microsoft.clouddeviceplatform/delegatedidentities",
      "table": "resources",
      "properties": []
    },
    "microsoft.cloudes/accounts": {
      "name": "microsoft.cloudes/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.cloudhealth/healthmodels": {
      "name": "microsoft.cloudhealth/healthmodels",
      "table": "resources",
      "properties": []
    },
    "microsoft.cloudtest/accounts": {
      "name": "microsoft.cloudtest/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.cloudtest/buildcaches": {
      "name": "microsoft.cloudtest/buildcaches",
      "table": "resources",
      "properties": []
    },
    "microsoft.cloudtest/hostedpools": {
      "name": "microsoft.cloudtest/hostedpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.cloudtest/images": {
      "name": "microsoft.cloudtest/images",
      "table": "resources",
      "properties": []
    },
    "microsoft.cloudtest/pools": {
      "name": "microsoft.cloudtest/pools",
      "table": "resources",
      "properties": []
    },
    "microsoft.clusterstor/nodes": {
      "name": "microsoft.clusterstor/nodes",
      "table": "resources",
      "properties": []
    },
    "microsoft.codesigning/codesigningaccounts": {
      "name": "microsoft.codesigning/codesigningaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.codespaces/plans": {
      "name": "microsoft.codespaces/plans",
      "table": "resources",
      "properties": []
    },
    "microsoft.cognition/syntheticsaccounts": {
      "name": "microsoft.cognition/syntheticsaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.cognitivesearch/indexes": {
      "name": "microsoft.cognitivesearch/indexes",
      "table": "resources",
      "properties": []
    },
    "microsoft.cognitiveservices/accounts": {
      "name": "microsoft.cognitiveservices/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.cognitiveservices/accounts/projects": {
      "name": "microsoft.cognitiveservices/accounts/projects",
      "table": "resources",
      "properties": []
    },
    "microsoft.cognitiveservices/commitmentplans": {
      "name": "microsoft.cognitiveservices/commitmentplans",
      "table": "resources",
      "properties": []
    },
    "microsoft.community/communitytrainings": {
      "name": "microsoft.community/communitytrainings",
      "table": "resources",
      "properties": []
    },
    "microsoft.compositesolutions/compositesolutiondefinitions": {
      "name": "microsoft.compositesolutions/compositesolutiondefinitions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compositesolutions/compositesolutions": {
      "name": "microsoft.compositesolutions/compositesolutions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/availabilitysets": {
      "name": "microsoft.compute/availabilitysets",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/capacityreservationgroups": {
      "name": "microsoft.compute/capacityreservationgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/capacityreservationgroups/capacityreservations": {
      "name": "microsoft.compute/capacityreservationgroups/capacityreservations",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/cloudservices": {
      "name": "microsoft.compute/cloudservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/cloudservices/roleinstances/networkinterfaces": {
      "name": "microsoft.compute/cloudservices/roleinstances/networkinterfaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/cloudservices/roleinstances/networkinterfaces/ipconfigurations/publicipaddresses": {
      "name": "microsoft.compute/cloudservices/roleinstances/networkinterfaces/ipconfigurations/publicipaddresses",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/diskaccesses": {
      "name": "microsoft.compute/diskaccesses",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/diskencryptionsets": {
      "name": "microsoft.compute/diskencryptionsets",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/disks": {
      "name": "microsoft.compute/disks",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries": {
      "name": "microsoft.compute/galleries",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/applications": {
      "name": "microsoft.compute/galleries/applications",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/applications/versions": {
      "name": "microsoft.compute/galleries/applications/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/images": {
      "name": "microsoft.compute/galleries/images",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/images/versions": {
      "name": "microsoft.compute/galleries/images/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/invmaccesscontrolprofiles": {
      "name": "microsoft.compute/galleries/invmaccesscontrolprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/invmaccesscontrolprofiles/versions": {
      "name": "microsoft.compute/galleries/invmaccesscontrolprofiles/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/remotecontainerimages": {
      "name": "microsoft.compute/galleries/remotecontainerimages",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/scripts": {
      "name": "microsoft.compute/galleries/scripts",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/scripts/versions": {
      "name": "microsoft.compute/galleries/scripts/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/galleries/serviceartifacts": {
      "name": "microsoft.compute/galleries/serviceartifacts",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/hostgroups": {
      "name": "microsoft.compute/hostgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/hostgroups/hosts": {
      "name": "microsoft.compute/hostgroups/hosts",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/images": {
      "name": "microsoft.compute/images",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/proximityplacementgroups": {
      "name": "microsoft.compute/proximityplacementgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/restorepointcollections": {
      "name": "microsoft.compute/restorepointcollections",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/sharedvmextensions": {
      "name": "microsoft.compute/sharedvmextensions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/sharedvmextensions/versions": {
      "name": "microsoft.compute/sharedvmextensions/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/sharedvmimages": {
      "name": "microsoft.compute/sharedvmimages",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/sharedvmimages/versions": {
      "name": "microsoft.compute/sharedvmimages/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/snapshots": {
      "name": "microsoft.compute/snapshots",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/sshpublickeys": {
      "name": "microsoft.compute/sshpublickeys",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/swiftlets": {
      "name": "microsoft.compute/swiftlets",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/virtualmachines": {
      "name": "microsoft.compute/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/virtualmachines/extensions": {
      "name": "microsoft.compute/virtualmachines/extensions",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/virtualmachines/runcommands": {
      "name": "microsoft.compute/virtualmachines/runcommands",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/virtualmachines/vmapplications": {
      "name": "microsoft.compute/virtualmachines/vmapplications",
      "table": "resources",
      "properties": []
    },
    "microsoft.compute/virtualmachinescalesets": {
      "name": "microsoft.compute/virtualmachinescalesets",
      "table": "resources",
      "properties": []
    },
    "microsoft.computeschedule/autoactions": {
      "name": "microsoft.computeschedule/autoactions",
      "table": "resources",
      "properties": []
    },
    "microsoft.computeschedule/scheduledactions": {
      "name": "microsoft.computeschedule/scheduledactions",
      "table": "resources",
      "properties": []
    },
    "microsoft.confidentialledger/ledgers": {
      "name": "microsoft.confidentialledger/ledgers",
      "table": "resources",
      "properties": []
    },
    "microsoft.confidentialledger/managedccfs": {
      "name": "microsoft.confidentialledger/managedccfs",
      "table": "resources",
      "properties": []
    },
    "microsoft.confluent/organizations": {
      "name": "microsoft.confluent/organizations",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedcache/cachenodes": {
      "name": "microsoft.connectedcache/cachenodes",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedcache/enterprisecustomers": {
      "name": "microsoft.connectedcache/enterprisecustomers",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedcache/enterprisemcccustomers": {
      "name": "microsoft.connectedcache/enterprisemcccustomers",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedcache/enterprisemcccustomers/enterprisemcccachenodes": {
      "name": "microsoft.connectedcache/enterprisemcccustomers/enterprisemcccachenodes",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedcache/ispcustomers": {
      "name": "microsoft.connectedcache/ispcustomers",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedcache/ispcustomers/ispcachenodes": {
      "name": "microsoft.connectedcache/ispcustomers/ispcachenodes",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedcredentials/credentials": {
      "name": "microsoft.connectedcredentials/credentials",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedopenstack/heatstacks": {
      "name": "microsoft.connectedopenstack/heatstacks",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedopenstack/openstackidentities": {
      "name": "microsoft.connectedopenstack/openstackidentities",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvehicle/platformaccounts": {
      "name": "microsoft.connectedvehicle/platformaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/clusters": {
      "name": "microsoft.connectedvmwarevsphere/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/datastores": {
      "name": "microsoft.connectedvmwarevsphere/datastores",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/hosts": {
      "name": "microsoft.connectedvmwarevsphere/hosts",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/resourcepools": {
      "name": "microsoft.connectedvmwarevsphere/resourcepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/vcenters": {
      "name": "microsoft.connectedvmwarevsphere/vcenters",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/virtualmachines": {
      "name": "microsoft.connectedvmwarevsphere/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/virtualmachines/extensions": {
      "name": "microsoft.connectedvmwarevsphere/virtualmachines/extensions",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/virtualmachinetemplates": {
      "name": "microsoft.connectedvmwarevsphere/virtualmachinetemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.connectedvmwarevsphere/virtualnetworks": {
      "name": "microsoft.connectedvmwarevsphere/virtualnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerinstance/containergroupprofiles": {
      "name": "microsoft.containerinstance/containergroupprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerinstance/containergroups": {
      "name": "microsoft.containerinstance/containergroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerinstance/containerscalesets": {
      "name": "microsoft.containerinstance/containerscalesets",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerinstance/ngroups": {
      "name": "microsoft.containerinstance/ngroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerregistry/registries": {
      "name": "microsoft.containerregistry/registries",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerregistry/registries/agentpools": {
      "name": "microsoft.containerregistry/registries/agentpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerregistry/registries/buildtasks": {
      "name": "microsoft.containerregistry/registries/buildtasks",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerregistry/registries/replications": {
      "name": "microsoft.containerregistry/registries/replications",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerregistry/registries/taskruns": {
      "name": "microsoft.containerregistry/registries/taskruns",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerregistry/registries/tasks": {
      "name": "microsoft.containerregistry/registries/tasks",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerregistry/registries/webhooks": {
      "name": "microsoft.containerregistry/registries/webhooks",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerservice/containerservices": {
      "name": "microsoft.containerservice/containerservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerservice/fleets": {
      "name": "microsoft.containerservice/fleets",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerservice/fleets/managednamespaces": {
      "name": "microsoft.containerservice/fleets/managednamespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerservice/managedclusters": {
      "name": "microsoft.containerservice/managedclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerservice/managedclusters/managednamespaces": {
      "name": "microsoft.containerservice/managedclusters/managednamespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerservice/managedclustersnapshots": {
      "name": "microsoft.containerservice/managedclustersnapshots",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerservice/snapshots": {
      "name": "microsoft.containerservice/snapshots",
      "table": "resources",
      "properties": []
    },
    "microsoft.containerstorage/pools": {
      "name": "microsoft.containerstorage/pools",
      "table": "resources",
      "properties": []
    },
    "microsoft.contoso/clusters": {
      "name": "microsoft.contoso/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.contoso/employees": {
      "name": "microsoft.contoso/employees",
      "table": "resources",
      "properties": []
    },
    "microsoft.contoso/employees/desks": {
      "name": "microsoft.contoso/employees/desks",
      "table": "resources",
      "properties": []
    },
    "microsoft.contoso/installations": {
      "name": "microsoft.contoso/installations",
      "table": "resources",
      "properties": []
    },
    "microsoft.contoso/recipes": {
      "name": "microsoft.contoso/recipes",
      "table": "resources",
      "properties": []
    },
    "microsoft.contoso/towers": {
      "name": "microsoft.contoso/towers",
      "table": "resources",
      "properties": []
    },
    "microsoft.costmanagement/connectors": {
      "name": "microsoft.costmanagement/connectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.customproviders/resourceproviders": {
      "name": "microsoft.customproviders/resourceproviders",
      "table": "resources",
      "properties": []
    },
    "microsoft.d365customerinsights/instances": {
      "name": "microsoft.d365customerinsights/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.dashboard/dashboards": {
      "name": "microsoft.dashboard/dashboards",
      "table": "resources",
      "properties": []
    },
    "microsoft.dashboard/grafana": {
      "name": "microsoft.dashboard/grafana",
      "table": "resources",
      "properties": []
    },
    "microsoft.dashboard/grafana/integrationfabrics": {
      "name": "microsoft.dashboard/grafana/integrationfabrics",
      "table": "resources",
      "properties": []
    },
    "microsoft.dashboard/grafana/managedprivateendpoints": {
      "name": "microsoft.dashboard/grafana/managedprivateendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.dataaccelerator/indexclusters": {
      "name": "microsoft.dataaccelerator/indexclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.databasefleetmanager/fleets": {
      "name": "microsoft.databasefleetmanager/fleets",
      "table": "resources",
      "properties": []
    },
    "microsoft.databasewatcher/watchers": {
      "name": "microsoft.databasewatcher/watchers",
      "table": "resources",
      "properties": []
    },
    "microsoft.databox/jobs": {
      "name": "microsoft.databox/jobs",
      "table": "resources",
      "properties": []
    },
    "microsoft.databoxedge/databoxedgedevices": {
      "name": "microsoft.databoxedge/databoxedgedevices",
      "table": "resources",
      "properties": []
    },
    "microsoft.databricks/accessconnectors": {
      "name": "microsoft.databricks/accessconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.databricks/workspaces": {
      "name": "microsoft.databricks/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.datacollaboration/workspaces": {
      "name": "microsoft.datacollaboration/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.datadog/monitors": {
      "name": "microsoft.datadog/monitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.datafactory/factories": {
      "name": "microsoft.datafactory/factories",
      "table": "resources",
      "properties": []
    },
    "microsoft.datalakeanalytics/accounts": {
      "name": "microsoft.datalakeanalytics/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.datalakestore/accounts": {
      "name": "microsoft.datalakestore/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.datamigration/controllers": {
      "name": "microsoft.datamigration/controllers",
      "table": "resources",
      "properties": []
    },
    "microsoft.datamigration/migrationservices": {
      "name": "microsoft.datamigration/migrationservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.datamigration/services": {
      "name": "microsoft.datamigration/services",
      "table": "resources",
      "properties": []
    },
    "microsoft.datamigration/services/projects": {
      "name": "microsoft.datamigration/services/projects",
      "table": "resources",
      "properties": []
    },
    "microsoft.datamigration/slots": {
      "name": "microsoft.datamigration/slots",
      "table": "resources",
      "properties": []
    },
    "microsoft.datamigration/sqlmigrationservices": {
      "name": "microsoft.datamigration/sqlmigrationservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.dataplatform/capacities": {
      "name": "microsoft.dataplatform/capacities",
      "table": "resources",
      "properties": []
    },
    "microsoft.dataprotection/backupvaults": {
      "name": "microsoft.dataprotection/backupvaults",
      "table": "resources",
      "properties": []
    },
    "microsoft.dataprotection/resourceguards": {
      "name": "microsoft.dataprotection/resourceguards",
      "table": "resources",
      "properties": []
    },
    "microsoft.datareplication/replicationfabrics": {
      "name": "microsoft.datareplication/replicationfabrics",
      "table": "resources",
      "properties": []
    },
    "microsoft.datareplication/replicationvaults": {
      "name": "microsoft.datareplication/replicationvaults",
      "table": "resources",
      "properties": []
    },
    "microsoft.datashare/accounts": {
      "name": "microsoft.datashare/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.dbformariadb/servers": {
      "name": "microsoft.dbformariadb/servers",
      "table": "resources",
      "properties": []
    },
    "microsoft.dbformysql/flexibleservers": {
      "name": "microsoft.dbformysql/flexibleservers",
      "table": "resources",
      "properties": []
    },
    "microsoft.dbformysql/servers": {
      "name": "microsoft.dbformysql/servers",
      "table": "resources",
      "properties": []
    },
    "microsoft.dbforpostgresql/flexibleservers": {
      "name": "microsoft.dbforpostgresql/flexibleservers",
      "table": "resources",
      "properties": []
    },
    "microsoft.dbforpostgresql/servergroupsv2": {
      "name": "microsoft.dbforpostgresql/servergroupsv2",
      "table": "resources",
      "properties": []
    },
    "microsoft.dbforpostgresql/servers": {
      "name": "microsoft.dbforpostgresql/servers",
      "table": "resources",
      "properties": []
    },
    "microsoft.delegatednetwork/controller": {
      "name": "microsoft.delegatednetwork/controller",
      "table": "resources",
      "properties": []
    },
    "microsoft.delegatednetwork/delegatedsubnets": {
      "name": "microsoft.delegatednetwork/delegatedsubnets",
      "table": "resources",
      "properties": []
    },
    "microsoft.delegatednetwork/orchestratorinstances": {
      "name": "microsoft.delegatednetwork/orchestratorinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.delegatednetwork/orchestrators": {
      "name": "microsoft.delegatednetwork/orchestrators",
      "table": "resources",
      "properties": []
    },
    "microsoft.dependencymap/maps": {
      "name": "microsoft.dependencymap/maps",
      "table": "resources",
      "properties": []
    },
    "microsoft.dependencymap/maps/discoverysources": {
      "name": "microsoft.dependencymap/maps/discoverysources",
      "table": "resources",
      "properties": []
    },
    "microsoft.desktopvirtualization/appattachpackages": {
      "name": "microsoft.desktopvirtualization/appattachpackages",
      "table": "resources",
      "properties": []
    },
    "microsoft.desktopvirtualization/applicationgroups": {
      "name": "microsoft.desktopvirtualization/applicationgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.desktopvirtualization/connectionpolicies": {
      "name": "microsoft.desktopvirtualization/connectionpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.desktopvirtualization/hostpools": {
      "name": "microsoft.desktopvirtualization/hostpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.desktopvirtualization/repositoryfolders": {
      "name": "microsoft.desktopvirtualization/repositoryfolders",
      "table": "resources",
      "properties": []
    },
    "microsoft.desktopvirtualization/scalingplans": {
      "name": "microsoft.desktopvirtualization/scalingplans",
      "table": "resources",
      "properties": []
    },
    "microsoft.desktopvirtualization/workspaces": {
      "name": "microsoft.desktopvirtualization/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.devai/instances": {
      "name": "microsoft.devai/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.devai/instances/experiments": {
      "name": "microsoft.devai/instances/experiments",
      "table": "resources",
      "properties": []
    },
    "microsoft.devai/instances/sandboxes": {
      "name": "microsoft.devai/instances/sandboxes",
      "table": "resources",
      "properties": []
    },
    "microsoft.devai/instances/sandboxes/experiments": {
      "name": "microsoft.devai/instances/sandboxes/experiments",
      "table": "resources",
      "properties": []
    },
    "microsoft.devcenter/devcenters": {
      "name": "microsoft.devcenter/devcenters",
      "table": "resources",
      "properties": []
    },
    "microsoft.devcenter/devcenters/devboxdefinitions": {
      "name": "microsoft.devcenter/devcenters/devboxdefinitions",
      "table": "resources",
      "properties": []
    },
    "microsoft.devcenter/networkconnections": {
      "name": "microsoft.devcenter/networkconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.devcenter/plans": {
      "name": "microsoft.devcenter/plans",
      "table": "resources",
      "properties": []
    },
    "microsoft.devcenter/projects": {
      "name": "microsoft.devcenter/projects",
      "table": "resources",
      "properties": []
    },
    "microsoft.devcenter/projects/pools": {
      "name": "microsoft.devcenter/projects/pools",
      "table": "resources",
      "properties": []
    },
    "microsoft.developmentwindows365/developmentcloudpcdelegatedmsis": {
      "name": "microsoft.developmentwindows365/developmentcloudpcdelegatedmsis",
      "table": "resources",
      "properties": []
    },
    "microsoft.devhub/iacprofiles": {
      "name": "microsoft.devhub/iacprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.devhub/workflow": {
      "name": "microsoft.devhub/workflow",
      "table": "resources",
      "properties": []
    },
    "microsoft.devhub/workflows": {
      "name": "microsoft.devhub/workflows",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceonboarding/discoveryservices": {
      "name": "microsoft.deviceonboarding/discoveryservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceonboarding/discoveryservices/ownershipvoucherpublickeys": {
      "name": "microsoft.deviceonboarding/discoveryservices/ownershipvoucherpublickeys",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceonboarding/onboardingservices": {
      "name": "microsoft.deviceonboarding/onboardingservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceonboarding/onboardingservices/policies": {
      "name": "microsoft.deviceonboarding/onboardingservices/policies",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/assetendpointprofiles": {
      "name": "microsoft.deviceregistry/assetendpointprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/assets": {
      "name": "microsoft.deviceregistry/assets",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/devices": {
      "name": "microsoft.deviceregistry/devices",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/discoveredassetendpointprofiles": {
      "name": "microsoft.deviceregistry/discoveredassetendpointprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/discoveredassets": {
      "name": "microsoft.deviceregistry/discoveredassets",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/namespaces": {
      "name": "microsoft.deviceregistry/namespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/namespaces/assets": {
      "name": "microsoft.deviceregistry/namespaces/assets",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/namespaces/credentials": {
      "name": "microsoft.deviceregistry/namespaces/credentials",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/namespaces/devices": {
      "name": "microsoft.deviceregistry/namespaces/devices",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/namespaces/discoveredassets": {
      "name": "microsoft.deviceregistry/namespaces/discoveredassets",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/namespaces/discovereddevices": {
      "name": "microsoft.deviceregistry/namespaces/discovereddevices",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceregistry/schemaregistries": {
      "name": "microsoft.deviceregistry/schemaregistries",
      "table": "resources",
      "properties": []
    },
    "microsoft.devices/iothubs": {
      "name": "microsoft.devices/iothubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.devices/provisioningservices": {
      "name": "microsoft.devices/provisioningservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/accounts": {
      "name": "microsoft.deviceupdate/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/accounts/agents": {
      "name": "microsoft.deviceupdate/accounts/agents",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/accounts/instances": {
      "name": "microsoft.deviceupdate/accounts/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/updateaccounts": {
      "name": "microsoft.deviceupdate/updateaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/updateaccounts/activedeployments": {
      "name": "microsoft.deviceupdate/updateaccounts/activedeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/updateaccounts/agents": {
      "name": "microsoft.deviceupdate/updateaccounts/agents",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/updateaccounts/deployments": {
      "name": "microsoft.deviceupdate/updateaccounts/deployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/updateaccounts/deviceclasses": {
      "name": "microsoft.deviceupdate/updateaccounts/deviceclasses",
      "table": "resources",
      "properties": []
    },
    "microsoft.deviceupdate/updateaccounts/updates": {
      "name": "microsoft.deviceupdate/updateaccounts/updates",
      "table": "resources",
      "properties": []
    },
    "microsoft.devops/pipelines": {
      "name": "microsoft.devops/pipelines",
      "table": "resources",
      "properties": []
    },
    "microsoft.devopsinfrastructure/pools": {
      "name": "microsoft.devopsinfrastructure/pools",
      "table": "resources",
      "properties": []
    },
    "microsoft.devtestlab/labcenters": {
      "name": "microsoft.devtestlab/labcenters",
      "table": "resources",
      "properties": []
    },
    "microsoft.devtestlab/labs": {
      "name": "microsoft.devtestlab/labs",
      "table": "resources",
      "properties": []
    },
    "microsoft.devtestlab/labs/servicerunners": {
      "name": "microsoft.devtestlab/labs/servicerunners",
      "table": "resources",
      "properties": []
    },
    "microsoft.devtestlab/labs/virtualmachines": {
      "name": "microsoft.devtestlab/labs/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.devtestlab/schedules": {
      "name": "microsoft.devtestlab/schedules",
      "table": "resources",
      "properties": []
    },
    "microsoft.devtunnels/tunnelplans": {
      "name": "microsoft.devtunnels/tunnelplans",
      "table": "resources",
      "properties": []
    },
    "microsoft.digitaltwins/digitaltwinsinstances": {
      "name": "microsoft.digitaltwins/digitaltwinsinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/agents": {
      "name": "microsoft.discovery/agents",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/bookshelves": {
      "name": "microsoft.discovery/bookshelves",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/datacontainers": {
      "name": "microsoft.discovery/datacontainers",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/datacontainers/dataassets": {
      "name": "microsoft.discovery/datacontainers/dataassets",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/models": {
      "name": "microsoft.discovery/models",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/storages": {
      "name": "microsoft.discovery/storages",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/supercomputers": {
      "name": "microsoft.discovery/supercomputers",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/supercomputers/nodepools": {
      "name": "microsoft.discovery/supercomputers/nodepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/tools": {
      "name": "microsoft.discovery/tools",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/workflows": {
      "name": "microsoft.discovery/workflows",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/workspaces": {
      "name": "microsoft.discovery/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.discovery/workspaces/projects": {
      "name": "microsoft.discovery/workspaces/projects",
      "table": "resources",
      "properties": []
    },
    "microsoft.dns/dnszones/cname": {
      "name": "microsoft.dns/dnszones/cname",
      "table": "resources",
      "properties": []
    },
    "microsoft.documentdb/cassandraclusters": {
      "name": "microsoft.documentdb/cassandraclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.documentdb/databaseaccounts": {
      "name": "microsoft.documentdb/databaseaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.documentdb/fleets": {
      "name": "microsoft.documentdb/fleets",
      "table": "resources",
      "properties": []
    },
    "microsoft.documentdb/garnetclusters": {
      "name": "microsoft.documentdb/garnetclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.documentdb/managedresources": {
      "name": "microsoft.documentdb/managedresources",
      "table": "resources",
      "properties": []
    },
    "microsoft.documentdb/mongoclusters": {
      "name": "microsoft.documentdb/mongoclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.documentdb/throughputpools": {
      "name": "microsoft.documentdb/throughputpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.domainregistration/domains": {
      "name": "microsoft.domainregistration/domains",
      "table": "resources",
      "properties": []
    },
    "microsoft.durabletask/namespaces": {
      "name": "microsoft.durabletask/namespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.durabletask/schedulers": {
      "name": "microsoft.durabletask/schedulers",
      "table": "resources",
      "properties": []
    },
    "microsoft.dynamics365fraudprotection/instances": {
      "name": "microsoft.dynamics365fraudprotection/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.easm/workspaces": {
      "name": "microsoft.easm/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/capabilitylists": {
      "name": "microsoft.edge/capabilitylists",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/configtemplates": {
      "name": "microsoft.edge/configtemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/configurations": {
      "name": "microsoft.edge/configurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/contexts": {
      "name": "microsoft.edge/contexts",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/deploymenttargets": {
      "name": "microsoft.edge/deploymenttargets",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/diagnostics": {
      "name": "microsoft.edge/diagnostics",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/disconnectedoperations": {
      "name": "microsoft.edge/disconnectedoperations",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/hierarchylists": {
      "name": "microsoft.edge/hierarchylists",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/schemas": {
      "name": "microsoft.edge/schemas",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/solutionbindings": {
      "name": "microsoft.edge/solutionbindings",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/solutions": {
      "name": "microsoft.edge/solutions",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/solutiontemplates": {
      "name": "microsoft.edge/solutiontemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/targets": {
      "name": "microsoft.edge/targets",
      "table": "resources",
      "properties": []
    },
    "microsoft.edge/winfields": {
      "name": "microsoft.edge/winfields",
      "table": "resources",
      "properties": []
    },
    "microsoft.edgeorder/addresses": {
      "name": "microsoft.edgeorder/addresses",
      "table": "resources",
      "properties": []
    },
    "microsoft.edgeorder/bootstrapconfigurations": {
      "name": "microsoft.edgeorder/bootstrapconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.edgeorder/orderitems": {
      "name": "microsoft.edgeorder/orderitems",
      "table": "resources",
      "properties": []
    },
    "microsoft.edgezones/edgezones": {
      "name": "microsoft.edgezones/edgezones",
      "table": "resources",
      "properties": []
    },
    "microsoft.elastic/monitors": {
      "name": "microsoft.elastic/monitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.energydataplatform/energyservices": {
      "name": "microsoft.energydataplatform/energyservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.enterprisesupport/enterprisesupports": {
      "name": "microsoft.enterprisesupport/enterprisesupports",
      "table": "resources",
      "properties": []
    },
    "microsoft.entraidgovernance/guestgovernanceusage": {
      "name": "microsoft.entraidgovernance/guestgovernanceusage",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/domains": {
      "name": "microsoft.eventgrid/domains",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/namespaces": {
      "name": "microsoft.eventgrid/namespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/partnerconfigurations": {
      "name": "microsoft.eventgrid/partnerconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/partnerdestinations": {
      "name": "microsoft.eventgrid/partnerdestinations",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/partnernamespaces": {
      "name": "microsoft.eventgrid/partnernamespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/partnerregistrations": {
      "name": "microsoft.eventgrid/partnerregistrations",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/partnertopics": {
      "name": "microsoft.eventgrid/partnertopics",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/systemtopics": {
      "name": "microsoft.eventgrid/systemtopics",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventgrid/topics": {
      "name": "microsoft.eventgrid/topics",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventhub/clusters": {
      "name": "microsoft.eventhub/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.eventhub/namespaces": {
      "name": "microsoft.eventhub/namespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.experimentation/experimentworkspaces": {
      "name": "microsoft.experimentation/experimentworkspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.extendedlocation/customlocations": {
      "name": "microsoft.extendedlocation/customlocations",
      "table": "resources",
      "properties": []
    },
    "microsoft.extendedlocation/customlocations/resourcesyncrules": {
      "name": "microsoft.extendedlocation/customlocations/resourcesyncrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.fabric/capacities": {
      "name": "microsoft.fabric/capacities",
      "table": "resources",
      "properties": []
    },
    "microsoft.fabric/privatelinkservicesforfabric": {
      "name": "microsoft.fabric/privatelinkservicesforfabric",
      "table": "resources",
      "properties": []
    },
    "microsoft.fairfieldgardens/provisioningresources": {
      "name": "microsoft.fairfieldgardens/provisioningresources",
      "table": "resources",
      "properties": []
    },
    "microsoft.fairfieldgardens/provisioningresources/provisioningpolicies": {
      "name": "microsoft.fairfieldgardens/provisioningresources/provisioningpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.falcon/namespaces": {
      "name": "microsoft.falcon/namespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.fidalgo/projects/pools": {
      "name": "microsoft.fidalgo/projects/pools",
      "table": "resources",
      "properties": []
    },
    "microsoft.fileshares/fileshares": {
      "name": "microsoft.fileshares/fileshares",
      "table": "resources",
      "properties": []
    },
    "microsoft.fluidrelay/fluidrelayservers": {
      "name": "microsoft.fluidrelay/fluidrelayservers",
      "table": "resources",
      "properties": []
    },
    "microsoft.footprintmonitoring/profiles": {
      "name": "microsoft.footprintmonitoring/profiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.gaming/titles": {
      "name": "microsoft.gaming/titles",
      "table": "resources",
      "properties": []
    },
    "microsoft.gcpconnector/cloudfunctions": {
      "name": "microsoft.gcpconnector/cloudfunctions",
      "table": "resources",
      "properties": []
    },
    "microsoft.gcpconnector/storagebuckets": {
      "name": "microsoft.gcpconnector/storagebuckets",
      "table": "resources",
      "properties": []
    },
    "microsoft.graph/azureadapplication": {
      "name": "microsoft.graph/azureadapplication",
      "table": "resources",
      "properties": []
    },
    "microsoft.graphservices/accounts": {
      "name": "microsoft.graphservices/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.hanaonazure/hanainstances": {
      "name": "microsoft.hanaonazure/hanainstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.hanaonazure/sapmonitors": {
      "name": "microsoft.hanaonazure/sapmonitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.hardware/orders": {
      "name": "microsoft.hardware/orders",
      "table": "resources",
      "properties": []
    },
    "microsoft.hardwaresecuritymodules/cloudhsmclusters": {
      "name": "microsoft.hardwaresecuritymodules/cloudhsmclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.hardwaresecuritymodules/dedicatedhsms": {
      "name": "microsoft.hardwaresecuritymodules/dedicatedhsms",
      "table": "resources",
      "properties": []
    },
    "microsoft.hdinsight/clusterpools": {
      "name": "microsoft.hdinsight/clusterpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.hdinsight/clusterpools/clusters": {
      "name": "microsoft.hdinsight/clusterpools/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.hdinsight/clusters": {
      "name": "microsoft.hdinsight/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthbot/healthbots": {
      "name": "microsoft.healthbot/healthbots",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareapis/services": {
      "name": "microsoft.healthcareapis/services",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareapis/services/privateendpointconnections": {
      "name": "microsoft.healthcareapis/services/privateendpointconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareapis/workspaces": {
      "name": "microsoft.healthcareapis/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareapis/workspaces/analyticsconnectors": {
      "name": "microsoft.healthcareapis/workspaces/analyticsconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareapis/workspaces/dicomservices": {
      "name": "microsoft.healthcareapis/workspaces/dicomservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareapis/workspaces/fhirservices": {
      "name": "microsoft.healthcareapis/workspaces/fhirservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareapis/workspaces/iotconnectors": {
      "name": "microsoft.healthcareapis/workspaces/iotconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/dicomconnectors": {
      "name": "microsoft.healthcareinterop/dicomconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/dicomdirectchannels": {
      "name": "microsoft.healthcareinterop/dicomdirectchannels",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/dicomedgeconnectors": {
      "name": "microsoft.healthcareinterop/dicomedgeconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/fhirqueryeventbatchchannels": {
      "name": "microsoft.healthcareinterop/fhirqueryeventbatchchannels",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/fhirqueryflatfilebatchchannels": {
      "name": "microsoft.healthcareinterop/fhirqueryflatfilebatchchannels",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/hl7connectors": {
      "name": "microsoft.healthcareinterop/hl7connectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/hl7edgeconnectors": {
      "name": "microsoft.healthcareinterop/hl7edgeconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/hubs": {
      "name": "microsoft.healthcareinterop/hubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/onelakeconnectors": {
      "name": "microsoft.healthcareinterop/onelakeconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthcareinterop/storageaccountconnectors": {
      "name": "microsoft.healthcareinterop/storageaccountconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthdataaiservices/deidservices": {
      "name": "microsoft.healthdataaiservices/deidservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthmodel/healthmodels": {
      "name": "microsoft.healthmodel/healthmodels",
      "table": "resources",
      "properties": []
    },
    "microsoft.healthplatform/accounts": {
      "name": "microsoft.healthplatform/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.hpcworkbench/instances": {
      "name": "microsoft.hpcworkbench/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.hpcworkbench/instances/chambers": {
      "name": "microsoft.hpcworkbench/instances/chambers",
      "table": "resources",
      "properties": []
    },
    "microsoft.hpcworkbench/instances/chambers/accessprofiles": {
      "name": "microsoft.hpcworkbench/instances/chambers/accessprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.hpcworkbench/instances/chambers/workloads": {
      "name": "microsoft.hpcworkbench/instances/chambers/workloads",
      "table": "resources",
      "properties": []
    },
    "microsoft.hpcworkbench/instances/consortiums": {
      "name": "microsoft.hpcworkbench/instances/consortiums",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcloud/cloudconnections": {
      "name": "microsoft.hybridcloud/cloudconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcloud/cloudconnectors": {
      "name": "microsoft.hybridcloud/cloudconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcompute/gateways": {
      "name": "microsoft.hybridcompute/gateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcompute/licenses": {
      "name": "microsoft.hybridcompute/licenses",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcompute/machines": {
      "name": "microsoft.hybridcompute/machines",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcompute/machines/extensions": {
      "name": "microsoft.hybridcompute/machines/extensions",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcompute/machines/licenseprofiles": {
      "name": "microsoft.hybridcompute/machines/licenseprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcompute/machines/runcommands": {
      "name": "microsoft.hybridcompute/machines/runcommands",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcompute/privatelinkscopes": {
      "name": "microsoft.hybridcompute/privatelinkscopes",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridconnectivity/publiccloudconnectors": {
      "name": "microsoft.hybridconnectivity/publiccloudconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcontainerservice/provisionedclusters": {
      "name": "microsoft.hybridcontainerservice/provisionedclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcontainerservice/provisionedclusters/agentpools": {
      "name": "microsoft.hybridcontainerservice/provisionedclusters/agentpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcontainerservice/storagespaces": {
      "name": "microsoft.hybridcontainerservice/storagespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridcontainerservice/virtualnetworks": {
      "name": "microsoft.hybridcontainerservice/virtualnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybriddata/datamanagers": {
      "name": "microsoft.hybriddata/datamanagers",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/configurationgroupvalues": {
      "name": "microsoft.hybridnetwork/configurationgroupvalues",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/devices": {
      "name": "microsoft.hybridnetwork/devices",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/networkfunctions": {
      "name": "microsoft.hybridnetwork/networkfunctions",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers": {
      "name": "microsoft.hybridnetwork/publishers",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers/artifactstores": {
      "name": "microsoft.hybridnetwork/publishers/artifactstores",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers/artifactstores/artifactmanifests": {
      "name": "microsoft.hybridnetwork/publishers/artifactstores/artifactmanifests",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers/configurationgroupschemas": {
      "name": "microsoft.hybridnetwork/publishers/configurationgroupschemas",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers/networkfunctiondefinitiongroups": {
      "name": "microsoft.hybridnetwork/publishers/networkfunctiondefinitiongroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers/networkfunctiondefinitiongroups/networkfunctiondefinitionversions": {
      "name": "microsoft.hybridnetwork/publishers/networkfunctiondefinitiongroups/networkfunctiondefinitionversions",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers/networkfunctiondefinitiongroups/previewsubscriptions": {
      "name": "microsoft.hybridnetwork/publishers/networkfunctiondefinitiongroups/previewsubscriptions",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers/networkservicedesigngroups": {
      "name": "microsoft.hybridnetwork/publishers/networkservicedesigngroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/publishers/networkservicedesigngroups/networkservicedesignversions": {
      "name": "microsoft.hybridnetwork/publishers/networkservicedesigngroups/networkservicedesignversions",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/servicemanagementcontainers": {
      "name": "microsoft.hybridnetwork/servicemanagementcontainers",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/servicemanagementcontainers/rolloutsequences": {
      "name": "microsoft.hybridnetwork/servicemanagementcontainers/rolloutsequences",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/servicemanagementcontainers/rollouttiers": {
      "name": "microsoft.hybridnetwork/servicemanagementcontainers/rollouttiers",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/servicemanagementcontainers/updatespecifications": {
      "name": "microsoft.hybridnetwork/servicemanagementcontainers/updatespecifications",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/servicemanagementcontainers/updatespecifications/rollouts": {
      "name": "microsoft.hybridnetwork/servicemanagementcontainers/updatespecifications/rollouts",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/sitenetworkservices": {
      "name": "microsoft.hybridnetwork/sitenetworkservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.hybridnetwork/sites": {
      "name": "microsoft.hybridnetwork/sites",
      "table": "resources",
      "properties": []
    },
    "microsoft.ibmpower/powervirtualmachines": {
      "name": "microsoft.ibmpower/powervirtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.ibmpower/powervirtualmachines/interfaces": {
      "name": "microsoft.ibmpower/powervirtualmachines/interfaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.importexport/jobs": {
      "name": "microsoft.importexport/jobs",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/actiongroups": {
      "name": "microsoft.insights/actiongroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/activitylogalerts": {
      "name": "microsoft.insights/activitylogalerts",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/autoscalesettings": {
      "name": "microsoft.insights/autoscalesettings",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/components": {
      "name": "microsoft.insights/components",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/datacollectionendpoints": {
      "name": "microsoft.insights/datacollectionendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/datacollectionrules": {
      "name": "microsoft.insights/datacollectionrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/firstparty": {
      "name": "microsoft.insights/firstparty",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/guestdiagnosticsettings": {
      "name": "microsoft.insights/guestdiagnosticsettings",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/metricalerts": {
      "name": "microsoft.insights/metricalerts",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/notificationgroups": {
      "name": "microsoft.insights/notificationgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/notificationrules": {
      "name": "microsoft.insights/notificationrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/privatelinkscopes": {
      "name": "microsoft.insights/privatelinkscopes",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/scheduledqueryrules": {
      "name": "microsoft.insights/scheduledqueryrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/webtests": {
      "name": "microsoft.insights/webtests",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/workbooks": {
      "name": "microsoft.insights/workbooks",
      "table": "resources",
      "properties": []
    },
    "microsoft.insights/workbooktemplates": {
      "name": "microsoft.insights/workbooktemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.integrationspaces/spaces": {
      "name": "microsoft.integrationspaces/spaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.integrationspaces/spaces/applications": {
      "name": "microsoft.integrationspaces/spaces/applications",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotcentral/iotapps": {
      "name": "microsoft.iotcentral/iotapps",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotfirmwaredefense/workspaces": {
      "name": "microsoft.iotfirmwaredefense/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperations/instances": {
      "name": "microsoft.iotoperations/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsdataprocessor/instances": {
      "name": "microsoft.iotoperationsdataprocessor/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsdataprocessor/instances/datasets": {
      "name": "microsoft.iotoperationsdataprocessor/instances/datasets",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsdataprocessor/instances/pipelines": {
      "name": "microsoft.iotoperationsdataprocessor/instances/pipelines",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq": {
      "name": "microsoft.iotoperationsmq/mq",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/broker": {
      "name": "microsoft.iotoperationsmq/mq/broker",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/broker/authentication": {
      "name": "microsoft.iotoperationsmq/mq/broker/authentication",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/broker/authorization": {
      "name": "microsoft.iotoperationsmq/mq/broker/authorization",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/broker/listener": {
      "name": "microsoft.iotoperationsmq/mq/broker/listener",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/datalakeconnector": {
      "name": "microsoft.iotoperationsmq/mq/datalakeconnector",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/datalakeconnector/topicmap": {
      "name": "microsoft.iotoperationsmq/mq/datalakeconnector/topicmap",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/diagnosticservice": {
      "name": "microsoft.iotoperationsmq/mq/diagnosticservice",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/kafkaconnector": {
      "name": "microsoft.iotoperationsmq/mq/kafkaconnector",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/kafkaconnector/topicmap": {
      "name": "microsoft.iotoperationsmq/mq/kafkaconnector/topicmap",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/mqttbridgeconnector": {
      "name": "microsoft.iotoperationsmq/mq/mqttbridgeconnector",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsmq/mq/mqttbridgeconnector/topicmap": {
      "name": "microsoft.iotoperationsmq/mq/mqttbridgeconnector/topicmap",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsorchestrator/instances": {
      "name": "microsoft.iotoperationsorchestrator/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsorchestrator/solutions": {
      "name": "microsoft.iotoperationsorchestrator/solutions",
      "table": "resources",
      "properties": []
    },
    "microsoft.iotoperationsorchestrator/targets": {
      "name": "microsoft.iotoperationsorchestrator/targets",
      "table": "resources",
      "properties": []
    },
    "microsoft.keyvault/hsmpools": {
      "name": "microsoft.keyvault/hsmpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.keyvault/managedhsms": {
      "name": "microsoft.keyvault/managedhsms",
      "table": "resources",
      "properties": []
    },
    "microsoft.keyvault/vaults": {
      "name": "microsoft.keyvault/vaults",
      "table": "resources",
      "properties": []
    },
    "microsoft.kubernetes/connectedclusters": {
      "name": "microsoft.kubernetes/connectedclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.kubernetesconfiguration/privatelinkscopes": {
      "name": "microsoft.kubernetesconfiguration/privatelinkscopes",
      "table": "resources",
      "properties": []
    },
    "microsoft.kusto/clusters": {
      "name": "microsoft.kusto/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.kx/kdbinsightsenterprise": {
      "name": "microsoft.kx/kdbinsightsenterprise",
      "table": "resources",
      "properties": []
    },
    "microsoft.labservices/labaccounts": {
      "name": "microsoft.labservices/labaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.labservices/labplans": {
      "name": "microsoft.labservices/labplans",
      "table": "resources",
      "properties": []
    },
    "microsoft.labservices/labs": {
      "name": "microsoft.labservices/labs",
      "table": "resources",
      "properties": []
    },
    "microsoft.liftrpilot/organizations": {
      "name": "microsoft.liftrpilot/organizations",
      "table": "resources",
      "properties": []
    },
    "microsoft.liftrpilot/testtrackedresources": {
      "name": "microsoft.liftrpilot/testtrackedresources",
      "table": "resources",
      "properties": []
    },
    "microsoft.liftrpilot/testtrackedsyncresources": {
      "name": "microsoft.liftrpilot/testtrackedsyncresources",
      "table": "resources",
      "properties": []
    },
    "microsoft.loadtestservice/loadtests": {
      "name": "microsoft.loadtestservice/loadtests",
      "table": "resources",
      "properties": []
    },
    "microsoft.loadtestservice/playwrightworkspaces": {
      "name": "microsoft.loadtestservice/playwrightworkspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.logic/businessprocesses": {
      "name": "microsoft.logic/businessprocesses",
      "table": "resources",
      "properties": []
    },
    "microsoft.logic/integrationaccounts": {
      "name": "microsoft.logic/integrationaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.logic/integrationserviceenvironments": {
      "name": "microsoft.logic/integrationserviceenvironments",
      "table": "resources",
      "properties": []
    },
    "microsoft.logic/integrationserviceenvironments/managedapis": {
      "name": "microsoft.logic/integrationserviceenvironments/managedapis",
      "table": "resources",
      "properties": []
    },
    "microsoft.logic/templates": {
      "name": "microsoft.logic/templates",
      "table": "resources",
      "properties": []
    },
    "microsoft.logic/workflows": {
      "name": "microsoft.logic/workflows",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearning/webservices": {
      "name": "microsoft.machinelearning/webservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/inferencemodels": {
      "name": "microsoft.machinelearningservices/inferencemodels",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/registries": {
      "name": "microsoft.machinelearningservices/registries",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/virtualclusters": {
      "name": "microsoft.machinelearningservices/virtualclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces": {
      "name": "microsoft.machinelearningservices/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/batchendpoints": {
      "name": "microsoft.machinelearningservices/workspaces/batchendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/batchendpoints/deployments": {
      "name": "microsoft.machinelearningservices/workspaces/batchendpoints/deployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/inferencepools": {
      "name": "microsoft.machinelearningservices/workspaces/inferencepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/inferencepools/endpoints": {
      "name": "microsoft.machinelearningservices/workspaces/inferencepools/endpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/inferencepools/groups": {
      "name": "microsoft.machinelearningservices/workspaces/inferencepools/groups",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/onlineendpoints": {
      "name": "microsoft.machinelearningservices/workspaces/onlineendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/onlineendpoints/deployments": {
      "name": "microsoft.machinelearningservices/workspaces/onlineendpoints/deployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/registries": {
      "name": "microsoft.machinelearningservices/workspaces/registries",
      "table": "resources",
      "properties": []
    },
    "microsoft.machinelearningservices/workspaces/serverlessendpoints": {
      "name": "microsoft.machinelearningservices/workspaces/serverlessendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.maintenance/maintenanceconfigurations": {
      "name": "microsoft.maintenance/maintenanceconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.maintenance/maintenancepolicies": {
      "name": "microsoft.maintenance/maintenancepolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.maintenance/orchestrationpreferences": {
      "name": "microsoft.maintenance/orchestrationpreferences",
      "table": "resources",
      "properties": []
    },
    "microsoft.managedidentity/userassignedidentities": {
      "name": "microsoft.managedidentity/userassignedidentities",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/accesscontrollists": {
      "name": "microsoft.managednetworkfabric/accesscontrollists",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/internetgatewayrules": {
      "name": "microsoft.managednetworkfabric/internetgatewayrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/internetgateways": {
      "name": "microsoft.managednetworkfabric/internetgateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/ipcommunities": {
      "name": "microsoft.managednetworkfabric/ipcommunities",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/ipcommunitylists": {
      "name": "microsoft.managednetworkfabric/ipcommunitylists",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/ipextendedcommunities": {
      "name": "microsoft.managednetworkfabric/ipextendedcommunities",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/ipprefixes": {
      "name": "microsoft.managednetworkfabric/ipprefixes",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/ipprefixlists": {
      "name": "microsoft.managednetworkfabric/ipprefixlists",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/l2isolationdomains": {
      "name": "microsoft.managednetworkfabric/l2isolationdomains",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/l3isolationdomains": {
      "name": "microsoft.managednetworkfabric/l3isolationdomains",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/neighborgroups": {
      "name": "microsoft.managednetworkfabric/neighborgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/networkdevices": {
      "name": "microsoft.managednetworkfabric/networkdevices",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/networkfabriccontrollers": {
      "name": "microsoft.managednetworkfabric/networkfabriccontrollers",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/networkfabrics": {
      "name": "microsoft.managednetworkfabric/networkfabrics",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/networkmonitors": {
      "name": "microsoft.managednetworkfabric/networkmonitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/networkpacketbrokers": {
      "name": "microsoft.managednetworkfabric/networkpacketbrokers",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/networkracks": {
      "name": "microsoft.managednetworkfabric/networkracks",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/networktaprules": {
      "name": "microsoft.managednetworkfabric/networktaprules",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/networktaps": {
      "name": "microsoft.managednetworkfabric/networktaps",
      "table": "resources",
      "properties": []
    },
    "microsoft.managednetworkfabric/routepolicies": {
      "name": "microsoft.managednetworkfabric/routepolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.managedstorageclass/managedstorageclass": {
      "name": "microsoft.managedstorageclass/managedstorageclass",
      "table": "resources",
      "properties": []
    },
    "microsoft.manufacturingplatform/manufacturingdataservices": {
      "name": "microsoft.manufacturingplatform/manufacturingdataservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.maps/accounts": {
      "name": "microsoft.maps/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.maps/accounts/creators": {
      "name": "microsoft.maps/accounts/creators",
      "table": "resources",
      "properties": []
    },
    "microsoft.messagingcatalog/catalogs": {
      "name": "microsoft.messagingcatalog/catalogs",
      "table": "resources",
      "properties": []
    },
    "microsoft.messagingconnectors/connectors": {
      "name": "microsoft.messagingconnectors/connectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.metaverse/metaverses": {
      "name": "microsoft.metaverse/metaverses",
      "table": "resources",
      "properties": []
    },
    "microsoft.migrate/assessmentprojects": {
      "name": "microsoft.migrate/assessmentprojects",
      "table": "resources",
      "properties": []
    },
    "microsoft.migrate/migrateprojects": {
      "name": "microsoft.migrate/migrateprojects",
      "table": "resources",
      "properties": []
    },
    "microsoft.migrate/modernizeprojects": {
      "name": "microsoft.migrate/modernizeprojects",
      "table": "resources",
      "properties": []
    },
    "microsoft.migrate/movecollections": {
      "name": "microsoft.migrate/movecollections",
      "table": "resources",
      "properties": []
    },
    "microsoft.migrate/projects": {
      "name": "microsoft.migrate/projects",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/catalogs": {
      "name": "microsoft.mission/catalogs",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/communities": {
      "name": "microsoft.mission/communities",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/communities/communityendpoints": {
      "name": "microsoft.mission/communities/communityendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/communities/transithubs": {
      "name": "microsoft.mission/communities/transithubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/enclaveconnections": {
      "name": "microsoft.mission/enclaveconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/externalconnections": {
      "name": "microsoft.mission/externalconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/internalconnections": {
      "name": "microsoft.mission/internalconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/virtualenclaves": {
      "name": "microsoft.mission/virtualenclaves",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/virtualenclaves/enclaveendpoints": {
      "name": "microsoft.mission/virtualenclaves/enclaveendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/virtualenclaves/endpoints": {
      "name": "microsoft.mission/virtualenclaves/endpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.mission/virtualenclaves/workloads": {
      "name": "microsoft.mission/virtualenclaves/workloads",
      "table": "resources",
      "properties": []
    },
    "microsoft.mixedreality/objectanchorsaccounts": {
      "name": "microsoft.mixedreality/objectanchorsaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.mixedreality/objectunderstandingaccounts": {
      "name": "microsoft.mixedreality/objectunderstandingaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.mixedreality/remoterenderingaccounts": {
      "name": "microsoft.mixedreality/remoterenderingaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.mixedreality/spatialanchorsaccounts": {
      "name": "microsoft.mixedreality/spatialanchorsaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.mixedreality/spatialmapsaccounts": {
      "name": "microsoft.mixedreality/spatialmapsaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/amfdeployments": {
      "name": "microsoft.mobilenetwork/amfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/clusterservices": {
      "name": "microsoft.mobilenetwork/clusterservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/mobilenetworks": {
      "name": "microsoft.mobilenetwork/mobilenetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/mobilenetworks/datanetworks": {
      "name": "microsoft.mobilenetwork/mobilenetworks/datanetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/mobilenetworks/edgenetworksecuritygroups": {
      "name": "microsoft.mobilenetwork/mobilenetworks/edgenetworksecuritygroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/mobilenetworks/services": {
      "name": "microsoft.mobilenetwork/mobilenetworks/services",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/mobilenetworks/simpolicies": {
      "name": "microsoft.mobilenetwork/mobilenetworks/simpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/mobilenetworks/sites": {
      "name": "microsoft.mobilenetwork/mobilenetworks/sites",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/mobilenetworks/slices": {
      "name": "microsoft.mobilenetwork/mobilenetworks/slices",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/mobilenetworks/wifissids": {
      "name": "microsoft.mobilenetwork/mobilenetworks/wifissids",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/nrfdeployments": {
      "name": "microsoft.mobilenetwork/nrfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/nssfdeployments": {
      "name": "microsoft.mobilenetwork/nssfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/observabilityservices": {
      "name": "microsoft.mobilenetwork/observabilityservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/packetcorecontrolplanes": {
      "name": "microsoft.mobilenetwork/packetcorecontrolplanes",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes": {
      "name": "microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/attacheddatanetworks": {
      "name": "microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/attacheddatanetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/attachedwifissids": {
      "name": "microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/attachedwifissids",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/edgevirtualnetworks": {
      "name": "microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/edgevirtualnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/radioaccessnetworks": {
      "name": "microsoft.mobilenetwork/radioaccessnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/simgroups": {
      "name": "microsoft.mobilenetwork/simgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/sims": {
      "name": "microsoft.mobilenetwork/sims",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/sims/simprofiles": {
      "name": "microsoft.mobilenetwork/sims/simprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/smfdeployments": {
      "name": "microsoft.mobilenetwork/smfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilenetwork/upfdeployments": {
      "name": "microsoft.mobilenetwork/upfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/amfdeployments": {
      "name": "microsoft.mobilepacketcore/amfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/clusterservices": {
      "name": "microsoft.mobilepacketcore/clusterservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/mobilepacketcores": {
      "name": "microsoft.mobilepacketcore/mobilepacketcores",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/networkfunctions": {
      "name": "microsoft.mobilepacketcore/networkfunctions",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/nrfdeployments": {
      "name": "microsoft.mobilepacketcore/nrfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/nssfdeployments": {
      "name": "microsoft.mobilepacketcore/nssfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/observabilityservices": {
      "name": "microsoft.mobilepacketcore/observabilityservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/smfdeployments": {
      "name": "microsoft.mobilepacketcore/smfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.mobilepacketcore/upfdeployments": {
      "name": "microsoft.mobilepacketcore/upfdeployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/instances": {
      "name": "microsoft.modsimworkbench/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/instances/chambers": {
      "name": "microsoft.modsimworkbench/instances/chambers",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/instances/chambers/connectors": {
      "name": "microsoft.modsimworkbench/instances/chambers/connectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/instances/chambers/workloads": {
      "name": "microsoft.modsimworkbench/instances/chambers/workloads",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/workbenches": {
      "name": "microsoft.modsimworkbench/workbenches",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/workbenches/chambers": {
      "name": "microsoft.modsimworkbench/workbenches/chambers",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/workbenches/chambers/connectors": {
      "name": "microsoft.modsimworkbench/workbenches/chambers/connectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/workbenches/chambers/storages": {
      "name": "microsoft.modsimworkbench/workbenches/chambers/storages",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/workbenches/chambers/workloads": {
      "name": "microsoft.modsimworkbench/workbenches/chambers/workloads",
      "table": "resources",
      "properties": []
    },
    "microsoft.modsimworkbench/workbenches/sharedstorages": {
      "name": "microsoft.modsimworkbench/workbenches/sharedstorages",
      "table": "resources",
      "properties": []
    },
    "microsoft.monitor/accounts": {
      "name": "microsoft.monitor/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.monitor/pipelinegroups": {
      "name": "microsoft.monitor/pipelinegroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.mysqldiscovery/mysqlsites": {
      "name": "microsoft.mysqldiscovery/mysqlsites",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/activedirectoryconfigs": {
      "name": "microsoft.netapp/activedirectoryconfigs",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/netappaccounts": {
      "name": "microsoft.netapp/netappaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/netappaccounts/backuppolicies": {
      "name": "microsoft.netapp/netappaccounts/backuppolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/netappaccounts/backupvaults": {
      "name": "microsoft.netapp/netappaccounts/backupvaults",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/netappaccounts/capacitypools": {
      "name": "microsoft.netapp/netappaccounts/capacitypools",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/netappaccounts/capacitypools/caches": {
      "name": "microsoft.netapp/netappaccounts/capacitypools/caches",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/netappaccounts/capacitypools/volumes": {
      "name": "microsoft.netapp/netappaccounts/capacitypools/volumes",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/netappaccounts/snapshotpolicies": {
      "name": "microsoft.netapp/netappaccounts/snapshotpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/scaleaccounts": {
      "name": "microsoft.netapp/scaleaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/scaleaccounts/scalecapacitypools": {
      "name": "microsoft.netapp/scaleaccounts/scalecapacitypools",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/scaleaccounts/scalecapacitypools/scalevolumes": {
      "name": "microsoft.netapp/scaleaccounts/scalecapacitypools/scalevolumes",
      "table": "resources",
      "properties": []
    },
    "microsoft.netapp/scaleaccounts/scalesnapshotpolicies": {
      "name": "microsoft.netapp/scaleaccounts/scalesnapshotpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/applicationgateways": {
      "name": "microsoft.network/applicationgateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/applicationgatewaywebapplicationfirewallpolicies": {
      "name": "microsoft.network/applicationgatewaywebapplicationfirewallpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/applicationsecuritygroups": {
      "name": "microsoft.network/applicationsecuritygroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/azurefirewalls": {
      "name": "microsoft.network/azurefirewalls",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/bastionhosts": {
      "name": "microsoft.network/bastionhosts",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/connections": {
      "name": "microsoft.network/connections",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/customipprefixes": {
      "name": "microsoft.network/customipprefixes",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/ddoscustompolicies": {
      "name": "microsoft.network/ddoscustompolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/ddosprotectionplans": {
      "name": "microsoft.network/ddosprotectionplans",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnsforwardingrulesets": {
      "name": "microsoft.network/dnsforwardingrulesets",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnsresolverdomainlists": {
      "name": "microsoft.network/dnsresolverdomainlists",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnsresolverpolicies": {
      "name": "microsoft.network/dnsresolverpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnsresolverpolicies/dnssecurityrules": {
      "name": "microsoft.network/dnsresolverpolicies/dnssecurityrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnsresolverpolicies/virtualnetworklinks": {
      "name": "microsoft.network/dnsresolverpolicies/virtualnetworklinks",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnsresolvers": {
      "name": "microsoft.network/dnsresolvers",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnsresolvers/inboundendpoints": {
      "name": "microsoft.network/dnsresolvers/inboundendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnsresolvers/outboundendpoints": {
      "name": "microsoft.network/dnsresolvers/outboundendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnssecuritypolicies": {
      "name": "microsoft.network/dnssecuritypolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnssecuritypolicies/virtualnetworklinks": {
      "name": "microsoft.network/dnssecuritypolicies/virtualnetworklinks",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnssecuritypolicydomainlists": {
      "name": "microsoft.network/dnssecuritypolicydomainlists",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dnszones": {
      "name": "microsoft.network/dnszones",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/dscpconfigurations": {
      "name": "microsoft.network/dscpconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/expressroutecircuits": {
      "name": "microsoft.network/expressroutecircuits",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/expressroutecrossconnections": {
      "name": "microsoft.network/expressroutecrossconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/expressroutegateways": {
      "name": "microsoft.network/expressroutegateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/expressrouteports": {
      "name": "microsoft.network/expressrouteports",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/firewallpolicies": {
      "name": "microsoft.network/firewallpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/firewallpolicies/rulegroups": {
      "name": "microsoft.network/firewallpolicies/rulegroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/frontdoors": {
      "name": "microsoft.network/frontdoors",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/frontdoorwebapplicationfirewallpolicies": {
      "name": "microsoft.network/frontdoorwebapplicationfirewallpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/gatewayloadbalanceraliases": {
      "name": "microsoft.network/gatewayloadbalanceraliases",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/ipallocations": {
      "name": "microsoft.network/ipallocations",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/ipgroups": {
      "name": "microsoft.network/ipgroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/loadbalancers": {
      "name": "microsoft.network/loadbalancers",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/localnetworkgateways": {
      "name": "microsoft.network/localnetworkgateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/natgateways": {
      "name": "microsoft.network/natgateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkexperimentprofiles": {
      "name": "microsoft.network/networkexperimentprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkintentpolicies": {
      "name": "microsoft.network/networkintentpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkinterfaces": {
      "name": "microsoft.network/networkinterfaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkmanagers": {
      "name": "microsoft.network/networkmanagers",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkmanagers/ipampools": {
      "name": "microsoft.network/networkmanagers/ipampools",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkmanagers/verifierworkspaces": {
      "name": "microsoft.network/networkmanagers/verifierworkspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkprofiles": {
      "name": "microsoft.network/networkprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networksecuritygroups": {
      "name": "microsoft.network/networksecuritygroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networksecurityperimeters": {
      "name": "microsoft.network/networksecurityperimeters",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkverifiers": {
      "name": "microsoft.network/networkverifiers",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkvirtualappliances": {
      "name": "microsoft.network/networkvirtualappliances",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkwatchers": {
      "name": "microsoft.network/networkwatchers",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkwatchers/agents": {
      "name": "microsoft.network/networkwatchers/agents",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkwatchers/connectionanalyzers": {
      "name": "microsoft.network/networkwatchers/connectionanalyzers",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkwatchers/connectionmonitors": {
      "name": "microsoft.network/networkwatchers/connectionmonitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkwatchers/flowlogs": {
      "name": "microsoft.network/networkwatchers/flowlogs",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkwatchers/lenses": {
      "name": "microsoft.network/networkwatchers/lenses",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkwatchers/networkwatcheragents": {
      "name": "microsoft.network/networkwatchers/networkwatcheragents",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/networkwatchers/pingmeshes": {
      "name": "microsoft.network/networkwatchers/pingmeshes",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/p2svpngateways": {
      "name": "microsoft.network/p2svpngateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/privatednszones": {
      "name": "microsoft.network/privatednszones",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/privatednszones/virtualnetworklinks": {
      "name": "microsoft.network/privatednszones/virtualnetworklinks",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/privateendpointredirectmaps": {
      "name": "microsoft.network/privateendpointredirectmaps",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/privateendpoints": {
      "name": "microsoft.network/privateendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/privatelinkservices": {
      "name": "microsoft.network/privatelinkservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/publicipaddresses": {
      "name": "microsoft.network/publicipaddresses",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/publicipprefixes": {
      "name": "microsoft.network/publicipprefixes",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/routefilters": {
      "name": "microsoft.network/routefilters",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/routetables": {
      "name": "microsoft.network/routetables",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/sampleresources": {
      "name": "microsoft.network/sampleresources",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/securitypartnerproviders": {
      "name": "microsoft.network/securitypartnerproviders",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/serviceendpointpolicies": {
      "name": "microsoft.network/serviceendpointpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/servicegateways": {
      "name": "microsoft.network/servicegateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/trafficmanagerprofiles": {
      "name": "microsoft.network/trafficmanagerprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualhubs": {
      "name": "microsoft.network/virtualhubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualhubs/bgpconnections": {
      "name": "microsoft.network/virtualhubs/bgpconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualhubs/ipconfigurations": {
      "name": "microsoft.network/virtualhubs/ipconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualnetworkappliances": {
      "name": "microsoft.network/virtualnetworkappliances",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualnetworkgateways": {
      "name": "microsoft.network/virtualnetworkgateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualnetworks": {
      "name": "microsoft.network/virtualnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualnetworktaps": {
      "name": "microsoft.network/virtualnetworktaps",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualrouters": {
      "name": "microsoft.network/virtualrouters",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/virtualwans": {
      "name": "microsoft.network/virtualwans",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/vpngateways": {
      "name": "microsoft.network/vpngateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/vpnserverconfigurations": {
      "name": "microsoft.network/vpnserverconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.network/vpnsites": {
      "name": "microsoft.network/vpnsites",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkanalytics/dataconnectors": {
      "name": "microsoft.networkanalytics/dataconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkanalytics/datalakehouses": {
      "name": "microsoft.networkanalytics/datalakehouses",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkanalytics/dataproducts": {
      "name": "microsoft.networkanalytics/dataproducts",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkanalytics/metricsingestionendpoints": {
      "name": "microsoft.networkanalytics/metricsingestionendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/baremetalmachines": {
      "name": "microsoft.networkcloud/baremetalmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/cloudservicesnetworks": {
      "name": "microsoft.networkcloud/cloudservicesnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/clustermanagers": {
      "name": "microsoft.networkcloud/clustermanagers",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/clusters": {
      "name": "microsoft.networkcloud/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/clusters/baremetalmachinekeysets": {
      "name": "microsoft.networkcloud/clusters/baremetalmachinekeysets",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/clusters/bmckeysets": {
      "name": "microsoft.networkcloud/clusters/bmckeysets",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/clusters/metricsconfigurations": {
      "name": "microsoft.networkcloud/clusters/metricsconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/defaultcninetworks": {
      "name": "microsoft.networkcloud/defaultcninetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/edgeclusters": {
      "name": "microsoft.networkcloud/edgeclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/edgeclusters/nodes": {
      "name": "microsoft.networkcloud/edgeclusters/nodes",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/hybridaksclusters": {
      "name": "microsoft.networkcloud/hybridaksclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/kubernetesclusters": {
      "name": "microsoft.networkcloud/kubernetesclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/kubernetesclusters/agentpools": {
      "name": "microsoft.networkcloud/kubernetesclusters/agentpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/kubernetesclusters/features": {
      "name": "microsoft.networkcloud/kubernetesclusters/features",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/l2networks": {
      "name": "microsoft.networkcloud/l2networks",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/l3networks": {
      "name": "microsoft.networkcloud/l3networks",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/racks": {
      "name": "microsoft.networkcloud/racks",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/registrationhubs": {
      "name": "microsoft.networkcloud/registrationhubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/registrationhubs/images": {
      "name": "microsoft.networkcloud/registrationhubs/images",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/registrationhubs/machines": {
      "name": "microsoft.networkcloud/registrationhubs/machines",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/storageappliances": {
      "name": "microsoft.networkcloud/storageappliances",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/trunkednetworks": {
      "name": "microsoft.networkcloud/trunkednetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/virtualmachines": {
      "name": "microsoft.networkcloud/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/virtualmachines/consoles": {
      "name": "microsoft.networkcloud/virtualmachines/consoles",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkcloud/volumes": {
      "name": "microsoft.networkcloud/volumes",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkfunction/azuretrafficcollectors": {
      "name": "microsoft.networkfunction/azuretrafficcollectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkfunction/azuretrafficcollectors/collectorpolicies": {
      "name": "microsoft.networkfunction/azuretrafficcollectors/collectorpolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkfunction/meshvpns": {
      "name": "microsoft.networkfunction/meshvpns",
      "table": "resources",
      "properties": []
    },
    "microsoft.networkfunction/vpnbranches": {
      "name": "microsoft.networkfunction/vpnbranches",
      "table": "resources",
      "properties": []
    },
    "microsoft.nexusidentity/identitycontrollers": {
      "name": "microsoft.nexusidentity/identitycontrollers",
      "table": "resources",
      "properties": []
    },
    "microsoft.nexusidentity/identitysets": {
      "name": "microsoft.nexusidentity/identitysets",
      "table": "resources",
      "properties": []
    },
    "microsoft.notificationhubs/namespaces": {
      "name": "microsoft.notificationhubs/namespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.notificationhubs/namespaces/notificationhubs": {
      "name": "microsoft.notificationhubs/namespaces/notificationhubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.nutanix/interfaces": {
      "name": "microsoft.nutanix/interfaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.nutanix/nodes": {
      "name": "microsoft.nutanix/nodes",
      "table": "resources",
      "properties": []
    },
    "microsoft.objectstore/osnamespaces": {
      "name": "microsoft.objectstore/osnamespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.offazure/appliances": {
      "name": "microsoft.offazure/appliances",
      "table": "resources",
      "properties": []
    },
    "microsoft.offazure/hypervsites": {
      "name": "microsoft.offazure/hypervsites",
      "table": "resources",
      "properties": []
    },
    "microsoft.offazure/importsites": {
      "name": "microsoft.offazure/importsites",
      "table": "resources",
      "properties": []
    },
    "microsoft.offazure/mastersites": {
      "name": "microsoft.offazure/mastersites",
      "table": "resources",
      "properties": []
    },
    "microsoft.offazure/serversites": {
      "name": "microsoft.offazure/serversites",
      "table": "resources",
      "properties": []
    },
    "microsoft.offazure/vmwaresites": {
      "name": "microsoft.offazure/vmwaresites",
      "table": "resources",
      "properties": []
    },
    "microsoft.offazurespringboot/springbootsites": {
      "name": "microsoft.offazurespringboot/springbootsites",
      "table": "resources",
      "properties": []
    },
    "microsoft.onlineexperimentation/workspaces": {
      "name": "microsoft.onlineexperimentation/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.openenergyplatform/energyservices": {
      "name": "microsoft.openenergyplatform/energyservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.openlogisticsplatform/applicationmanagers": {
      "name": "microsoft.openlogisticsplatform/applicationmanagers",
      "table": "resources",
      "properties": []
    },
    "microsoft.openlogisticsplatform/applicationworkspaces": {
      "name": "microsoft.openlogisticsplatform/applicationworkspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.openlogisticsplatform/workspaces": {
      "name": "microsoft.openlogisticsplatform/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.operationalinsights/clusters": {
      "name": "microsoft.operationalinsights/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.operationalinsights/querypacks": {
      "name": "microsoft.operationalinsights/querypacks",
      "table": "resources",
      "properties": []
    },
    "microsoft.operationalinsights/workspaces": {
      "name": "microsoft.operationalinsights/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.operationsmanagement/solutions": {
      "name": "microsoft.operationsmanagement/solutions",
      "table": "resources",
      "properties": []
    },
    "microsoft.operationsmanagement/views": {
      "name": "microsoft.operationsmanagement/views",
      "table": "resources",
      "properties": []
    },
    "microsoft.oraclediscovery/oraclesites": {
      "name": "microsoft.oraclediscovery/oraclesites",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/cloudaccessrouters": {
      "name": "microsoft.orbital/cloudaccessrouters",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/contactprofiles": {
      "name": "microsoft.orbital/contactprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/edgesites": {
      "name": "microsoft.orbital/edgesites",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/geocatalogs": {
      "name": "microsoft.orbital/geocatalogs",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/groundstations": {
      "name": "microsoft.orbital/groundstations",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/l2connections": {
      "name": "microsoft.orbital/l2connections",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/sdwancontrollers": {
      "name": "microsoft.orbital/sdwancontrollers",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/spacecrafts": {
      "name": "microsoft.orbital/spacecrafts",
      "table": "resources",
      "properties": []
    },
    "microsoft.orbital/terminals": {
      "name": "microsoft.orbital/terminals",
      "table": "resources",
      "properties": []
    },
    "microsoft.peering/peerings": {
      "name": "microsoft.peering/peerings",
      "table": "resources",
      "properties": []
    },
    "microsoft.peering/peeringservices": {
      "name": "microsoft.peering/peeringservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.pki/pkis": {
      "name": "microsoft.pki/pkis",
      "table": "resources",
      "properties": []
    },
    "microsoft.playfab/playeraccountpools": {
      "name": "microsoft.playfab/playeraccountpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.playfab/titles": {
      "name": "microsoft.playfab/titles",
      "table": "resources",
      "properties": []
    },
    "microsoft.portal/dashboards": {
      "name": "microsoft.portal/dashboards",
      "table": "resources",
      "properties": []
    },
    "microsoft.portalsdk/rootresources": {
      "name": "microsoft.portalsdk/rootresources",
      "table": "resources",
      "properties": []
    },
    "microsoft.portalservices/dashboards": {
      "name": "microsoft.portalservices/dashboards",
      "table": "resources",
      "properties": []
    },
    "microsoft.portalservices/extensions": {
      "name": "microsoft.portalservices/extensions",
      "table": "resources",
      "properties": []
    },
    "microsoft.portalservices/extensions/deployments": {
      "name": "microsoft.portalservices/extensions/deployments",
      "table": "resources",
      "properties": []
    },
    "microsoft.portalservices/extensions/slots": {
      "name": "microsoft.portalservices/extensions/slots",
      "table": "resources",
      "properties": []
    },
    "microsoft.portalservices/extensions/versions": {
      "name": "microsoft.portalservices/extensions/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.powerbi/privatelinkservicesforpowerbi": {
      "name": "microsoft.powerbi/privatelinkservicesforpowerbi",
      "table": "resources",
      "properties": []
    },
    "microsoft.powerbi/tenants": {
      "name": "microsoft.powerbi/tenants",
      "table": "resources",
      "properties": []
    },
    "microsoft.powerbi/workspacecollections": {
      "name": "microsoft.powerbi/workspacecollections",
      "table": "resources",
      "properties": []
    },
    "microsoft.powerbidedicated/autoscalevcores": {
      "name": "microsoft.powerbidedicated/autoscalevcores",
      "table": "resources",
      "properties": []
    },
    "microsoft.powerbidedicated/capacities": {
      "name": "microsoft.powerbidedicated/capacities",
      "table": "resources",
      "properties": []
    },
    "microsoft.powerplatform/accounts": {
      "name": "microsoft.powerplatform/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.powerplatform/enterprisepolicies": {
      "name": "microsoft.powerplatform/enterprisepolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.premonition/libraries": {
      "name": "microsoft.premonition/libraries",
      "table": "resources",
      "properties": []
    },
    "microsoft.premonition/libraries/analyses": {
      "name": "microsoft.premonition/libraries/analyses",
      "table": "resources",
      "properties": []
    },
    "microsoft.premonition/libraries/samples": {
      "name": "microsoft.premonition/libraries/samples",
      "table": "resources",
      "properties": []
    },
    "microsoft.professionalservice/resources": {
      "name": "microsoft.professionalservice/resources",
      "table": "resources",
      "properties": []
    },
    "microsoft.programmableconnectivity/gateways": {
      "name": "microsoft.programmableconnectivity/gateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.programmableconnectivity/operatorapiconnections": {
      "name": "microsoft.programmableconnectivity/operatorapiconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.programmableconnectivity/operatorconnections": {
      "name": "microsoft.programmableconnectivity/operatorconnections",
      "table": "resources",
      "properties": []
    },
    "microsoft.proposal/proposals": {
      "name": "microsoft.proposal/proposals",
      "table": "resources",
      "properties": []
    },
    "microsoft.providerhub/providermonitorsettings": {
      "name": "microsoft.providerhub/providermonitorsettings",
      "table": "resources",
      "properties": []
    },
    "microsoft.purview/accounts": {
      "name": "microsoft.purview/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.quantum/provideraccounts": {
      "name": "microsoft.quantum/provideraccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.quantum/workspaces": {
      "name": "microsoft.quantum/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.recommendationsservice/accounts": {
      "name": "microsoft.recommendationsservice/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.recommendationsservice/accounts/modeling": {
      "name": "microsoft.recommendationsservice/accounts/modeling",
      "table": "resources",
      "properties": []
    },
    "microsoft.recommendationsservice/accounts/serviceendpoints": {
      "name": "microsoft.recommendationsservice/accounts/serviceendpoints",
      "table": "resources",
      "properties": []
    },
    "microsoft.redhatopenshift/hcpopenshiftclusters": {
      "name": "microsoft.redhatopenshift/hcpopenshiftclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.redhatopenshift/hcpopenshiftclusters/nodepools": {
      "name": "microsoft.redhatopenshift/hcpopenshiftclusters/nodepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.redhatopenshift/openshiftclusters": {
      "name": "microsoft.redhatopenshift/openshiftclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.relay/namespaces": {
      "name": "microsoft.relay/namespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.remoteapp/collections": {
      "name": "microsoft.remoteapp/collections",
      "table": "resources",
      "properties": []
    },
    "microsoft.resiliency/chaosexperiments": {
      "name": "microsoft.resiliency/chaosexperiments",
      "table": "resources",
      "properties": []
    },
    "microsoft.resourceconnector/appliances": {
      "name": "microsoft.resourceconnector/appliances",
      "table": "resources",
      "properties": []
    },
    "microsoft.resourcegraph/queries": {
      "name": "microsoft.resourcegraph/queries",
      "table": "resources",
      "properties": []
    },
    "microsoft.resources/deploymentscripts": {
      "name": "microsoft.resources/deploymentscripts",
      "table": "resources",
      "properties": []
    },
    "microsoft.resources/mobobrokers": {
      "name": "microsoft.resources/mobobrokers",
      "table": "resources",
      "properties": []
    },
    "microsoft.resources/templatespecs": {
      "name": "microsoft.resources/templatespecs",
      "table": "resources",
      "properties": []
    },
    "microsoft.resources/templatespecs/versions": {
      "name": "microsoft.resources/templatespecs/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.saas/applications": {
      "name": "microsoft.saas/applications",
      "table": "resources",
      "properties": []
    },
    "microsoft.saas/resources": {
      "name": "microsoft.saas/resources",
      "table": "resources",
      "properties": []
    },
    "microsoft.saashub/cloudservices": {
      "name": "microsoft.saashub/cloudservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.scom/managedinstances": {
      "name": "microsoft.scom/managedinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.scvmm/availabilitysets": {
      "name": "microsoft.scvmm/availabilitysets",
      "table": "resources",
      "properties": []
    },
    "microsoft.scvmm/clouds": {
      "name": "microsoft.scvmm/clouds",
      "table": "resources",
      "properties": []
    },
    "microsoft.scvmm/virtualmachines": {
      "name": "microsoft.scvmm/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.scvmm/virtualmachines/extensions": {
      "name": "microsoft.scvmm/virtualmachines/extensions",
      "table": "resources",
      "properties": []
    },
    "microsoft.scvmm/virtualmachinetemplates": {
      "name": "microsoft.scvmm/virtualmachinetemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.scvmm/virtualnetworks": {
      "name": "microsoft.scvmm/virtualnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.scvmm/vmmservers": {
      "name": "microsoft.scvmm/vmmservers",
      "table": "resources",
      "properties": []
    },
    "microsoft.search/searchservices": {
      "name": "microsoft.search/searchservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.secretmanagementsampleprovider/forecasts": {
      "name": "microsoft.secretmanagementsampleprovider/forecasts",
      "table": "resources",
      "properties": []
    },
    "microsoft.secretsynccontroller/azurekeyvaultsecretproviderclasses": {
      "name": "microsoft.secretsynccontroller/azurekeyvaultsecretproviderclasses",
      "table": "resources",
      "properties": []
    },
    "microsoft.secretsynccontroller/secretsyncs": {
      "name": "microsoft.secretsynccontroller/secretsyncs",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/assignments": {
      "name": "microsoft.security/assignments",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/automations": {
      "name": "microsoft.security/automations",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/customassessmentautomations": {
      "name": "microsoft.security/customassessmentautomations",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/customentitystoreassignments": {
      "name": "microsoft.security/customentitystoreassignments",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/datascanners": {
      "name": "microsoft.security/datascanners",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/iotsecuritysolutions": {
      "name": "microsoft.security/iotsecuritysolutions",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/privatelinks": {
      "name": "microsoft.security/privatelinks",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/securityconnectors": {
      "name": "microsoft.security/securityconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/standards": {
      "name": "microsoft.security/standards",
      "table": "resources",
      "properties": []
    },
    "microsoft.security/vmscanners": {
      "name": "microsoft.security/vmscanners",
      "table": "resources",
      "properties": []
    },
    "microsoft.securitycopilot/capacities": {
      "name": "microsoft.securitycopilot/capacities",
      "table": "resources",
      "properties": []
    },
    "microsoft.securitydetonation/chambers": {
      "name": "microsoft.securitydetonation/chambers",
      "table": "resources",
      "properties": []
    },
    "microsoft.securitydevops/azuredevopsconnectors": {
      "name": "microsoft.securitydevops/azuredevopsconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.securitydevops/githubconnectors": {
      "name": "microsoft.securitydevops/githubconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.securitydevops/gitlabconnectors": {
      "name": "microsoft.securitydevops/gitlabconnectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.securityplatform/accountlinks": {
      "name": "microsoft.securityplatform/accountlinks",
      "table": "resources",
      "properties": []
    },
    "microsoft.sentinelplatformservices/sentinelplatformservices": {
      "name": "microsoft.sentinelplatformservices/sentinelplatformservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicebus/namespaces": {
      "name": "microsoft.servicebus/namespaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicefabric/clusters": {
      "name": "microsoft.servicefabric/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicefabric/containergroupsets": {
      "name": "microsoft.servicefabric/containergroupsets",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicefabric/managedclusters": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/managedclusters"
    },
    "microsoft.servicefabricmesh/applications": {
      "name": "microsoft.servicefabricmesh/applications",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicefabricmesh/gateways": {
      "name": "microsoft.servicefabricmesh/gateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicefabricmesh/networks": {
      "name": "microsoft.servicefabricmesh/networks",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicefabricmesh/secrets": {
      "name": "microsoft.servicefabricmesh/secrets",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicefabricmesh/volumes": {
      "name": "microsoft.servicefabricmesh/volumes",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicenetworking/trafficcontrollers": {
      "name": "microsoft.servicenetworking/trafficcontrollers",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicenetworking/trafficcontrollers/associations": {
      "name": "microsoft.servicenetworking/trafficcontrollers/associations",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicenetworking/trafficcontrollers/frontends": {
      "name": "microsoft.servicenetworking/trafficcontrollers/frontends",
      "table": "resources",
      "properties": []
    },
    "microsoft.servicenetworking/trafficcontrollers/securitypolicies": {
      "name": "microsoft.servicenetworking/trafficcontrollers/securitypolicies",
      "table": "resources",
      "properties": []
    },
    "microsoft.serviceshub/connectors": {
      "name": "microsoft.serviceshub/connectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.signalrservice/signalr": {
      "name": "microsoft.signalrservice/signalr",
      "table": "resources",
      "properties": []
    },
    "microsoft.signalrservice/signalr/replicas": {
      "name": "microsoft.signalrservice/signalr/replicas",
      "table": "resources",
      "properties": []
    },
    "microsoft.signalrservice/webpubsub": {
      "name": "microsoft.signalrservice/webpubsub",
      "table": "resources",
      "properties": []
    },
    "microsoft.signalrservice/webpubsub/replicas": {
      "name": "microsoft.signalrservice/webpubsub/replicas",
      "table": "resources",
      "properties": []
    },
    "microsoft.singularity/accounts": {
      "name": "microsoft.singularity/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.skytap/nodes": {
      "name": "microsoft.skytap/nodes",
      "table": "resources",
      "properties": []
    },
    "microsoft.softwareplan/softwarelicenses": {
      "name": "microsoft.softwareplan/softwarelicenses",
      "table": "resources",
      "properties": []
    },
    "microsoft.softwareplan/softwaresubscriptions": {
      "name": "microsoft.softwareplan/softwaresubscriptions",
      "table": "resources",
      "properties": []
    },
    "microsoft.solutions/appliancedefinitions": {
      "name": "microsoft.solutions/appliancedefinitions",
      "table": "resources",
      "properties": []
    },
    "microsoft.solutions/appliances": {
      "name": "microsoft.solutions/appliances",
      "table": "resources",
      "properties": []
    },
    "microsoft.solutions/applicationdefinitions": {
      "name": "microsoft.solutions/applicationdefinitions",
      "table": "resources",
      "properties": []
    },
    "microsoft.solutions/applications": {
      "name": "microsoft.solutions/applications",
      "table": "resources",
      "properties": []
    },
    "microsoft.solutions/jitrequests": {
      "name": "microsoft.solutions/jitrequests",
      "table": "resources",
      "properties": []
    },
    "microsoft.sovereign/landingzoneaccounts": {
      "name": "microsoft.sovereign/landingzoneaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.spoolservice/spools": {
      "name": "microsoft.spoolservice/spools",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/instancepools": {
      "name": "microsoft.sql/instancepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/managedinstances": {
      "name": "microsoft.sql/managedinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/managedinstances/databases": {
      "name": "microsoft.sql/managedinstances/databases",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/servers": {
      "name": "microsoft.sql/servers",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/servers/databases": {
      "name": "microsoft.sql/servers/databases",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/servers/elasticpools": {
      "name": "microsoft.sql/servers/elasticpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/servers/jobaccounts": {
      "name": "microsoft.sql/servers/jobaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/servers/jobagents": {
      "name": "microsoft.sql/servers/jobagents",
      "table": "resources",
      "properties": []
    },
    "microsoft.sql/virtualclusters": {
      "name": "microsoft.sql/virtualclusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.sqlvirtualmachine/sqlvirtualmachinegroups": {
      "name": "microsoft.sqlvirtualmachine/sqlvirtualmachinegroups",
      "table": "resources",
      "properties": []
    },
    "microsoft.sqlvirtualmachine/sqlvirtualmachines": {
      "name": "microsoft.sqlvirtualmachine/sqlvirtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.standbypool/standbycontainergrouppools": {
      "name": "microsoft.standbypool/standbycontainergrouppools",
      "table": "resources",
      "properties": []
    },
    "microsoft.standbypool/standbyvirtualmachinepools": {
      "name": "microsoft.standbypool/standbyvirtualmachinepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.storage/datamovers": {
      "name": "microsoft.storage/datamovers",
      "table": "resources",
      "properties": []
    },
    "microsoft.storage/storageaccounts": {
      "name": "microsoft.storage/storageaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.storage/storageaccounts/connectors": {
      "name": "microsoft.storage/storageaccounts/connectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.storage/storageaccounts/datashares": {
      "name": "microsoft.storage/storageaccounts/datashares",
      "table": "resources",
      "properties": []
    },
    "microsoft.storage/storagetasks": {
      "name": "microsoft.storage/storagetasks",
      "table": "resources",
      "properties": []
    },
    "microsoft.storageactions/storagetasks": {
      "name": "microsoft.storageactions/storagetasks",
      "table": "resources",
      "properties": []
    },
    "microsoft.storagecache/amlfilesystems": {
      "name": "microsoft.storagecache/amlfilesystems",
      "table": "resources",
      "properties": []
    },
    "microsoft.storagecache/caches": {
      "name": "microsoft.storagecache/caches",
      "table": "resources",
      "properties": []
    },
    "microsoft.storagediscovery/storagediscoveryworkspaces": {
      "name": "microsoft.storagediscovery/storagediscoveryworkspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.storageinsights/storagecollectionrules": {
      "name": "microsoft.storageinsights/storagecollectionrules",
      "table": "resources",
      "properties": []
    },
    "microsoft.storagemover/storagemovers": {
      "name": "microsoft.storagemover/storagemovers",
      "table": "resources",
      "properties": []
    },
    "microsoft.storagepool/diskpools": {
      "name": "microsoft.storagepool/diskpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.storagesync/storagesyncservices": {
      "name": "microsoft.storagesync/storagesyncservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.storagetasks/storagetasks": {
      "name": "microsoft.storagetasks/storagetasks",
      "table": "resources",
      "properties": []
    },
    "microsoft.storsimple/managers": {
      "name": "microsoft.storsimple/managers",
      "table": "resources",
      "properties": []
    },
    "microsoft.streamanalytics/clusters": {
      "name": "microsoft.streamanalytics/clusters",
      "table": "resources",
      "properties": []
    },
    "microsoft.streamanalytics/streamingjobs": {
      "name": "microsoft.streamanalytics/streamingjobs",
      "table": "resources",
      "properties": []
    },
    "microsoft.sustainabilityservices/calculations": {
      "name": "microsoft.sustainabilityservices/calculations",
      "table": "resources",
      "properties": []
    },
    "microsoft.swiftlet/virtualmachines": {
      "name": "microsoft.swiftlet/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.swiftlet/virtualmachinesnapshots": {
      "name": "microsoft.swiftlet/virtualmachinesnapshots",
      "table": "resources",
      "properties": []
    },
    "microsoft.symphony/instances": {
      "name": "microsoft.symphony/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.symphony/solutions": {
      "name": "microsoft.symphony/solutions",
      "table": "resources",
      "properties": []
    },
    "microsoft.symphony/targets": {
      "name": "microsoft.symphony/targets",
      "table": "resources",
      "properties": []
    },
    "microsoft.synapse/privatelinkhubs": {
      "name": "microsoft.synapse/privatelinkhubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.synapse/workspaces": {
      "name": "microsoft.synapse/workspaces",
      "table": "resources",
      "properties": []
    },
    "microsoft.synapse/workspaces/bigdatapools": {
      "name": "microsoft.synapse/workspaces/bigdatapools",
      "table": "resources",
      "properties": []
    },
    "microsoft.synapse/workspaces/kustopools": {
      "name": "microsoft.synapse/workspaces/kustopools",
      "table": "resources",
      "properties": []
    },
    "microsoft.synapse/workspaces/sqlpools": {
      "name": "microsoft.synapse/workspaces/sqlpools",
      "table": "resources",
      "properties": []
    },
    "microsoft.syntex/accounts": {
      "name": "microsoft.syntex/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.syntex/documentprocessors": {
      "name": "microsoft.syntex/documentprocessors",
      "table": "resources",
      "properties": []
    },
    "microsoft.systemintegritymonitoring/simhubs": {
      "name": "microsoft.systemintegritymonitoring/simhubs",
      "table": "resources",
      "properties": []
    },
    "microsoft.systemintegritymonitoring/simhubs/deviceprofiles": {
      "name": "microsoft.systemintegritymonitoring/simhubs/deviceprofiles",
      "table": "resources",
      "properties": []
    },
    "microsoft.testbase/testbaseaccounts": {
      "name": "microsoft.testbase/testbaseaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.testbase/testbaseaccounts/packages": {
      "name": "microsoft.testbase/testbaseaccounts/packages",
      "table": "resources",
      "properties": []
    },
    "microsoft.throttling/throttlingaccounts": {
      "name": "microsoft.throttling/throttlingaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.throttling/throttlingaccounts/rules": {
      "name": "microsoft.throttling/throttlingaccounts/rules",
      "table": "resources",
      "properties": []
    },
    "microsoft.timeseriesinsights/environments": {
      "name": "microsoft.timeseriesinsights/environments",
      "table": "resources",
      "properties": []
    },
    "microsoft.timeseriesinsights/environments/eventsources": {
      "name": "microsoft.timeseriesinsights/environments/eventsources",
      "table": "resources",
      "properties": []
    },
    "microsoft.timeseriesinsights/environments/referencedatasets": {
      "name": "microsoft.timeseriesinsights/environments/referencedatasets",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/activations": {
      "name": "microsoft.toolchainorchestrator/activations",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/campaigns": {
      "name": "microsoft.toolchainorchestrator/campaigns",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/campaigns/versions": {
      "name": "microsoft.toolchainorchestrator/campaigns/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/catalogs": {
      "name": "microsoft.toolchainorchestrator/catalogs",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/catalogs/versions": {
      "name": "microsoft.toolchainorchestrator/catalogs/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/diagnostics": {
      "name": "microsoft.toolchainorchestrator/diagnostics",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/instances": {
      "name": "microsoft.toolchainorchestrator/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/instances/versions": {
      "name": "microsoft.toolchainorchestrator/instances/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/solutions": {
      "name": "microsoft.toolchainorchestrator/solutions",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/solutions/versions": {
      "name": "microsoft.toolchainorchestrator/solutions/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/targets": {
      "name": "microsoft.toolchainorchestrator/targets",
      "table": "resources",
      "properties": []
    },
    "microsoft.toolchainorchestrator/targets/versions": {
      "name": "microsoft.toolchainorchestrator/targets/versions",
      "table": "resources",
      "properties": []
    },
    "microsoft.updatemanager/inventoryconfigurations": {
      "name": "microsoft.updatemanager/inventoryconfigurations",
      "table": "resources",
      "properties": []
    },
    "microsoft.updatemanager/updaterules": {
      "name": "microsoft.updatemanager/updaterules",
      "table": "resources",
      "properties": []
    },
    "microsoft.usagebilling/accounts": {
      "name": "microsoft.usagebilling/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.verifiedid/authorities": {
      "name": "microsoft.verifiedid/authorities",
      "table": "resources",
      "properties": []
    },
    "microsoft.videoindexer/accounts": {
      "name": "microsoft.videoindexer/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.virtualmachineimages/imagetemplates": {
      "name": "microsoft.virtualmachineimages/imagetemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.visualstudio/account": {
      "name": "microsoft.visualstudio/account",
      "table": "resources",
      "properties": []
    },
    "microsoft.visualstudio/account/extension": {
      "name": "microsoft.visualstudio/account/extension",
      "table": "resources",
      "properties": []
    },
    "microsoft.visualstudio/account/project": {
      "name": "microsoft.visualstudio/account/project",
      "table": "resources",
      "properties": []
    },
    "microsoft.vmware/arczones": {
      "name": "microsoft.vmware/arczones",
      "table": "resources",
      "properties": []
    },
    "microsoft.vmware/resourcepools": {
      "name": "microsoft.vmware/resourcepools",
      "table": "resources",
      "properties": []
    },
    "microsoft.vmware/vcenters": {
      "name": "microsoft.vmware/vcenters",
      "table": "resources",
      "properties": []
    },
    "microsoft.vmware/virtualmachines": {
      "name": "microsoft.vmware/virtualmachines",
      "table": "resources",
      "properties": []
    },
    "microsoft.vmware/virtualmachinetemplates": {
      "name": "microsoft.vmware/virtualmachinetemplates",
      "table": "resources",
      "properties": []
    },
    "microsoft.vmware/virtualnetworks": {
      "name": "microsoft.vmware/virtualnetworks",
      "table": "resources",
      "properties": []
    },
    "microsoft.voiceservices/communicationsgateways": {
      "name": "microsoft.voiceservices/communicationsgateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.voiceservices/communicationsgateways/contacts": {
      "name": "microsoft.voiceservices/communicationsgateways/contacts",
      "table": "resources",
      "properties": []
    },
    "microsoft.voiceservices/communicationsgateways/testlines": {
      "name": "microsoft.voiceservices/communicationsgateways/testlines",
      "table": "resources",
      "properties": []
    },
    "microsoft.voiceservices/operatorvoicemailinstances": {
      "name": "microsoft.voiceservices/operatorvoicemailinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.vsonline/accounts": {
      "name": "microsoft.vsonline/accounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.vsonline/plans": {
      "name": "microsoft.vsonline/plans",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/apimanagementaccounts": {
      "name": "microsoft.web/apimanagementaccounts",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/apimanagementaccounts/apis": {
      "name": "microsoft.web/apimanagementaccounts/apis",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/certificates": {
      "name": "microsoft.web/certificates",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/connectiongateways": {
      "name": "microsoft.web/connectiongateways",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/connections": {
      "name": "microsoft.web/connections",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/containerapps": {
      "name": "microsoft.web/containerapps",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/customapis": {
      "name": "microsoft.web/customapis",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/hostingenvironments": {
      "name": "microsoft.web/hostingenvironments",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/kubeenvironments": {
      "name": "microsoft.web/kubeenvironments",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/serverfarms": {
      "name": "microsoft.web/serverfarms",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/sites": {
      "name": "microsoft.web/sites",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/sites/certificates": {
      "name": "microsoft.web/sites/certificates",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/sites/slots": {
      "name": "microsoft.web/sites/slots",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/staticsites": {
      "name": "microsoft.web/staticsites",
      "table": "resources",
      "properties": []
    },
    "microsoft.web/workerapps": {
      "name": "microsoft.web/workerapps",
      "table": "resources",
      "properties": []
    },
    "microsoft.weightsandbiases/instances": {
      "name": "microsoft.weightsandbiases/instances",
      "table": "resources",
      "properties": []
    },
    "microsoft.whiteboxcadlprovider/whiteboxresources": {
      "name": "microsoft.whiteboxcadlprovider/whiteboxresources",
      "table": "resources",
      "properties": []
    },
    "microsoft.windows365/cloudpcdelegatedmsis": {
      "name": "microsoft.windows365/cloudpcdelegatedmsis",
      "table": "resources",
      "properties": []
    },
    "microsoft.windowsesu/multipleactivationkeys": {
      "name": "microsoft.windowsesu/multipleactivationkeys",
      "table": "resources",
      "properties": []
    },
    "microsoft.windowsiot/deviceservices": {
      "name": "microsoft.windowsiot/deviceservices",
      "table": "resources",
      "properties": []
    },
    "microsoft.windowspushnotificationservices/registrations": {
      "name": "microsoft.windowspushnotificationservices/registrations",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloadbuilder/migrationagents": {
      "name": "microsoft.workloadbuilder/migrationagents",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloadbuilder/workloads": {
      "name": "microsoft.workloadbuilder/workloads",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/connectors": {
      "name": "microsoft.workloads/connectors",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/connectors/acssbackups": {
      "name": "microsoft.workloads/connectors/acssbackups",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/connectors/amsinsights": {
      "name": "microsoft.workloads/connectors/amsinsights",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/connectors/sapvirtualinstancemonitors": {
      "name": "microsoft.workloads/connectors/sapvirtualinstancemonitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/epicvirtualinstances": {
      "name": "microsoft.workloads/epicvirtualinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/epicvirtualinstances/databaseinstances": {
      "name": "microsoft.workloads/epicvirtualinstances/databaseinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/epicvirtualinstances/hyperspacewebinstances": {
      "name": "microsoft.workloads/epicvirtualinstances/hyperspacewebinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/epicvirtualinstances/presentationinstances": {
      "name": "microsoft.workloads/epicvirtualinstances/presentationinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/epicvirtualinstances/sharedinstances": {
      "name": "microsoft.workloads/epicvirtualinstances/sharedinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/epicvirtualinstances/wssinstances": {
      "name": "microsoft.workloads/epicvirtualinstances/wssinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/insights": {
      "name": "microsoft.workloads/insights",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/instancegroupmonitors": {
      "name": "microsoft.workloads/instancegroupmonitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/instancehealthdefinitions": {
      "name": "microsoft.workloads/instancehealthdefinitions",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/instancemonitors": {
      "name": "microsoft.workloads/instancemonitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/monitors": {
      "name": "microsoft.workloads/monitors",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/oraclevirtualinstances": {
      "name": "microsoft.workloads/oraclevirtualinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/oraclevirtualinstances/databaseinstances": {
      "name": "microsoft.workloads/oraclevirtualinstances/databaseinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/phpworkloads": {
      "name": "microsoft.workloads/phpworkloads",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/sapdiscoverysites": {
      "name": "microsoft.workloads/sapdiscoverysites",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/sapdiscoverysites/sapinstances": {
      "name": "microsoft.workloads/sapdiscoverysites/sapinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/sapvirtualinstances": {
      "name": "microsoft.workloads/sapvirtualinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/sapvirtualinstances/applicationinstances": {
      "name": "microsoft.workloads/sapvirtualinstances/applicationinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/sapvirtualinstances/centralinstances": {
      "name": "microsoft.workloads/sapvirtualinstances/centralinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/sapvirtualinstances/databaseinstances": {
      "name": "microsoft.workloads/sapvirtualinstances/databaseinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/virtualinstances": {
      "name": "microsoft.workloads/virtualinstances",
      "table": "resources",
      "properties": []
    },
    "microsoft.workloads/virtualinstances/components": {
      "name": "microsoft.workloads/virtualinstances/components",
      "table": "resources",
      "properties": []
    },
    "microsoft.zerotrustsegmentation/segmentationmanagers": {
      "name": "microsoft.zerotrustsegmentation/segmentationmanagers",
      "table": "resources",
      "properties": []
    },
    "microsoftdnsagent": {
      "name": "microsoftdnsagent",
      "table": "resources",
      "properties": []
    },
    "microsoftmonitoringagent": {
      "name": "microsoftmonitoringagent",
      "table": "resources",
      "properties": []
    },
    "mongodb.atlas/organizations": {
      "name": "mongodb.atlas/organizations",
      "table": "resources",
      "properties": []
    },
    "neon.postgres/organizations": {
      "name": "neon.postgres/organizations",
      "table": "resources",
      "properties": []
    },
    "networkwatcheragentlinux": {
      "name": "networkwatcheragentlinux",
      "table": "resources",
      "properties": []
    },
    "networkwatcheragentwindows": {
      "name": "networkwatcheragentwindows",
      "table": "resources",
      "properties": []
    },
    "newrelic.observability/monitors": {
      "name": "newrelic.observability/monitors",
      "table": "resources",
      "properties": []
    },
    "nginx.nginxplus/nginxdeployments": {
      "name": "nginx.nginxplus/nginxdeployments",
      "table": "resources",
      "properties": []
    },
    "omsagentforlinux": {
      "name": "omsagentforlinux",
      "table": "resources",
      "properties": []
    },
    "oracle.database/autonomousdatabases": {
      "name": "oracle.database/autonomousdatabases",
      "table": "resources",
      "properties": []
    },
    "oracle.database/cloudexadatainfrastructures": {
      "name": "oracle.database/cloudexadatainfrastructures",
      "table": "resources",
      "properties": []
    },
    "oracle.database/cloudvmclusters": {
      "name": "oracle.database/cloudvmclusters",
      "table": "resources",
      "properties": []
    },
    "oracle.database/dbsystems": {
      "name": "oracle.database/dbsystems",
      "table": "resources",
      "properties": []
    },
    "oracle.database/exadbvmclusters": {
      "name": "oracle.database/exadbvmclusters",
      "table": "resources",
      "properties": []
    },
    "oracle.database/exascaledbstoragevaults": {
      "name": "oracle.database/exascaledbstoragevaults",
      "table": "resources",
      "properties": []
    },
    "oracle.database/networkanchors": {
      "name": "oracle.database/networkanchors",
      "table": "resources",
      "properties": []
    },
    "oracle.database/resourceanchors": {
      "name": "oracle.database/resourceanchors",
      "table": "resources",
      "properties": []
    },
    "paloaltonetworks.cloudngfw/firewalls": {
      "name": "paloaltonetworks.cloudngfw/firewalls",
      "table": "resources",
      "properties": []
    },
    "paloaltonetworks.cloudngfw/localrulestacks": {
      "name": "paloaltonetworks.cloudngfw/localrulestacks",
      "table": "resources",
      "properties": []
    },
    "pinecone.vectordb/organizations": {
      "name": "pinecone.vectordb/organizations",
      "table": "resources",
      "properties": []
    },
    "providers.test/softdeletesupportedresources": {
      "name": "providers.test/softdeletesupportedresources",
      "table": "resources",
      "properties": []
    },
    "providers.test/statefulibizaengines": {
      "name": "providers.test/statefulibizaengines",
      "table": "resources",
      "properties": []
    },
    "providers.test/statefulresources": {
      "name": "providers.test/statefulresources",
      "table": "resources",
      "properties": []
    },
    "providers.test/statefulresources/nestedresources": {
      "name": "providers.test/statefulresources/nestedresources",
      "table": "resources",
      "properties": []
    },
    "providers.test/statelessresources": {
      "name": "providers.test/statelessresources",
      "table": "resources",
      "properties": []
    },
    "providers.test/trackedresources": {
      "name": "providers.test/trackedresources",
      "table": "resources",
      "properties": []
    },
    "purestorage.block/reservations": {
      "name": "purestorage.block/reservations",
      "table": "resources",
      "properties": []
    },
    "purestorage.block/storagepools": {
      "name": "purestorage.block/storagepools",
      "table": "resources",
      "properties": []
    },
    "purestorage.block/volumepools": {
      "name": "purestorage.block/volumepools",
      "table": "resources",
      "properties": []
    },
    "qumulo.qaas/storages": {
      "name": "qumulo.qaas/storages",
      "table": "resources",
      "properties": []
    },
    "qumulo.storage/filesystems": {
      "name": "qumulo.storage/filesystems",
      "table": "resources",
      "properties": []
    },
    "sendgrid.email/accounts": {
      "name": "sendgrid.email/accounts",
      "table": "resources",
      "properties": []
    },
    "splitio.experimentation/experimentationworkspaces": {
      "name": "splitio.experimentation/experimentationworkspaces",
      "table": "resources",
      "properties": []
    },
    "sqlassessmentplus": {
      "name": "sqlassessmentplus",
      "table": "resources",
      "properties": []
    },
    "telemetryanddiagnostics": {
      "name": "telemetryanddiagnostics",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/fusiongroups": {
      "name": "wandisco.fusion/fusiongroups",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/fusiongroups/azurezones": {
      "name": "wandisco.fusion/fusiongroups/azurezones",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/fusiongroups/azurezones/plugins": {
      "name": "wandisco.fusion/fusiongroups/azurezones/plugins",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/fusiongroups/managedonpremzones": {
      "name": "wandisco.fusion/fusiongroups/managedonpremzones",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/fusiongroups/replicationrules": {
      "name": "wandisco.fusion/fusiongroups/replicationrules",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators": {
      "name": "wandisco.fusion/migrators",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators/datatransferagents": {
      "name": "wandisco.fusion/migrators/datatransferagents",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators/exclusiontemplates": {
      "name": "wandisco.fusion/migrators/exclusiontemplates",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators/livedatamigrations": {
      "name": "wandisco.fusion/migrators/livedatamigrations",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators/metadatamigrations": {
      "name": "wandisco.fusion/migrators/metadatamigrations",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators/metadatatargets": {
      "name": "wandisco.fusion/migrators/metadatatargets",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators/pathmappings": {
      "name": "wandisco.fusion/migrators/pathmappings",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators/targets": {
      "name": "wandisco.fusion/migrators/targets",
      "table": "resources",
      "properties": []
    },
    "wandisco.fusion/migrators/verifications": {
      "name": "wandisco.fusion/migrators/verifications",
      "table": "resources",
      "properties": []
    },
    "windows": {
      "name": "windows",
      "table": "resources",
      "properties": []
    },
    "windowsagent.azuresecuritycenter": {
      "name": "windowsagent.azuresecuritycenter",
      "table": "resources",
      "properties": []
    },
    "windowsagent.sqlserver": {
      "name": "windowsagent.sqlserver",
      "table": "resources",
      "properties": []
    },
    "windowsclientassessmentplus": {
      "name": "windowsclientassessmentplus",
      "table": "resources",
      "properties": []
    },
    "windowsopenssh": {
      "name": "windowsopenssh",
      "table": "resources",
      "properties": []
    },
    "windowsosupdateextension": {
      "name": "windowsosupdateextension",
      "table": "resources",
      "properties": []
    },
    "windowspatchextension": {
      "name": "windowspatchextension",
      "table": "resources",
      "properties": []
    },
    "windowsserverassessment": {
      "name": "windowsserverassessment",
      "table": "resources",
      "properties": []
    },
    "microsoft.authorization/locks/providers/assessments/governanceassignments": {
      "table": "securityresources",
      "type": "microsoft.authorization/locks/providers/assessments/governanceassignments"
    },
    "microsoft.authorization/roleassignments/providers/assessments/governanceassignments": {
      "table": "securityresources",
      "type": "microsoft.authorization/roleassignments/providers/assessments/governanceassignments"
    },
    "microsoft.security/apicollections": {
      "table": "securityresources",
      "type": "microsoft.security/apicollections"
    },
    "microsoft.security/apicollections/apiendpoints": {
      "table": "securityresources",
      "type": "microsoft.security/apicollections/apiendpoints"
    },
    "microsoft.security/assessments": {
      "table": "securityresources",
      "type": "microsoft.security/assessments"
    },
    "microsoft.security/assessments/governanceassignments": {
      "table": "securityresources",
      "type": "microsoft.security/assessments/governanceassignments"
    },
    "microsoft.security/assessments/subassessments": {
      "table": "securityresources",
      "type": "microsoft.security/assessments/subassessments"
    },
    "microsoft.security/attackpaths": {
      "table": "securityresources",
      "type": "microsoft.security/attackpaths"
    },
    "microsoft.security/governancerules": {
      "table": "securityresources",
      "type": "microsoft.security/governancerules"
    },
    "microsoft.security/healthreports": {
      "table": "securityresources",
      "type": "microsoft.security/healthreports"
    },
    "microsoft.security/insights": {
      "table": "securityresources",
      "type": "microsoft.security/insights"
    },
    "microsoft.security/integrations": {
      "table": "securityresources",
      "type": "microsoft.security/integrations"
    },
    "microsoft.security/iotalerts": {
      "table": "securityresources",
      "type": "microsoft.security/iotalerts"
    },
    "microsoft.security/locations/alerts": {
      "table": "securityresources",
      "type": "microsoft.security/locations/alerts"
    },
    "microsoft.security/locations/attackpaths": {
      "table": "securityresources",
      "type": "microsoft.security/locations/attackpaths"
    },
    "microsoft.security/pricings": {
      "table": "securityresources",
      "type": "microsoft.security/pricings"
    },
    "microsoft.security/regulatorycompliancestandards": {
      "table": "securityresources",
      "type": "microsoft.security/regulatorycompliancestandards"
    },
    "microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols": {
      "table": "securityresources",
      "type": "microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols"
    },
    "microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments": {
      "table": "securityresources",
      "type": "microsoft.security/regulatorycompliancestandards/regulatorycompliancecontrols/regulatorycomplianceassessments"
    },
    "microsoft.security/securescores": {
      "table": "securityresources",
      "type": "microsoft.security/securescores"
    },
    "microsoft.security/securescores/securescorecontrols": {
      "table": "securityresources",
      "type": "microsoft.security/securescores/securescorecontrols"
    },
    "microsoft.security/securityconnectors/devops": {
      "table": "securityresources",
      "type": "microsoft.security/securityconnectors/devops"
    },
    "microsoft.security/securityconnectors/devops/azuredevopsorgs": {
      "table": "securityresources",
      "type": "microsoft.security/securityconnectors/devops/azuredevopsorgs"
    },
    "microsoft.security/securityconnectors/devops/azuredevopsorgs/projects": {
      "name": "microsoft.security/securityconnectors/devops/azuredevopsorgs/projects",
      "table": "securityresources",
      "properties": []
    },
    "microsoft.security/securityconnectors/devops/azuredevopsorgs/projects/repos": {
      "table": "securityresources",
      "type": "microsoft.security/securityconnectors/devops/azuredevopsorgs/projects/repos"
    },
    "microsoft.security/securityconnectors/devops/githubowners": {
      "table": "securityresources",
      "type": "microsoft.security/securityconnectors/devops/githubowners"
    },
    "microsoft.security/securityconnectors/devops/githubowners/repos": {
      "table": "securityresources",
      "type": "microsoft.security/securityconnectors/devops/githubowners/repos"
    },
    "microsoft.security/securityconnectors/devops/gitlabgroups": {
      "table": "securityresources",
      "type": "microsoft.security/securityconnectors/devops/gitlabgroups"
    },
    "microsoft.security/securityconnectors/devops/gitlabgroups/projects": {
      "table": "securityresources",
      "type": "microsoft.security/securityconnectors/devops/gitlabgroups/projects"
    },
    "microsoft.security/softwareinventories": {
      "table": "securityresources",
      "type": "microsoft.security/softwareinventories"
    },
    "microsoft.security/softwareinventory": {
      "table": "securityresources",
      "type": "microsoft.security/softwareinventory"
    },
    "microsoft.security/standardassignments": {
      "table": "securityresources",
      "type": "microsoft.security/standardassignments"
    },
    "applications": {
      "name": "applications",
      "table": "servicefabricresources",
      "properties": []
    },
    "applicationtypes": {
      "name": "applicationtypes",
      "table": "servicefabricresources",
      "properties": []
    },
    "microsoft.servicefabric/clusters/applications": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/clusters/applications"
    },
    "microsoft.servicefabric/clusters/applications/services": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/clusters/applications/services"
    },
    "microsoft.servicefabric/clusters/applicationtypes": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/clusters/applicationtypes"
    },
    "microsoft.servicefabric/clusters/applicationtypes/versions": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/clusters/applicationtypes/versions"
    },
    "microsoft.servicefabric/managedclusters/applications": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/managedclusters/applications"
    },
    "microsoft.servicefabric/managedclusters/applications/services": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/managedclusters/applications/services"
    },
    "microsoft.servicefabric/managedclusters/applicationtypes": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/managedclusters/applicationtypes"
    },
    "microsoft.servicefabric/managedclusters/applicationtypes/versions": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/managedclusters/applicationtypes/versions"
    },
    "microsoft.servicefabric/managedclusters/nodetypes": {
      "table": "servicefabricresources",
      "type": "microsoft.servicefabric/managedclusters/nodetypes"
    },
    "services": {
      "name": "services",
      "table": "servicefabricresources",
      "properties": []
    },
    "versions": {
      "name": "versions",
      "table": "servicefabricresources",
      "properties": []
    },
    "microsoft.resourcehealth/events": {
      "table": "servicehealthresources",
      "type": "microsoft.resourcehealth/events"
    },
    "microsoft.resourcehealth/events/impactedresources": {
      "table": "servicehealthresources",
      "type": "microsoft.resourcehealth/events/impactedresources"
    },
    "microsoft.compute/locations/sharedgalleries": {
      "name": "microsoft.compute/locations/sharedgalleries",
      "table": "sharedgalleryresources",
      "properties": []
    },
    "microsoft.compute/skualternativespotvmsize/location": {
      "name": "microsoft.compute/skualternativespotvmsize/location",
      "table": "spotresources",
      "properties": []
    },
    "microsoft.compute/skuspotevictionrate/location": {
      "name": "microsoft.compute/skuspotevictionrate/location",
      "table": "spotresources",
      "properties": []
    },
    "microsoft.compute/skuspotpricehistory/ostype/location": {
      "name": "microsoft.compute/skuspotpricehistory/ostype/location",
      "table": "spotresources",
      "properties": []
    },
    "microsoft.resources/tagnamespaces": {
      "table": "tagresources",
      "type": "microsoft.resources/tagnamespaces"
    },
    "microsoft.resources/tagnamespaces/tagnames": {
      "table": "tagresources",
      "type": "microsoft.resources/tagnamespaces/tagnames"
    },
    "microsoft.resources/tagnamespaces/tags": {
      "table": "tagresources",
      "type": "microsoft.resources/tagnamespaces/tags"
    },
    "aka.ms/yourcaliforniaprivacychoices": {
      "table": "resources",
      "type": "aka.ms/yourcaliforniaprivacychoices"
    }
  },
  "keywords": [
    {
      "name": "!between",
      "category": "KQL Keyword"
    },
    {
      "name": "!contains",
      "category": "KQL Keyword"
    },
    {
      "name": "!contains_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "!endswith",
      "category": "KQL Keyword"
    },
    {
      "name": "!endswith_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "!has",
      "category": "KQL Keyword"
    },
    {
      "name": "!has_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "!hasprefix",
      "category": "KQL Keyword"
    },
    {
      "name": "!hasprefix_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "!hassuffix",
      "category": "KQL Keyword"
    },
    {
      "name": "!hassuffix_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "!in",
      "category": "KQL Keyword"
    },
    {
      "name": "!in~",
      "category": "KQL Keyword"
    },
    {
      "name": "!startswith",
      "category": "KQL Keyword"
    },
    {
      "name": "!startswith_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "3Dchart",
      "category": "KQL Keyword"
    },
    {
      "name": "__contextual_datatable",
      "category": "KQL Keyword"
    },
    {
      "name": "__crossCluster",
      "category": "KQL Keyword"
    },
    {
      "name": "__crossDB",
      "category": "KQL Keyword"
    },
    {
      "name": "__executeAndCache",
      "category": "KQL Keyword"
    },
    {
      "name": "__id",
      "category": "KQL Keyword"
    },
    {
      "name": "__isFuzzy",
      "category": "KQL Keyword"
    },
    {
      "name": "__noWithSource",
      "category": "KQL Keyword"
    },
    {
      "name": "__packedColumn",
      "category": "KQL Keyword"
    },
    {
      "name": "__partitionby",
      "category": "KQL Keyword"
    },
    {
      "name": "__projectAway",
      "category": "KQL Keyword"
    },
    {
      "name": "__sourceColumnIndex",
      "category": "KQL Keyword"
    },
    {
      "name": "access",
      "category": "KQL Keyword"
    },
    {
      "name": "accumulate",
      "category": "KQL Keyword"
    },
    {
      "name": "alias",
      "category": "KQL Keyword"
    },
    {
      "name": "and",
      "category": "KQL Keyword"
    },
    {
      "name": "anomalychart",
      "category": "KQL Keyword"
    },
    {
      "name": "areachart",
      "category": "KQL Keyword"
    },
    {
      "name": "as",
      "category": "KQL Keyword"
    },
    {
      "name": "asc",
      "category": "KQL Keyword"
    },
    {
      "name": "assert-schema",
      "category": "KQL Keyword"
    },
    {
      "name": "bagexpansion",
      "category": "KQL Keyword"
    },
    {
      "name": "barchart",
      "category": "KQL Keyword"
    },
    {
      "name": "best_effort",
      "category": "KQL Keyword"
    },
    {
      "name": "between",
      "category": "KQL Keyword"
    },
    {
      "name": "bin",
      "category": "KQL Keyword"
    },
    {
      "name": "bin_legacy",
      "category": "KQL Keyword"
    },
    {
      "name": "bool",
      "category": "KQL Keyword"
    },
    {
      "name": "boolean",
      "category": "KQL Keyword"
    },
    {
      "name": "by",
      "category": "KQL Keyword"
    },
    {
      "name": "byte",
      "category": "KQL Keyword"
    },
    {
      "name": "cachingpolicy",
      "category": "KQL Keyword"
    },
    {
      "name": "callout",
      "category": "KQL Keyword"
    },
    {
      "name": "cancel",
      "category": "KQL Keyword"
    },
    {
      "name": "card",
      "category": "KQL Keyword"
    },
    {
      "name": "char",
      "category": "KQL Keyword"
    },
    {
      "name": "columnchart",
      "category": "KQL Keyword"
    },
    {
      "name": "commands-and-queries",
      "category": "KQL Keyword"
    },
    {
      "name": "consume",
      "category": "KQL Keyword"
    },
    {
      "name": "contains",
      "category": "KQL Keyword"
    },
    {
      "name": "contains_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "containscs",
      "category": "KQL Keyword"
    },
    {
      "name": "count",
      "category": "KQL Keyword"
    },
    {
      "name": "cycles",
      "category": "KQL Keyword"
    },
    {
      "name": "database",
      "category": "KQL Keyword"
    },
    {
      "name": "dataexport",
      "category": "KQL Keyword"
    },
    {
      "name": "dataformat",
      "category": "KQL Keyword"
    },
    {
      "name": "datascope",
      "category": "KQL Keyword"
    },
    {
      "name": "datatable",
      "category": "KQL Keyword"
    },
    {
      "name": "date",
      "category": "KQL Keyword"
    },
    {
      "name": "datetime",
      "category": "KQL Keyword"
    },
    {
      "name": "datetime_pattern",
      "category": "KQL Keyword"
    },
    {
      "name": "decimal",
      "category": "KQL Keyword"
    },
    {
      "name": "declare",
      "category": "KQL Keyword"
    },
    {
      "name": "decodeblocks",
      "category": "KQL Keyword"
    },
    {
      "name": "default",
      "category": "KQL Keyword"
    },
    {
      "name": "desc",
      "category": "KQL Keyword"
    },
    {
      "name": "distinct",
      "category": "KQL Keyword"
    },
    {
      "name": "double",
      "category": "KQL Keyword"
    },
    {
      "name": "dynamic",
      "category": "KQL Keyword"
    },
    {
      "name": "earliest",
      "category": "KQL Keyword"
    },
    {
      "name": "edges",
      "category": "KQL Keyword"
    },
    {
      "name": "encodingpolicy",
      "category": "KQL Keyword"
    },
    {
      "name": "endswith",
      "category": "KQL Keyword"
    },
    {
      "name": "endswith_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "entity_group",
      "category": "KQL Keyword"
    },
    {
      "name": "evaluate",
      "category": "KQL Keyword"
    },
    {
      "name": "expandoutput",
      "category": "KQL Keyword"
    },
    {
      "name": "extend",
      "category": "KQL Keyword"
    },
    {
      "name": "extent_tags_retention",
      "category": "KQL Keyword"
    },
    {
      "name": "external_data",
      "category": "KQL Keyword"
    },
    {
      "name": "externaldata",
      "category": "KQL Keyword"
    },
    {
      "name": "facet",
      "category": "KQL Keyword"
    },
    {
      "name": "filter",
      "category": "KQL Keyword"
    },
    {
      "name": "find",
      "category": "KQL Keyword"
    },
    {
      "name": "first",
      "category": "KQL Keyword"
    },
    {
      "name": "flags",
      "category": "KQL Keyword"
    },
    {
      "name": "float",
      "category": "KQL Keyword"
    },
    {
      "name": "force_remote",
      "category": "KQL Keyword"
    },
    {
      "name": "fork",
      "category": "KQL Keyword"
    },
    {
      "name": "from",
      "category": "KQL Keyword"
    },
    {
      "name": "getschema",
      "category": "KQL Keyword"
    },
    {
      "name": "granny-asc",
      "category": "KQL Keyword"
    },
    {
      "name": "granny-desc",
      "category": "KQL Keyword"
    },
    {
      "name": "graph",
      "category": "KQL Keyword"
    },
    {
      "name": "graph-mark-components",
      "category": "KQL Keyword"
    },
    {
      "name": "graph-match",
      "category": "KQL Keyword"
    },
    {
      "name": "graph-shortest-paths",
      "category": "KQL Keyword"
    },
    {
      "name": "graph-to-table",
      "category": "KQL Keyword"
    },
    {
      "name": "graph-where-edges",
      "category": "KQL Keyword"
    },
    {
      "name": "graph-where-nodes",
      "category": "KQL Keyword"
    },
    {
      "name": "guid",
      "category": "KQL Keyword"
    },
    {
      "name": "harddelete",
      "category": "KQL Keyword"
    },
    {
      "name": "hardretention",
      "category": "KQL Keyword"
    },
    {
      "name": "has",
      "category": "KQL Keyword"
    },
    {
      "name": "has_all",
      "category": "KQL Keyword"
    },
    {
      "name": "has_any",
      "category": "KQL Keyword"
    },
    {
      "name": "has_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "hasprefix",
      "category": "KQL Keyword"
    },
    {
      "name": "hasprefix_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "hassuffix",
      "category": "KQL Keyword"
    },
    {
      "name": "hassuffix_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.concurrency",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.distribution",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.materialized",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.num_partitions",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.progressive_top",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.remote",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.shufflekey",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.spread",
      "category": "KQL Keyword"
    },
    {
      "name": "hint.strategy",
      "category": "KQL Keyword"
    },
    {
      "name": "hotcache",
      "category": "KQL Keyword"
    },
    {
      "name": "id",
      "category": "KQL Keyword"
    },
    {
      "name": "in",
      "category": "KQL Keyword"
    },
    {
      "name": "inline_external_table",
      "category": "KQL Keyword"
    },
    {
      "name": "int",
      "category": "KQL Keyword"
    },
    {
      "name": "int16",
      "category": "KQL Keyword"
    },
    {
      "name": "int32",
      "category": "KQL Keyword"
    },
    {
      "name": "int64",
      "category": "KQL Keyword"
    },
    {
      "name": "int8",
      "category": "KQL Keyword"
    },
    {
      "name": "invoke",
      "category": "KQL Keyword"
    },
    {
      "name": "in~",
      "category": "KQL Keyword"
    },
    {
      "name": "isfuzzy",
      "category": "KQL Keyword"
    },
    {
      "name": "join",
      "category": "KQL Keyword"
    },
    {
      "name": "journal",
      "category": "KQL Keyword"
    },
    {
      "name": "kind",
      "category": "KQL Keyword"
    },
    {
      "name": "ladderchart",
      "category": "KQL Keyword"
    },
    {
      "name": "last",
      "category": "KQL Keyword"
    },
    {
      "name": "latest",
      "category": "KQL Keyword"
    },
    {
      "name": "let",
      "category": "KQL Keyword"
    },
    {
      "name": "like",
      "category": "KQL Keyword"
    },
    {
      "name": "likecs",
      "category": "KQL Keyword"
    },
    {
      "name": "limit",
      "category": "KQL Keyword"
    },
    {
      "name": "linechart",
      "category": "KQL Keyword"
    },
    {
      "name": "long",
      "category": "KQL Keyword"
    },
    {
      "name": "lookup",
      "category": "KQL Keyword"
    },
    {
      "name": "macro-expand",
      "category": "KQL Keyword"
    },
    {
      "name": "make-graph",
      "category": "KQL Keyword"
    },
    {
      "name": "make-series",
      "category": "KQL Keyword"
    },
    {
      "name": "matches regex",
      "category": "KQL Keyword"
    },
    {
      "name": "materialize",
      "category": "KQL Keyword"
    },
    {
      "name": "materialized-view-combine",
      "category": "KQL Keyword"
    },
    {
      "name": "materialized-views",
      "category": "KQL Keyword"
    },
    {
      "name": "mdm",
      "category": "KQL Keyword"
    },
    {
      "name": "missing",
      "category": "KQL Keyword"
    },
    {
      "name": "mv-apply",
      "category": "KQL Keyword"
    },
    {
      "name": "mv-expand",
      "category": "KQL Keyword"
    },
    {
      "name": "mvapply",
      "category": "KQL Keyword"
    },
    {
      "name": "mvexpand",
      "category": "KQL Keyword"
    },
    {
      "name": "nodes",
      "category": "KQL Keyword"
    },
    {
      "name": "nooptimization",
      "category": "KQL Keyword"
    },
    {
      "name": "notcontains",
      "category": "KQL Keyword"
    },
    {
      "name": "notcontainscs",
      "category": "KQL Keyword"
    },
    {
      "name": "notlike",
      "category": "KQL Keyword"
    },
    {
      "name": "notlikecs",
      "category": "KQL Keyword"
    },
    {
      "name": "null",
      "category": "KQL Keyword"
    },
    {
      "name": "nulls",
      "category": "KQL Keyword"
    },
    {
      "name": "of",
      "category": "KQL Keyword"
    },
    {
      "name": "on",
      "category": "KQL Keyword"
    },
    {
      "name": "optional",
      "category": "KQL Keyword"
    },
    {
      "name": "or",
      "category": "KQL Keyword"
    },
    {
      "name": "order",
      "category": "KQL Keyword"
    },
    {
      "name": "others",
      "category": "KQL Keyword"
    },
    {
      "name": "output",
      "category": "KQL Keyword"
    },
    {
      "name": "pack",
      "category": "KQL Keyword"
    },
    {
      "name": "parse",
      "category": "KQL Keyword"
    },
    {
      "name": "parse-kv",
      "category": "KQL Keyword"
    },
    {
      "name": "parse-where",
      "category": "KQL Keyword"
    },
    {
      "name": "partition",
      "category": "KQL Keyword"
    },
    {
      "name": "partitioned-by",
      "category": "KQL Keyword"
    },
    {
      "name": "pathformat",
      "category": "KQL Keyword"
    },
    {
      "name": "pattern",
      "category": "KQL Keyword"
    },
    {
      "name": "piechart",
      "category": "KQL Keyword"
    },
    {
      "name": "pivotchart",
      "category": "KQL Keyword"
    },
    {
      "name": "plotly",
      "category": "KQL Keyword"
    },
    {
      "name": "print",
      "category": "KQL Keyword"
    },
    {
      "name": "project",
      "category": "KQL Keyword"
    },
    {
      "name": "project-away",
      "category": "KQL Keyword"
    },
    {
      "name": "project-by-names",
      "category": "KQL Keyword"
    },
    {
      "name": "project-keep",
      "category": "KQL Keyword"
    },
    {
      "name": "project-rename",
      "category": "KQL Keyword"
    },
    {
      "name": "project-reorder",
      "category": "KQL Keyword"
    },
    {
      "name": "project-smart",
      "category": "KQL Keyword"
    },
    {
      "name": "queries",
      "category": "KQL Keyword"
    },
    {
      "name": "query_parameters",
      "category": "KQL Keyword"
    },
    {
      "name": "query_results",
      "category": "KQL Keyword"
    },
    {
      "name": "range",
      "category": "KQL Keyword"
    },
    {
      "name": "real",
      "category": "KQL Keyword"
    },
    {
      "name": "reduce",
      "category": "KQL Keyword"
    },
    {
      "name": "regex",
      "category": "KQL Keyword"
    },
    {
      "name": "relaxed",
      "category": "KQL Keyword"
    },
    {
      "name": "render",
      "category": "KQL Keyword"
    },
    {
      "name": "restrict",
      "category": "KQL Keyword"
    },
    {
      "name": "restricted_view_access",
      "category": "KQL Keyword"
    },
    {
      "name": "row_level_security",
      "category": "KQL Keyword"
    },
    {
      "name": "rowstore",
      "category": "KQL Keyword"
    },
    {
      "name": "rowstore_references",
      "category": "KQL Keyword"
    },
    {
      "name": "rowstore_sealinfo",
      "category": "KQL Keyword"
    },
    {
      "name": "rowstorepolicy",
      "category": "KQL Keyword"
    },
    {
      "name": "rowstores",
      "category": "KQL Keyword"
    },
    {
      "name": "sample",
      "category": "KQL Keyword"
    },
    {
      "name": "sample-distinct",
      "category": "KQL Keyword"
    },
    {
      "name": "scan",
      "category": "KQL Keyword"
    },
    {
      "name": "scatterchart",
      "category": "KQL Keyword"
    },
    {
      "name": "seal",
      "category": "KQL Keyword"
    },
    {
      "name": "seals",
      "category": "KQL Keyword"
    },
    {
      "name": "search",
      "category": "KQL Keyword"
    },
    {
      "name": "serialize",
      "category": "KQL Keyword"
    },
    {
      "name": "set",
      "category": "KQL Keyword"
    },
    {
      "name": "set-or-append",
      "category": "KQL Keyword"
    },
    {
      "name": "set-or-replace",
      "category": "KQL Keyword"
    },
    {
      "name": "shards",
      "category": "KQL Keyword"
    },
    {
      "name": "simple",
      "category": "KQL Keyword"
    },
    {
      "name": "softdelete",
      "category": "KQL Keyword"
    },
    {
      "name": "softretention",
      "category": "KQL Keyword"
    },
    {
      "name": "sort",
      "category": "KQL Keyword"
    },
    {
      "name": "sql",
      "category": "KQL Keyword"
    },
    {
      "name": "stackedareachart",
      "category": "KQL Keyword"
    },
    {
      "name": "startswith",
      "category": "KQL Keyword"
    },
    {
      "name": "startswith_cs",
      "category": "KQL Keyword"
    },
    {
      "name": "statistics",
      "category": "KQL Keyword"
    },
    {
      "name": "step",
      "category": "KQL Keyword"
    },
    {
      "name": "storedqueryresultcontainers",
      "category": "KQL Keyword"
    },
    {
      "name": "string",
      "category": "KQL Keyword"
    },
    {
      "name": "summarize",
      "category": "KQL Keyword"
    },
    {
      "name": "tablepurge",
      "category": "KQL Keyword"
    },
    {
      "name": "take",
      "category": "KQL Keyword"
    },
    {
      "name": "time",
      "category": "KQL Keyword"
    },
    {
      "name": "timechart",
      "category": "KQL Keyword"
    },
    {
      "name": "timeline",
      "category": "KQL Keyword"
    },
    {
      "name": "timepivot",
      "category": "KQL Keyword"
    },
    {
      "name": "timespan",
      "category": "KQL Keyword"
    },
    {
      "name": "title",
      "category": "KQL Keyword"
    },
    {
      "name": "to",
      "category": "KQL Keyword"
    },
    {
      "name": "top",
      "category": "KQL Keyword"
    },
    {
      "name": "top-hitters",
      "category": "KQL Keyword"
    },
    {
      "name": "top-nested",
      "category": "KQL Keyword"
    },
    {
      "name": "toscalar",
      "category": "KQL Keyword"
    },
    {
      "name": "totable",
      "category": "KQL Keyword"
    },
    {
      "name": "treemap",
      "category": "KQL Keyword"
    },
    {
      "name": "typeof",
      "category": "KQL Keyword"
    },
    {
      "name": "uint",
      "category": "KQL Keyword"
    },
    {
      "name": "uint16",
      "category": "KQL Keyword"
    },
    {
      "name": "uint32",
      "category": "KQL Keyword"
    },
    {
      "name": "uint64",
      "category": "KQL Keyword"
    },
    {
      "name": "uint8",
      "category": "KQL Keyword"
    },
    {
      "name": "ulong",
      "category": "KQL Keyword"
    },
    {
      "name": "union",
      "category": "KQL Keyword"
    },
    {
      "name": "uniqueid",
      "category": "KQL Keyword"
    },
    {
      "name": "unrestrictedviewers",
      "category": "KQL Keyword"
    },
    {
      "name": "uuid",
      "category": "KQL Keyword"
    },
    {
      "name": "verbose",
      "category": "KQL Keyword"
    },
    {
      "name": "view",
      "category": "KQL Keyword"
    },
    {
      "name": "viewers",
      "category": "KQL Keyword"
    },
    {
      "name": "views",
      "category": "KQL Keyword"
    },
    {
      "name": "where",
      "category": "KQL Keyword"
    },
    {
      "name": "with",
      "category": "KQL Keyword"
    },
    {
      "name": "with_itemindex",
      "category": "KQL Keyword"
    },
    {
      "name": "with_match_id",
      "category": "KQL Keyword"
    },
    {
      "name": "with_node_id",
      "category": "KQL Keyword"
    },
    {
      "name": "with_source",
      "category": "KQL Keyword"
    },
    {
      "name": "with_step_name",
      "category": "KQL Keyword"
    },
    {
      "name": "withsource",
      "category": "KQL Keyword"
    },
    {
      "name": "writeaheadlog",
      "category": "KQL Keyword"
    }
  ],
  "operators": [
    {
      "name": "!",
      "category": "KQL Operator"
    },
    {
      "name": "!=",
      "category": "KQL Operator"
    },
    {
      "name": "!~",
      "category": "KQL Operator"
    },
    {
      "name": "%",
      "category": "KQL Operator"
    },
    {
      "name": "(",
      "category": "KQL Operator"
    },
    {
      "name": ")",
      "category": "KQL Operator"
    },
    {
      "name": "*",
      "category": "KQL Operator"
    },
    {
      "name": "+",
      "category": "KQL Operator"
    },
    {
      "name": ",",
      "category": "KQL Operator"
    },
    {
      "name": "-",
      "category": "KQL Operator"
    },
    {
      "name": "--",
      "category": "KQL Operator"
    },
    {
      "name": "-->",
      "category": "KQL Operator"
    },
    {
      "name": "-[",
      "category": "KQL Operator"
    },
    {
      "name": ".",
      "category": "KQL Operator"
    },
    {
      "name": "..",
      "category": "KQL Operator"
    },
    {
      "name": "/",
      "category": "KQL Operator"
    },
    {
      "name": ":",
      "category": "KQL Operator"
    },
    {
      "name": ";",
      "category": "KQL Operator"
    },
    {
      "name": "<",
      "category": "KQL Operator"
    },
    {
      "name": "<--",
      "category": "KQL Operator"
    },
    {
      "name": "<-[",
      "category": "KQL Operator"
    },
    {
      "name": "<=",
      "category": "KQL Operator"
    },
    {
      "name": "<>",
      "category": "KQL Operator"
    },
    {
      "name": "<|",
      "category": "KQL Operator"
    },
    {
      "name": "=",
      "category": "KQL Operator"
    },
    {
      "name": "==",
      "category": "KQL Operator"
    },
    {
      "name": "=>",
      "category": "KQL Operator"
    },
    {
      "name": "=~",
      "category": "KQL Operator"
    },
    {
      "name": ">",
      "category": "KQL Operator"
    },
    {
      "name": ">=",
      "category": "KQL Operator"
    },
    {
      "name": "?",
      "category": "KQL Operator"
    },
    {
      "name": "@",
      "category": "KQL Operator"
    },
    {
      "name": "[",
      "category": "KQL Operator"
    },
    {
      "name": "]",
      "category": "KQL Operator"
    },
    {
      "name": "]-",
      "category": "KQL Operator"
    },
    {
      "name": "]->",
      "category": "KQL Operator"
    },
    {
      "name": "{",
      "category": "KQL Operator"
    },
    {
      "name": "|",
      "category": "KQL Operator"
    },
    {
      "name": "}",
      "category": "KQL Operator"
    }
  ],
  "functions": [
    {
      "name": "abs",
      "category": "KQL Function",
      "documentation": {
        "title": "abs()",
        "description": "Calculates the absolute value of the input.",
        "syntax": "`abs(`*x*`)`",
        "returnInfo": "Absolute value of x.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | int, real, or timespan |  *True* | The value to make absolute. |",
        "example": "print abs(-5)",
        "sourceLength": 1194
      }
    },
    {
      "name": "acos",
      "category": "KQL Function",
      "documentation": {
        "title": "acos()",
        "description": "Calculates the angle whose cosine is the specified number. Inverse operation of `cos()`.",
        "syntax": "`acos(`*x*`)`",
        "returnInfo": "The value of the arc cosine of `x`. The return value is `null` if `x` < -1 or `x` > 1.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | `real` |  *True* | The value used to calculate the arc cosine. |",
        "example": "",
        "sourceLength": 1003
      }
    },
    {
      "name": "ago",
      "category": "KQL Function",
      "documentation": {
        "title": "ago()",
        "description": "Subtracts the given timespan from the current UTC time.\n\nLike `now()`, if you use `ago()` multiple times in a single query statement, the current UTC time\nbeing referenced is the same across all uses.",
        "syntax": "`ago(`*timespan*`)`",
        "returnInfo": "A datetime value equal to the current time minus the timespan.",
        "parametersTable": "| Name | Type | Required | Description |\n|:---|:---|:---|:---|\n| *timespan* | `timespan` |  *True* | The interval to subtract from the current UTC clock time `now()`. For a full list of possible timespan values, see timespan literals.|",
        "example": "T | where Timestamp > ago(1h)",
        "sourceLength": 1992
      }
    },
    {
      "name": "around",
      "category": "KQL Function",
      "documentation": {
        "title": "around()",
        "description": "Creates a `bool` value indicating if the first argument is within a range around the center value.",
        "syntax": "`around(`*value*`,`*center*`,`*delta*`)`",
        "returnInfo": "Returns `true` if the value is within the range, `false` if the value is outside the range.\nReturns `null` if any of the arguments is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*value*| int, long, real, datetime, or timespan |  *True* | The value to compare to the *center*.|\n| *center* | int, long, real, datetime, or timespan |  *True* | The center of the range defined as [(`center`-`delta`) .. (`center` + `delta`)]. |\n| *delta* | int, long, real, datetime, or timespan |  *True* | The delta value of the range defined as [(`center`-`delta`) .. (`center` + `delta`)].|",
        "example": "range dt \n    from datetime(2021-01-01 01:00) \n    to datetime(2021-01-01 02:00) \n    step 1min\n| where around(dt, datetime(2021-01-01 01:30), 1min)",
        "sourceLength": 2173
      }
    },
    {
      "name": "array_concat",
      "category": "KQL Function",
      "documentation": {
        "title": "array_concat()",
        "description": "Concatenates many dynamic arrays to a single array.",
        "syntax": "`array_concat(`*arr* [`,` ...]`)`",
        "returnInfo": "Returns a dynamic array of all input arrays.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *arr* | `dynamic` |  *True* | The arrays to concatenate into a dynamic array.|",
        "example": "range x from 1 to 3 step 1\n| extend y = x * 2\n| extend z = y * 2\n| extend a1 = pack_array(x,y,z), a2 = pack_array(x, y)\n| project array_concat(a1, a2)",
        "sourceLength": 1697
      }
    },
    {
      "name": "array_iff",
      "category": "KQL Function",
      "documentation": {
        "title": "array_iff()",
        "description": "Element-wise `iif` function on dynamic arrays.\n\n> The `array_iff()` and `array_iif()` functions are equivalent",
        "syntax": "`array_iff(`*condition_array*, *when_true*, *when_false*`)`",
        "returnInfo": "Returns a dynamic array of the values taken either from the *when_true* or *when_false* array values, according to the corresponding value of the condition array.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *condition_array*| `dynamic` |  *True*| An array of *boolean* or numeric values.|\n| *when_true* | dynamic or scalar |  *True* | An array of values or primitive value. It's the result when *condition_array* is *true*.|\n| *when_false* | dynamic or scalar |  *True* | An array of values or primitive value. It's the result when *condition_array* is *false*.|\n\n> [!NOTE]\n>\n> * The length of the return value is same as the input *condition_array*.\n> * Numeric condition values are considered `true` if not equal to 0.\n> * Non-numeric and non-boolean condition values is null in the corresponding index of the return value.\n> * If *when_true* or *when_false* is shorter than *condition_array*, missing values are treated as null.",
        "example": "print condition=dynamic([true,false,true]), if_true=dynamic([1,2,3]), if_false=dynamic([4,5,6]) \n| extend res= array_iff(condition, if_true, if_false)\n\nprint condition=dynamic([1,0,50]), if_true=\"yes\", if_false=\"no\" \n| extend res= array_iff(condition, if_true, if_false)\n\nprint condition=dynamic([\"some string value\", datetime(\"01-01-2022\"), null]), if_true=1, if_false=0\n| extend res= array_iff(condition, if_true, if_false)\n\nprint condition=dynamic([true,true,true]), if_true=dynamic([1,2]), if_false=dynamic([3,4]) \n| extend res= array_iff(condition, if_true, if_false)",
        "sourceLength": 4846
      }
    },
    {
      "name": "array_index_of",
      "category": "KQL Function",
      "documentation": {
        "title": "array_index_of()",
        "description": "Searches an array for the specified item, and returns its position.",
        "syntax": "`array_index_of(`*array*`,` *value* [`,` *start* [`,` *length* [`,` *occurence* ]]]`)`",
        "returnInfo": "Returns a zero-based index position of lookup.\nReturns -1 if the value isn't found in the array.\nReturns *null* for irrelevant inputs (*occurrence* < 0 or  *length* < -1).",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *array* | `dynamic` |  *True* | The array to search. |\n| *value* | long, int, datetime, timespan, string, guid, or bool |  *True* | The value to lookup. |\n| *start* | `int` |  | The search start position. A negative value will offset the starting search value from the end of the array by `abs(`*start*`)` steps. |\n| *length* | `int` |  | The number of values to examine. A value of -1 means unlimited length. |\n| *occurrence* | `int` |  | The number of the occurrence. The default is 1. |",
        "example": "let arr=dynamic([\"this\", \"is\", \"an\", \"example\", \"an\", \"example\"]);\nprint\n idx1 = array_index_of(arr,\"an\")    // lookup found in input string\n , idx2 = array_index_of(arr,\"example\",1,3) // lookup found in researched range \n , idx3 = array_index_of(arr,\"example\",1,2) // search starts from index 1, but stops after 2 values, so lookup can't be found\n , idx4 = array_index_of(arr,\"is\",2,4) // search starts after occurrence of lookup\n , idx5 = array_index_of(arr,\"example\",2,-1)  // lookup found\n , idx6 = array_index_of(arr, \"an\", 1, -1, 2)   // second occurrence found in input range\n , idx7 = array_index_of(arr, \"an\", 1, -1, 3)   // no third occurrence in input array\n , idx8 = array_index_of(arr, \"an\", -3)   // negative start index will look at last 3 elements\n , idx9 = array_index_of(arr, \"is\", -4)   // negative start index will look at last 3 elements",
        "sourceLength": 3610
      }
    },
    {
      "name": "array_length",
      "category": "KQL Function",
      "documentation": {
        "title": "array_length()",
        "description": "Calculates the number of elements in a dynamic array.\n\n> **Deprecated aliases:** arraylength()",
        "syntax": "`array_length(`*array*`)`",
        "returnInfo": "Returns the number of elements in *array*, or `null` if *array* isn't an array.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *array* | `dynamic` |  *True* | The array for which to calculate length.",
        "example": "print array_length(dynamic([1, 2, 3, \"four\"]))",
        "sourceLength": 1505
      }
    },
    {
      "name": "array_reverse",
      "category": "KQL Function",
      "documentation": {
        "title": "array_reverse()",
        "description": "Reverses the order of the elements in a dynamic array.",
        "syntax": "`array_reverse(`*value*`)`",
        "returnInfo": "Returns an array that contains the same elements as the input array in reverse order.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*value*| `dynamic` |  *True*| The array to reverse.|",
        "example": "print arr=dynamic([\"this\", \"is\", \"an\", \"example\"]) \n| project Result=array_reverse(arr)",
        "sourceLength": 1551
      }
    },
    {
      "name": "array_rotate_left",
      "category": "KQL Function",
      "documentation": {
        "title": "array_rotate_left()",
        "description": "Rotates values inside a `dynamic` array to the left.",
        "syntax": "`array_rotate_left(`*array*, *rotate_count*`)`",
        "returnInfo": "Dynamic array containing the same elements as the original array with each element rotated according to *rotate_count*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*array* | `dynamic` |  *True*| The array to rotate.|\n|*rotate_count*| integer |  *True*| The number of positions that array elements will be rotated to the left. If the value is negative, the elements will be rotated to the right.|",
        "example": "print arr=dynamic([1,2,3,4,5])\n| extend arr_rotated=array_rotate_left(arr, 2)\n\nprint arr=dynamic([1,2,3,4,5])\n| extend arr_rotated=array_rotate_left(arr, -2)",
        "sourceLength": 2680
      }
    },
    {
      "name": "array_rotate_right",
      "category": "KQL Function",
      "documentation": {
        "title": "array_rotate_right()",
        "description": "Rotates values inside a `dynamic` array to the right.",
        "syntax": "`array_rotate_right(`*array*, *rotate_count*`)`",
        "returnInfo": "Dynamic array containing the same elements as the original array with each element rotated according to *rotate_count*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*array* | `dynamic` |  *True*| The array to rotate.|\n|*rotate_count*| integer |  *True*| The number of positions that array elements will be rotated to the right. If the value is negative, the elements will be rotated to the Left.|",
        "example": "print arr=dynamic([1,2,3,4,5])\n| extend arr_rotated=array_rotate_right(arr, 2)\n\nprint arr=dynamic([1,2,3,4,5])\n| extend arr_rotated=array_rotate_right(arr, -2)",
        "sourceLength": 2702
      }
    },
    {
      "name": "array_shift_left",
      "category": "KQL Function",
      "documentation": {
        "title": "array_shift_left()",
        "description": "Shifts the values inside a dynamic array to the left.",
        "syntax": "`array_shift_left(`*array*, *shift_count* [`,` *default_value* ]`)`",
        "returnInfo": "Returns a dynamic array containing the same number of elements as in the original array. Each element has been shifted according to *shift_count*. New elements that are added in place of removed elements have a value of *default_value*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*array* | `dynamic` | *True* | The array to shift.|\n|*shift_count* | `int` |  *True* | The number of positions that array elements are shifted to the left. If the value is negative, the elements are shifted to the right. |\n|*default_value* | scalar | | The value used for an element that was shifted and removed. The default is null or an empty string depending on the type of elements in the *array*.|",
        "example": "print arr=dynamic([1,2,3,4,5])\n| extend arr_shift=array_shift_left(arr, 2)\n\nprint arr=dynamic([1,2,3,4,5])\n| extend arr_shift=array_shift_left(arr, 2, -1)\n\nprint arr=dynamic([1,2,3,4,5])\n| extend arr_shift=array_shift_left(arr, -2, -1)",
        "sourceLength": 3615
      }
    },
    {
      "name": "array_shift_right",
      "category": "KQL Function",
      "documentation": {
        "title": "array_shift_right()",
        "description": "Shifts the values inside a dynamic array to the right.",
        "syntax": "`array_shift_right(`*array*, *shift_count* [`,` *default_value* ]`)`",
        "returnInfo": "Returns a dynamic array containing the same amount of the elements as in the original array. Each element has been shifted according to *shift_count*. New elements that are added instead of the removed elements have a value of *default_value*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*array* | `dynamic` | *True* | The array to shift.|\n|*shift_count* | `int` |  *True* | The number of positions that array elements are shifted to the right. If the value is negative, the elements are shifted to the left. |\n|*default_value* | scalar | | The value used for an element that was shifted and removed. The default is null or an empty string depending on the type of elements in the *array*.|",
        "example": "print arr=dynamic([1,2,3,4,5])\n| extend arr_shift=array_shift_right(arr, 2)\n\nprint arr=dynamic([1,2,3,4,5])\n| extend arr_shift=array_shift_right(arr, 2, -1)\n\nprint arr=dynamic([1,2,3,4,5])\n| extend arr_shift=array_shift_right(arr, -2, -1)",
        "sourceLength": 3594
      }
    },
    {
      "name": "array_slice",
      "category": "KQL Function",
      "documentation": {
        "title": "array_slice()",
        "description": "Extracts a slice of a dynamic array.",
        "syntax": "`array_slice`(*array*, *start*, *end*)",
        "returnInfo": "Returns a dynamic array of the values in the range [`start..end`] from `array`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *array* | `dynamic` |  *True* | The array from which to extract the slice.|\n| *start*| `int` |  *True* | The start index of the slice (inclusive). Negative values are converted to `array_length`+`start`.|\n| *end*| `int` |  *True* | The last index of the slice. (inclusive). Negative values are converted to `array_length`+`end`.|\n\n> [!NOTE]\n> Out of bounds indices are ignored.",
        "example": "print arr=dynamic([1,2,3]) \n| extend sliced=array_slice(arr, 1, 2)\n\nprint arr=dynamic([1,2,3,4,5]) \n| extend sliced=array_slice(arr, 2, -1)\n\nprint arr=dynamic([1,2,3,4,5]) \n| extend sliced=array_slice(arr, -3, -2)",
        "sourceLength": 2735
      }
    },
    {
      "name": "array_sort_asc",
      "category": "KQL Function",
      "documentation": {
        "title": "array_sort_asc()",
        "description": "Receives one or more arrays. Sorts the first array in ascending order. Orders the remaining arrays to match the reordered first array.",
        "syntax": "`array_sort_asc(`*array1*[, ..., *arrayN*][`,` *nulls_last*]`)`\n\nIf *nulls_last* isn't provided, a default value of `true` is used.",
        "returnInfo": "Returns the same number of arrays as in the input, with the first array sorted in ascending order, and the remaining arrays ordered to match the reordered first array.\n\n`null` is returned for every array that differs in length from the first one.\n\nAn array which contains elements of different types, is sorted in the following order:\n\n* Numeric, `datetime`, and `timespan` elements\n* String elements\n* Guid elements\n* All other elements",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*array1...arrayN*| `dynamic` |  *True* | The array or list of arrays to sort.|\n| *nulls_last* | `bool` |  | Determines whether `null`s should be last.|",
        "example": "let array1 = dynamic([1,3,4,5,2]);\nlet array2 = dynamic([\"a\",\"b\",\"c\",\"d\",\"e\"]);\nprint array_sort_asc(array1,array2)\n\nlet Names = \"John,Paul,Jane,Kao\";\nlet SortedNames = strcat_array(array_sort_asc(split(Names, \",\")), \",\");\nprint result = SortedNames\n\ndatatable(command:string, command_time:datetime, user_id:string)\n[\n    'chmod',   datetime(2019-07-15),   \"user1\",\n    'ls',      datetime(2019-07-02),   \"user1\",\n    'dir',     datetime(2019-07-22),   \"user1\",\n    'mkdir',   datetime(2019-07-14),   \"user1\",\n    'rm',      datetime(2019-07-27),   \"user1\",\n    'pwd',     datetime(2019-07-25),   \"user1\",\n    'rm',      datetime(2019-07-23),   \"user2\",\n    'pwd',     datetime(2019-07-25),   \"user2\",\n]\n| summarize timestamps = make_list(command_time), commands = make_list(command) by user_id\n| project user_id, commands_in_chronological_order = array_sort_asc(timestamps, commands)[1]\n\nprint result=array_sort_asc(dynamic([null,\"blue\",\"yellow\",\"green\",null]))\n\nprint result=array_sort_asc(dynamic([null,\"blue\",\"yellow\",\"green\",null]), false)",
        "sourceLength": 6614
      }
    },
    {
      "name": "array_sort_desc",
      "category": "KQL Function",
      "documentation": {
        "title": "array_sort_desc()",
        "description": "Receives one or more arrays. Sorts the first array in descending order. Orders the remaining arrays to match the reordered first array.",
        "syntax": "`array_sort_desc(`*array1*[, ..., *argumentN*]`)`\n\n`array_sort_desc(`*array1*[, ..., *argumentN*]`,`*nulls_last*`)`\n\nIf *nulls_last* isn't provided, a default value of `true` is used.",
        "returnInfo": "Returns the same number of arrays as in the input, with the first array sorted in ascending order, and the remaining arrays ordered to match the reordered first array.\n\n`null` is returned for every array that differs in length from the first one.\n\nAn array which contains elements of different types, is sorted in the following order:\n\n* Numeric, `datetime`, and `timespan` elements\n* String elements\n* Guid elements\n* All other elements",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*array1...arrayN*| `dynamic` |  *True* | The array or list of arrays to sort.|\n| *nulls_last* | `bool` |  | Determines whether `null`s should be last.|",
        "example": "let array1 = dynamic([1,3,4,5,2]);\nlet array2 = dynamic([\"a\",\"b\",\"c\",\"d\",\"e\"]);\nprint array_sort_desc(array1,array2)\n\nlet Names = \"John,Paul,Jane,Kayo\";\nlet SortedNames = strcat_array(array_sort_desc(split(Names, \",\")), \",\");\nprint result = SortedNames\n\ndatatable(command:string, command_time:datetime, user_id:string)\n[\n    'chmod',   datetime(2019-07-15),   \"user1\",\n    'ls',      datetime(2019-07-02),   \"user1\",\n    'dir',     datetime(2019-07-22),   \"user1\",\n    'mkdir',   datetime(2019-07-14),   \"user1\",\n    'rm',      datetime(2019-07-27),   \"user1\",\n    'pwd',     datetime(2019-07-25),   \"user1\",\n    'rm',      datetime(2019-07-23),   \"user2\",\n    'pwd',     datetime(2019-07-25),   \"user2\",\n]\n| summarize timestamps = make_list(command_time), commands = make_list(command) by user_id\n| project user_id, commands_in_chronological_order = array_sort_desc(timestamps, commands)[1]\n\nprint result=array_sort_desc(dynamic([null,\"blue\",\"yellow\",\"green\",null]))\n\nprint result=array_sort_desc(dynamic([null,\"blue\",\"yellow\",\"green\",null]), false)",
        "sourceLength": 6688
      }
    },
    {
      "name": "array_split",
      "category": "KQL Function",
      "documentation": {
        "title": "array_split()",
        "description": "Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.",
        "syntax": "`array_split`(*array*, *index*)",
        "returnInfo": "Returns a dynamic array containing N+1 arrays with the values in the range `[0..i1), [i1..i2), ... [iN..array_length)` from `array`, where N is the number of input indices and `i1...iN` are the indices.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *array*| `dynamic` |  *True* | The array to split.|\n| *index* | `int` or `dynamic` |  *True*| An integer or dynamic array of integers used to indicate the location at which to split the array. The start index of arrays is zero. Negative values are converted to `array_length` + `value`.|",
        "example": "print arr=dynamic([1,2,3,4,5]) \n| extend arr_split=array_split(arr, 2)\n\nprint arr=dynamic([1,2,3,4,5]) \n| extend arr_split=array_split(arr, dynamic([1,3]))",
        "sourceLength": 2297
      }
    },
    {
      "name": "array_sum",
      "category": "KQL Function",
      "documentation": {
        "title": "array_sum()",
        "description": "Calculates the sum of elements in a dynamic array.",
        "syntax": "`array_sum`(*array*)",
        "returnInfo": "Returns a double type value with the sum of the elements of the array.\n\n> [!NOTE]\n> If the array contains elements of non-numeric types, the result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *array*| `dynamic` |  *True*| The array to sum.|",
        "example": "print arr=dynamic([1,2,3,4]) \n| extend arr_sum=array_sum(arr)",
        "sourceLength": 1523
      }
    },
    {
      "name": "asin",
      "category": "KQL Function",
      "documentation": {
        "title": "asin()",
        "description": "Calculates the angle whose sine is the specified number, or the arc sine. This is the inverse operation of `sin()`.",
        "syntax": "`asin(`*x*`)`",
        "returnInfo": "Returns the value of the arc sine of `x`. Returns `null` if `x` < -1 or `x` > 1.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*x* | `real` |  *True*| A real number in range [-1, 1] used to calculate the arc sine.|",
        "example": "asin(0.5)",
        "sourceLength": 1388
      }
    },
    {
      "name": "assert",
      "category": "KQL Function",
      "documentation": {
        "title": "assert()",
        "description": "Checks for a condition. If the condition is false, outputs error messages and fails the query.\n\n> [!NOTE]\n> The `assert` function gets evaluated during the query analysis phase, before optimizations such as constant-folding and predicate short-circuiting get applied.\n\n> [!NOTE]\n> The parameters given to `assert` must be evaluated to constants during the query analysis phase. In other words, it can be constructed from other expressions referencing constants only, and can't be bound to row-context.",
        "syntax": "`assert(`*condition*`,`*message*`)`",
        "returnInfo": "Returns `true` if the condition is `true`.\nRaises a semantic error if the condition is evaluated to `false`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *condition* | `bool` |  *True* | The conditional expression to evaluate. The condition must be evaluated to constant during the query analysis phase.|\n| *message* | `string` |  *True* | The message used if assertion is evaluated to `false`.|",
        "example": "let checkLength = (len:long, s:string)\n{\n    assert(len > 0, \"Length must be greater than zero\") and\n    strlen(s) > len\n};\ndatatable(input:string)\n[\n    '123',\n    '4567'\n]\n| where checkLength(len=long(-1), input)\n\nlet checkLength = (len:long, s:string)\n{\n    assert(len > 0, \"Length must be greater than zero\") and strlen(s) > len\n};\ndatatable(input:string)\n[\n    '123',\n    '4567'\n]\n| where checkLength(len=3, input)\n\nlet b=false;\nprint x=\"Hello\"\n| where b\n| where assert(b, \"Assertion failed\")",
        "sourceLength": 3545
      }
    },
    {
      "name": "atan",
      "category": "KQL Function",
      "documentation": {
        "title": "atan()",
        "description": "Returns the angle whose tangent is the specified number. This is the inverse operation of `tan()`.",
        "syntax": "`atan(`*x*`)`",
        "returnInfo": "The value of the arc tangent of `x`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | `real` |  *True* | The number used to calculate the arc tangent.|",
        "example": "atan(0.5)",
        "sourceLength": 1309
      }
    },
    {
      "name": "atan2",
      "category": "KQL Function",
      "documentation": {
        "title": "atan2()",
        "description": "Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).",
        "syntax": "`atan2(`*y*`,`*x*`)`",
        "returnInfo": "Returns the angle in radians between the positive x-axis and the ray from the origin to the point (y, x).",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *y* | `real` |  *True* | The Y coordinate.|\n| *x* | `real` |  *True* | The X coordinate.|",
        "example": "print atan2_0 = atan2(1,1) // Pi / 4 radians (45 degrees)\n| extend atan2_1 = atan2(0,-1) // Pi radians (180 degrees)\n| extend atan2_2 = atan2(-1,0) // - Pi / 2 radians (-90 degrees)",
        "sourceLength": 1784
      }
    },
    {
      "name": "bag_has_key",
      "category": "KQL Function",
      "documentation": {
        "title": "bag_has_key()",
        "description": "Checks whether a dynamic property bag object contains a given key.",
        "syntax": "`bag_has_key(`*bag*`,`*key*`)`",
        "returnInfo": "True or false depending on if the key exists in the bag.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n| *bag* | `dynamic` |  *True* | The property bag to search. |\n| *key* | `string` |  *True* | The key for which to search.  Search for a nested key using the JSONPath notation. Array indexing isn't supported. |",
        "example": "datatable(input: dynamic)\n[\n    dynamic({'key1' : 123, 'key2': 'abc'}),\n    dynamic({'key1' : 123, 'key3': 'abc'}),\n]\n| extend result = bag_has_key(input, 'key2')\n\ndatatable(input: dynamic)\n[\n    dynamic({'key1': 123, 'key2': {'prop1' : 'abc', 'prop2': 'xyz'}, 'key3': [100, 200]}),\n]\n| extend result = bag_has_key(input, '$.key2.prop1')",
        "sourceLength": 2712
      }
    },
    {
      "name": "bag_keys",
      "category": "KQL Function",
      "documentation": {
        "title": "bag_keys()",
        "description": "Enumerates all the root keys in a dynamic property bag object.",
        "syntax": "`bag_keys(`*object*`)`",
        "returnInfo": "An array of keys, order is undetermined.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n| *object* | `dynamic` |  *True* | The property bag object for which to enumerate keys. |",
        "example": "datatable(index:long, d:dynamic) [\n    1, dynamic({'a':'b', 'c':123}), \n    2, dynamic({'a':'b', 'c':{'d':123}}),\n    3, dynamic({'a':'b', 'c':[{'d':123}]}),\n    4, dynamic(null),\n    5, dynamic({}),\n    6, dynamic('a'),\n    7, dynamic([])\n]\n| extend keys = bag_keys(d)",
        "sourceLength": 2021
      }
    },
    {
      "name": "bag_merge",
      "category": "KQL Function",
      "documentation": {
        "title": "bag_merge()",
        "description": "The function merges multiple `dynamic` property bags into a single `dynamic` property bag object, consolidating all properties from the input bags.",
        "syntax": "`bag_merge(`*bag1*`,`*bag2*`,`*bag3*`, ...])`",
        "returnInfo": "A `dynamic` property bag containing the merged results of all input property bags. If a key is present in multiple input bags, the value associated with the key from the leftmost argument takes precedence.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n| *bag1...bagN* | `dynamic` |  *True* | The property bags to merge. The function accepts between 2 to 64 arguments. |",
        "example": "print result = bag_merge(\n   dynamic({'A1':12, 'B1':2, 'C1':3}),\n   dynamic({'A2':81, 'B2':82, 'A1':1}))",
        "sourceLength": 1821
      }
    },
    {
      "name": "bag_pack_columns",
      "category": "KQL Function",
      "documentation": {
        "title": "bag_pack_columns()",
        "description": "Creates a dynamic property bag object from a list of columns.",
        "syntax": "`bag_pack_columns(`*column1*`,` *column2*`,... )`",
        "returnInfo": "Returns a `dynamic` property bag object from the listed *columns*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*column*| scalar |  *True* | A column to pack. The name of the column is the property name in the property bag.|",
        "example": "datatable(Id: string, Value: string, Other: long)\n[\n    \"A\", \"val_a\", 1,\n    \"B\", \"val_b\", 2,\n    \"C\", \"val_c\", 3\n]\n| extend Packed = bag_pack_columns(Id, Value)",
        "sourceLength": 1945
      }
    },
    {
      "name": "bag_remove_keys",
      "category": "KQL Function",
      "documentation": {
        "title": "bag_remove_keys()",
        "description": "Removes keys and associated values from a `dynamic` property bag.",
        "syntax": "`bag_remove_keys(`*bag*`,`*keys*`)`",
        "returnInfo": "Returns a `dynamic` property bag without specified keys and their values.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n| *bag* | `dynamic` |  *True* | The property bag from which to remove keys. |\n| *keys* | `dynamic` |  *True* | List of keys to be removed from the input. The keys are the first level of the property bag. You can specify keys on the nested levels using JSONPath notation. Array indexing isn't supported. |",
        "example": "datatable(input:dynamic)\n[\n    dynamic({'key1' : 123,     'key2': 'abc'}),\n    dynamic({'key1' : 'value', 'key3': 42.0}),\n]\n| extend result=bag_remove_keys(input, dynamic(['key2', 'key4']))\n\ndatatable(input:dynamic)\n[\n    dynamic({'key1': 123, 'key2': {'prop1' : 'abc', 'prop2': 'xyz'}, 'key3': [100, 200]}),\n]\n| extend result=bag_remove_keys(input, dynamic(['$.key2.prop1', 'key3']))",
        "sourceLength": 3075
      }
    },
    {
      "name": "bag_set_key",
      "category": "KQL Function",
      "documentation": {
        "title": "bag_set_key()",
        "description": "bag_set_key() receives a `dynamic` property-bag, a key and a value. The function sets the given key in the bag to the given value. The function overrides any existing value in case the key already exists.",
        "syntax": "`bag_set_key(`*bag*`,`*key*`,`*value*`)`",
        "returnInfo": "Returns a `dynamic` property-bag with specified key-value pairs. If the input bag isn't a property-bag, a `null` value is returned.\n\n> [!NOTE]\n> To treat `null`s as empty bags, use `coalesce(x, dynamic({}))`​.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *bag* | `dynamic` |  *True* | The property bag to modify. |\n| *key* | `string` |  *True* | The key to set. Either a JSON path (you can specify a key on the nested levels using JSONPath notation) or the key name for a root level key. Array indexing or root JSON paths aren't supported. |\n| *value* | any scalar data type |  *True* | The value to which the key is set. |",
        "example": "datatable(input: dynamic) [\n    dynamic({'key1': 1, 'key2': 2}), \n    dynamic({'key1': 1, 'key3': 'abc'}),\n]\n| extend result = bag_set_key(input, 'key3', 3)\n\ndatatable(input: dynamic)[\n    dynamic({'key1': 123, 'key2': {'prop1': 123, 'prop2': 'xyz'}}),\n    dynamic({'key1': 123})\n]\n| extend result = bag_set_key(input, '$.key2.prop1', 'abc')",
        "sourceLength": 3443
      }
    },
    {
      "name": "base64_decode_toarray",
      "category": "KQL Function",
      "documentation": {
        "title": "base64_decode_toarray()",
        "description": "Decodes a base64 string to an array of long values.",
        "syntax": "`base64_decode_toarray(`*base64_string*`)`",
        "returnInfo": "Returns an array of long values decoded from a base64 string.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n| *base64_string* | `string` |  *True* |  The value to decode from base64 to an array of long values.|",
        "example": "print Quine=base64_decode_toarray(\"S3VzdG8=\")  \n// 'K', 'u', 's', 't', 'o'",
        "sourceLength": 1889
      }
    },
    {
      "name": "base64_decode_toguid",
      "category": "KQL Function",
      "documentation": {
        "title": "base64_decode_toguid()",
        "description": "Decodes a base64 string to a GUID.",
        "syntax": "`base64_decode_toguid(`*base64_string*`)`",
        "returnInfo": "Returns a GUID decoded from a base64 string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *base64_string* | `string` |  *True* | The value to decode from base64 to a GUID. |",
        "example": "print Quine = base64_decode_toguid(\"JpbpECu8dUy7Pv5gbeJXAA==\")  \n\nprint Empty = base64_decode_toguid(\"abcd1231\")",
        "sourceLength": 2189
      }
    },
    {
      "name": "base64_decode_tostring",
      "category": "KQL Function",
      "documentation": {
        "title": "base64_decode_tostring()",
        "description": "Decodes a base64 string to a UTF-8 string.\n\n> **Deprecated aliases:** base64_decodestring()",
        "syntax": "`base64_decode_tostring(`*base64_string*`)`",
        "returnInfo": "Returns UTF-8 string decoded from base64 string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *base64_string* | `string` |  *True* | The value to decode from base64 to UTF-8 string. |",
        "example": "print Quine=base64_decode_tostring(\"S3VzdG8=\")\n\nprint Empty=base64_decode_tostring(\"U3RyaW5n0KHR0tGA0L7Rh9C60LA=\")",
        "sourceLength": 2345
      }
    },
    {
      "name": "base64_encode_fromarray",
      "category": "KQL Function",
      "documentation": {
        "title": "base64_encode_fromarray()",
        "description": "Encodes a base64 string from a bytes array.",
        "syntax": "`base64_encode_fromarray(`*base64_string_decoded_as_a_byte_array*`)`",
        "returnInfo": "Returns the base64 string encoded from the bytes array. Note that byte is an integer type.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *base64_string_decoded_as_a_byte_array* | `dynamic` |  *True* | The bytes (integer) array to be encoded into a base64 string. |",
        "example": "let bytes_array = toscalar(print base64_decode_toarray(\"S3VzdG8=\"));\nprint decoded_base64_string = base64_encode_fromarray(bytes_array)\n\nlet empty_bytes_array = toscalar(print base64_decode_toarray(\"U3RyaW5n0KHR0tGA0L7Rh9C60LA\"));\nprint empty_string = base64_encode_fromarray(empty_bytes_array)",
        "sourceLength": 2876
      }
    },
    {
      "name": "base64_encode_fromguid",
      "category": "KQL Function",
      "documentation": {
        "title": "base64_encode_fromguid()",
        "description": "Encodes a GUID to a base64 string.",
        "syntax": "`base64_encode_fromguid(`*guid*`)`",
        "returnInfo": "Returns a base64 string encoded from a GUID.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *guid* | `guid` |  *True* | The value to encode to a base64 string. |",
        "example": "print Quine = base64_encode_fromguid(toguid(\"ae3133f2-6e22-49ae-b06a-16e6a9b212eb\"))  \n\nprint Empty = base64_encode_fromguid(\"abcd1231\")",
        "sourceLength": 2322
      }
    },
    {
      "name": "base64_encode_tostring",
      "category": "KQL Function",
      "documentation": {
        "title": "base64_encode_tostring()",
        "description": "Encodes a string as base64 string.\n\n> **Deprecated aliases:** base64_encodestring()",
        "syntax": "`base64_encode_tostring(`*string*`)`",
        "returnInfo": "Returns *string* encoded as a base64 string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *string* | `string` |  *True* |  The value to encode as a base64 string. |",
        "example": "print Quine=base64_encode_tostring(\"Kusto\")",
        "sourceLength": 1737
      }
    },
    {
      "name": "beta_cdf",
      "category": "KQL Function",
      "documentation": {
        "title": "beta_cdf()",
        "description": "Returns the standard cumulative beta distribution function.\n\nIf *probability* = `beta_cdf(`*x*,...`)`, then `beta_inv(`*probability*,...`)` = *x*.\n\nThe beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.",
        "syntax": "`beta_cdf(`*x*`,` *alpha*`,` *beta*`)`",
        "returnInfo": "The cumulative beta distribution function.\n\n> [!NOTE]\n>\n> * If any argument is nonnumeric, the function returns `null`.\n> * If `x < 0` or `x > 1`, the function returns `NaN`.\n> * If `alpha ≤ 0` or `alpha > 10000`, the function returns `NaN`.\n> * If `beta ≤ 0` or `beta > 10000`, the function returns `NaN`.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *x* | int, long, or real |  *True*| A value at which to evaluate the function.|\n| *alpha* | int, long, or real |  *True*| A parameter of the distribution.|\n| *beta* | int, long, or real |  *True*| A parameter of the distribution.|",
        "example": "datatable(x:double, alpha:double, beta:double, comment:string)\n[\n    0.9, 10.0, 20.0, \"Valid input\",\n    1.5, 10.0, 20.0, \"x > 1, yields NaN\",\n    double(-10), 10.0, 20.0, \"x < 0, yields NaN\",\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\n]\n| extend b = beta_cdf(x, alpha, beta)",
        "sourceLength": 2950
      }
    },
    {
      "name": "beta_inv",
      "category": "KQL Function",
      "documentation": {
        "title": "beta_inv()",
        "description": "Returns the inverse of the beta cumulative probability density function.\n\nIf *probability* = `beta_cdf(`*x*,...`)`, then `beta_inv(`*probability*,...`)` = *x*.\n\nThe beta distribution can be used in project planning to model probable completion times given an expected completion time and variability.",
        "syntax": "`beta_inv(`*probability*`,`*alpha*`,`*beta*`)`",
        "returnInfo": "The inverse of the beta cumulative probability density function beta_cdf()\n\n> [!NOTE]\n>\n> * If any argument is nonnumeric, the function returns `null`.\n> * If `alpha ≤ 0` or `beta ≤ 0`, the function returns `null`.\n> * If `probability ≤ 0` or `probability > 1`, the function returns `NaN`.\n> * Given a value for *probability*, `beta_inv()` seeks that value x such that `beta_cdf(x, alpha, beta)` `=` *probability*.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *probability* | int, long, or real |  *True*| A probability associated with the beta distribution.|\n| *alpha* | int, long, or real |  *True*| A parameter of the distribution.|\n| *beta* | int, long, or real |  *True*| A parameter of the distribution.|",
        "example": "datatable(p:double, alpha:double, beta:double, comment:string)\n[\n    0.1, 10.0, 20.0, \"Valid input\",\n    1.5, 10.0, 20.0, \"p > 1, yields null\",\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\n]\n| extend b = beta_inv(p, alpha, beta)",
        "sourceLength": 3046
      }
    },
    {
      "name": "beta_pdf",
      "category": "KQL Function",
      "documentation": {
        "title": "beta_pdf()",
        "description": "Returns the probability density beta function.\n\nThe beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.",
        "syntax": "`beta_pdf(`*x*`,` *alpha*`,` *beta*`)`",
        "returnInfo": "The probability beta density function.\n\n> [!NOTE]\n>\n> * If any argument is nonnumeric, the function returns `null`.\n> * If `x ≤ 0` or `1 ≤ x`, the function returns `NaN`.\n> * If `alpha ≤ 0` or `beta ≤ 0`, the function returns `NaN`.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *x* | int, long, or real |  *True*| A value at which to evaluate the function.|\n| *alpha* | int, long, or real |  *True*| A parameter of the distribution.|\n| *beta* | int, long, or real |  *True*| A parameter of the distribution.|",
        "example": "datatable(x:double, alpha:double, beta:double, comment:string)\n[\n    0.5, 10.0, 20.0, \"Valid input\",\n    1.5, 10.0, 20.0, \"x > 1, yields NaN\",\n    double(-10), 10.0, 20.0, \"x < 0, yields NaN\",\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\n]\n| extend r = beta_pdf(x, alpha, beta)",
        "sourceLength": 2770
      }
    },
    {
      "name": "bin",
      "category": "KQL Function",
      "documentation": {
        "title": "bin()",
        "description": "Rounds values down to an integer multiple of a given bin size.\n\nUsed frequently in combination with `summarize by ...`.\nIf you have a scattered set of values, they'll be grouped into a smaller set of specific values.\n\n> The `bin()` and `floor()` functions are equivalent",
        "syntax": "`bin(`*value*`,`*roundTo*`)`",
        "returnInfo": "The nearest multiple of *roundTo* below *value*. Null values, a null bin size, or a negative bin size will result in null.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* |  int, long, real, timespan, or datetime |  *True* | The value to round down. |\n| *roundTo* |  int, long, real, or timespan |  *True* | The \"bin size\" that divides *value*. |",
        "example": "print bin(4.5, 1)\n\nprint bin(time(16d), 7d)\n\nprint bin(datetime(1970-05-11 13:45:07), 1d)\n\nlet Start = datetime('2007-04-07');\nlet End = Start + 7d;\nStormEvents\n| where StartTime between (Start .. End)\n| where State == \"CALIFORNIA\" and EventType == \"Strong Wind\"\n| summarize PropertyDamage=sum(DamageProperty) by bin(StartTime, 1d)\n\nlet Start = datetime('2007-04-07');\nlet End = Start + 7d;\nStormEvents\n| where StartTime between (Start .. End)\n| where State == \"CALIFORNIA\" and EventType == \"Strong Wind\"\n| union (\n    range x from 1 to 1 step 1\n    | mv-expand StartTime=range(Start, End, 1d) to typeof(datetime)\n    | extend PropertyDamage=0\n    )\n| summarize PropertyDamage=sum(DamageProperty) by bin(StartTime, 1d)",
        "sourceLength": 5803
      }
    },
    {
      "name": "bin_at",
      "category": "KQL Function",
      "documentation": {
        "title": "bin_at()",
        "description": "Returns the value rounded down to the nearest bin size, which is aligned to a fixed reference point.\n\nIn contrast to the bin() function, where the point of alignment is predefined, bin_at() allows you to define a fixed point for alignment. Results can align before or after the fixed point.",
        "syntax": "`bin_at` `(`*value*`,`*bin_size*`,`*fixed_point*`)`",
        "returnInfo": "The nearest multiple of *bin_size* below the given *value* that aligns to the specified *fixed_point*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `int`, `long`, `real`, `timespan`, or `datetime` |  *True* | The value to round. |\n| *bin_size* | `int`, `long`, `real`, or `timespan` |  *True* | The size of each bin. |\n| *fixed_point* | `int`, `long`, `real`, `timespan`, or `datetime` |  *True* | A constant of the same type as *value*, which is used as a fixed reference point.|\n\n> [!NOTE]\n> If *value* is a `timespan` or `datetime`, then the *bin_size* must be a `timespan`.",
        "example": "print bin_at(6.5, 2.5, 7)\n\nprint bin_at(time(1h), 1d, 12h)\n\nprint bin_at(datetime(2017-05-15 10:20:00.0), 1d, datetime(1970-01-01 12:00:00.0))\n\nprint bin_at(datetime(2017-05-17 10:20:00.0), 7d, datetime(2017-06-04 00:00:00.0))\n\ndatatable(Date:datetime, NumOfEvents:int)[\ndatetime(2018-02-24T15:14),3,\ndatetime(2018-02-24T15:24),4,\ndatetime(2018-02-23T16:14),4,\ndatetime(2018-02-23T17:29),4,\ndatetime(2018-02-26T15:14),5]\n| summarize TotalEvents=sum(NumOfEvents) by bin_at(Date, 1d, datetime(2018-02-24 15:14:00.0000000))",
        "sourceLength": 4913
      }
    },
    {
      "name": "bin_auto",
      "category": "KQL Function",
      "documentation": {
        "title": "bin_auto()",
        "description": "Rounds values down to a fixed-size bin, with control over the bin size and starting point provided by a query property.",
        "syntax": "`bin_auto` `(`*value*`)`",
        "returnInfo": "The nearest multiple of `query_bin_auto_size` below *value*, shifted so that `query_bin_auto_at`\nwill be translated into itself.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | int, long, real, timespan, or datetime |  *True* |  The value to round into bins. |\n\nTo control the bin size and starting point, set the following parameters before using the function.\n\n| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *query_bin_auto_size* | int, long, real, or timespan |  *True* |  Indicates the size of each bin.|\n| *query_bin_auto_at* | int, long, real, or timespan | |  Indicates one value of *value* which is a \"fixed point\" for which `bin_auto(fixed_point)` == `fixed_point`. Default is 0.|",
        "example": "set query_bin_auto_size=1h;\nset query_bin_auto_at=datetime(2017-01-01 00:05);\nrange Timestamp from datetime(2017-01-01 00:05) to datetime(2017-01-01 02:00) step 1m\n| summarize count() by bin_auto(Timestamp)",
        "sourceLength": 1960
      }
    },
    {
      "name": "binary_and",
      "category": "KQL Function",
      "documentation": {
        "title": "binary_and()",
        "description": "Performs a bitwise `AND` operation on two values.",
        "syntax": "`binary_and(`*value1*`,`*value2*`)`",
        "returnInfo": "Returns the result of a bitwise `AND` operation between `value1` and `value2`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value1* | `long` |  *True* | The left-hand value of the bitwise `AND` operation. |\n| *value2* | `long` |  *True* | The right-hand value of the bitwise `AND` operation. |",
        "example": "print result = binary_and(6, 3)",
        "sourceLength": 1441
      }
    },
    {
      "name": "binary_not",
      "category": "KQL Function",
      "documentation": {
        "title": "binary_not()",
        "description": "Performs a bitwise negation operation on a given value.",
        "syntax": "`binary_not(`*value*`)`",
        "returnInfo": "Returns logical NOT operation on a number: value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `long` |  *True* | The value to negate. |",
        "example": "binary_not(100)",
        "sourceLength": 1269
      }
    },
    {
      "name": "binary_or",
      "category": "KQL Function",
      "documentation": {
        "title": "binary_or()",
        "description": "Performs a bitwise `or` operation on two values.",
        "syntax": "`binary_or(`*value1*`,` *value2* `)`",
        "returnInfo": "Returns logical OR operation on a pair of numbers: value1 | value2.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value1* | `long` |  *True* | The left-hand value of the bitwise `OR` operation. |\n| *value2* | `long` |  *True* | The right-hand value of the bitwise `OR` operation. |",
        "example": "print result = binary_or(5, 3)",
        "sourceLength": 1461
      }
    },
    {
      "name": "binary_shift_left",
      "category": "KQL Function",
      "documentation": {
        "title": "binary_shift_left()",
        "description": "Performs a binary shift left operation on a pair of numbers.",
        "syntax": "`binary_shift_left(`*value*`,`*shift*`)`",
        "returnInfo": "Returns binary shift left operation on a pair of numbers: value << (shift%64).\nIf n is negative, a NULL value is returned.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `int` |  *True* | The value to shift left. |\n| *shift* | `int` |  *True* | The number of bits to shift left. |",
        "example": "binary_shift_left(1,2)",
        "sourceLength": 1498
      }
    },
    {
      "name": "binary_shift_right",
      "category": "KQL Function",
      "documentation": {
        "title": "binary_shift_right()",
        "description": "Performs a binary shift right operation on a pair of numbers.",
        "syntax": "`binary_shift_right(`*value*`,`*shift*`)`",
        "returnInfo": "Returns binary shift right operation on a pair of numbers: value >> (shift%64).\nIf n is negative, a NULL value is returned.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `int` |  *True* | The value to shift right. |\n| *shift* | `int` |  *True* | The number of bits to shift right. |",
        "example": "binary_shift_right(1,2)",
        "sourceLength": 1507
      }
    },
    {
      "name": "binary_xor",
      "category": "KQL Function",
      "documentation": {
        "title": "binary_xor()",
        "description": "Performs a bitwise `xor` operation on two values.",
        "syntax": "`binary_xor(`*value1*`,`*value2*`)`",
        "returnInfo": "Returns logical XOR operation on a pair of numbers: value1 ^ value2.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value1* | `int` |  *True* | The left-side value of the XOR operation. |\n| *value2* | `int` |  *True* | The right-side value of the XOR operation. |",
        "example": "binary_xor(1,1)\n\nbinary_xor(1,2)",
        "sourceLength": 1736
      }
    },
    {
      "name": "bitset_count_ones",
      "category": "KQL Function",
      "documentation": {
        "title": "bitset_count_ones()",
        "description": "Performs a bitwise operation on the binary representation of a number.",
        "syntax": "`bitset_count_ones(`*value*`)`",
        "returnInfo": "Returns the number of set bits in the binary representation of a number.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `int` |  *True* | The value for which to calculate the number of set bits. |",
        "example": "// 42 = 32+8+2 : b'00101010' == 3 bits set\nprint ones = bitset_count_ones(42)",
        "sourceLength": 1516
      }
    },
    {
      "name": "case",
      "category": "KQL Function",
      "documentation": {
        "title": "case()",
        "description": "Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.\n\nIf none of the predicates return `true`, the result of the `else` expression is returned.\nAll `predicate` arguments must be expressions that evaluate to a  `boolean` value.\nAll `then` arguments and the `else` argument must be of the same type.",
        "syntax": "`case(`*predicate_1*, *then_1*,\n       [*predicate_2*, *then_2*, ...]\n       *else*`)`",
        "returnInfo": "The value of the first *then_i* whose *predicate_i* evaluates to `true`, or the value of *else* if neither of the predicates are satisfied.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *predicate* | `string` |  *True* | An expression that evaluates to a `boolean` value. |\n| *then* | `string` |  *True* | An expression that gets evaluated and its value is returned from the function if *predicate* is the first predicate that evaluates to `true`. |\n| *else* | `string` |  *True* | An expression that gets evaluated and its value is returned from the function if neither of the *predicate_i* evaluate to `true`. |",
        "example": "range Size from 1 to 15 step 2\n| extend bucket = case(Size <= 3, \"Small\", \n                       Size <= 10, \"Medium\", \n                       \"Large\")",
        "sourceLength": 2475
      }
    },
    {
      "name": "ceiling",
      "category": "KQL Function",
      "documentation": {
        "title": "ceiling()",
        "description": "Calculates the smallest integer greater than, or equal to, the specified numeric expression.",
        "syntax": "`ceiling(`*number*`)`",
        "returnInfo": "The smallest integer greater than, or equal to, the specified numeric expression.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *number* | int, long, or real |  *True* | The value to round up. |",
        "example": "print c1 = ceiling(-1.1), c2 = ceiling(0), c3 = ceiling(0.9)",
        "sourceLength": 1466
      }
    },
    {
      "name": "cluster",
      "category": "KQL Function",
      "documentation": {
        "title": "cluster()",
        "description": ":::moniker range=\"azure-data-explorer\"\nChanges the reference of the query to a remote cluster. To access a database within the same cluster, use the database() function. For more information, see cross-database and cross-cluster queries.\n:::moniker-end\n\n:::moniker range=\"microsoft-fabric\"\nChanges the reference of the query to a remote Eventhouse. To access a database within the same Eventhouse, use the database() function. For more information, see cross-database and cross-cluster queries.\n<!-- Update link to the correct version for Fabric -->\n:::moniker-end",
        "syntax": "`cluster(`*name*`)`",
        "returnInfo": "",
        "parametersTable": ":::moniker range=\"azure-data-explorer\"\n| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *name* | `string` |  *True* | The name of the cluster to reference. The value can be specified as a fully qualified domain name, or the name of the cluster without the `.kusto.windows.net` suffix. The cluster name is treated as case-insenstive and the recommendation is to provide it lower-case. The value can't be the result of subquery evaluation. |\n:::moniker-end\n\n:::moniker range=\"microsoft-fabric\"\n| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *name* | `string` |  *True* | The full URL of the Eventhouse to reference. The value can be specified as a fully qualified domain name, or the name of the Eventhouse. The Eventhouse name is treated as case-insenstive and the recommendation is to provide it lower-case. The value can't be the result of subquery evaluation. |\n:::moniker-end",
        "example": "cluster('help').database('Samples').StormEvents | count\n\ncluster('help.kusto.windows.net').database('Samples').StormEvents | count\n\ncluster('help').database('Samples').StormEvents | count\n\ncluster('help.kusto.windows.net').database('Samples').StormEvents | count\n\nlet foo = (clusterName:string)\n{\n    cluster(clusterName).database('Samples').StormEvents | count\n};\nfoo('help')\n\n.create function foo(clusterName:string)\n{\n    cluster(clusterName).database('Samples').StormEvents | count\n};",
        "sourceLength": 4486
      }
    },
    {
      "name": "coalesce",
      "category": "KQL Function",
      "documentation": {
        "title": "coalesce()",
        "description": "Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.",
        "syntax": "`coalesce(`*arg*`,`*arg_2*`,[`*arg_3*`,...])`",
        "returnInfo": "The value of the first *arg* whose value isn't null (or not-empty for string expressions).",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| arg | scalar |  *True* | The expression to be evaluated.|\n\n> [!NOTE]\n>\n> * All arguments must be of the same type.\n> * Maximum of 64 arguments is supported.",
        "example": "print result=coalesce(tolong(\"not a number\"), tolong(\"42\"), 33)",
        "sourceLength": 1592
      }
    },
    {
      "name": "column_ifexists",
      "category": "KQL Function",
      "documentation": {
        "title": "column_ifexists()",
        "description": "Displays the column, if the column exists. Otherwise, it returns the default column.\n\n> **Deprecated aliases:** columnifexists()",
        "syntax": "`column_ifexists(`*columnName*`,`*defaultValue*`)`",
        "returnInfo": "If *columnName* exists, then returns the column. Otherwise, it returns the *defaultValue* column.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *columnName* | `string` |  *True* | The name of the column to return.|\n| *defaultValue* | scalar |  *True* | The default column to return if *columnName* doesn't exist in the table. This value can be any scalar expression. For example, a reference to another column.|",
        "example": "StormEvents | project column_ifexists(\"Capital\", State)",
        "sourceLength": 2096
      }
    },
    {
      "name": "column_names_of",
      "category": "KQL Function",
      "documentation": {
        "title": "column_names_of()",
        "description": "Returns the column names of a tabular expression.",
        "syntax": "`column_names_of(`*expression*`)`",
        "returnInfo": "Returns a dynamic array of strings, where each element represents a column name of the `expression` schema. If the expression doesn't exist, an error is raised.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *expression* | `expression` | *True* | The tabular expression to evaluate. |",
        "example": "",
        "sourceLength": 1972
      }
    },
    {
      "name": "convert_angle",
      "category": "KQL Function",
      "documentation": {
        "title": "convert_angle",
        "description": "Converts an angle value from one unit to another.",
        "syntax": "`convert_angle(`*value*`,`*from*`,`*to*`)`",
        "returnInfo": "Returns the input value converted from one angle unit to another. Invalid units return `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| `value` | `real` |  *True* | The value to be converted. |\n| `from` | `string` |  *True* | The unit to convert from. For possible values, see Conversion units. |\n| `to` | `string` |  *True* | The unit to convert to. For possible values, see Conversion units. |\n\n### Conversion units\n\n* Arcminute\n* Arcsecond\n* Centiradian\n* Deciradian\n* Degree\n* Gradian\n* Microdegree\n* Microradian\n* Millidegree\n* Milliradian\n* Nanodegree\n* Nanoradian\n* NatoMil\n* Radian\n* Revolution\n* Tilt",
        "example": "print result = convert_angle(1.2, 'Degree', 'Arcminute')",
        "sourceLength": 1993
      }
    },
    {
      "name": "convert_energy",
      "category": "KQL Function",
      "documentation": {
        "title": "convert_energy",
        "description": "Converts an energy value from one unit to another.",
        "syntax": "`convert_energy(`*value*`,`*from*`,`*to*`)`",
        "returnInfo": "Returns the input value converted from one energy unit to another. Invalid units return `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `real` |  *True* | The value to be converted. |\n| *from* | `string` |  *True* | The unit to convert from. For possible values, see Conversion units. |\n| *to* | `string` |  *True* | The unit to convert to. For possible values, see Conversion units. |\n\n### Conversion units\n\n* BritishThermalUnit\n* Calorie\n* DecathermEc\n* DecathermImperial\n* DecathermUs\n* ElectronVolt\n* Erg\n* FootPound\n* GigabritishThermalUnit\n* GigaelectronVolt\n* Gigajoule\n* GigawattDay\n* GigawattHour\n* HorsepowerHour\n* Joule\n* KilobritishThermalUnit\n* Kilocalorie\n* KiloelectronVolt\n* Kilojoule\n* KilowattDay\n* KilowattHour\n* MegabritishThermalUnit\n* Megacalorie\n* MegaelectronVolt\n* Megajoule\n* MegawattDay\n* MegawattHour\n* Millijoule\n* TeraelectronVolt\n* TerawattDay\n* TerawattHour\n* ThermEc\n* ThermImperial\n* ThermUs\n* WattDay\n* WattHour",
        "example": "print result = convert_energy(1.2, 'Joule', 'BritishThermalUnit')",
        "sourceLength": 2385
      }
    },
    {
      "name": "convert_force",
      "category": "KQL Function",
      "documentation": {
        "title": "convert_force",
        "description": "Converts a force value from one unit to another.",
        "syntax": "`convert_force(`*value*`,`*from*`,`*to*`)`",
        "returnInfo": "Returns the input value converted from one force unit to another. Invalid units return `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `real` |  *True* | The value to be converted. |\n| *from* | `string` |  *True* | The unit to convert from. For possible values, see Conversion units. |\n| *to* | `string` |  *True* | The unit to convert to. For possible values, see Conversion units. |\n\n### Conversion units\n\n* Decanewton\n* Dyn\n* KilogramForce\n* Kilonewton\n* KiloPond\n* KilopoundForce\n* Meganewton\n* Micronewton\n* Millinewton\n* Newton\n* OunceForce\n* Poundal\n* PoundForce\n* ShortTonForce\n* TonneForce",
        "example": "print result = convert_force(1.2, 'Newton', 'Decanewton')",
        "sourceLength": 1988
      }
    },
    {
      "name": "convert_length",
      "category": "KQL Function",
      "documentation": {
        "title": "convert_length",
        "description": "Converts a length value from one unit to another.",
        "syntax": "`convert_length(`*value*`,`*from*`,`*to*`)`",
        "returnInfo": "Returns the input value converted from one length unit to another. Invalid units return `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `real` |  *True* | The value to be converted. |\n| *from* | `string` |  *True* | The unit to convert from. For possible values, see Conversion units. |\n| *to* | `string` |  *True* | The unit to convert to. For possible values, see Conversion units. |\n\n### Conversion units\n\n* Angstrom\n* AstronomicalUnit\n* Centimeter\n* Chain\n* DataMile\n* Decameter\n* Decimeter\n* DtpPica\n* DtpPoint\n* Fathom\n* Foot\n* Hand\n* Hectometer\n* Inch\n* KilolightYear\n* Kilometer\n* Kiloparsec\n* LightYear\n* MegalightYear\n* Megaparsec\n* Meter\n* Microinch\n* Micrometer\n* Mil\n* Mile\n* Millimeter\n* Nanometer\n* NauticalMile\n* Parsec\n* PrinterPica\n* PrinterPoint\n* Shackle\n* SolarRadius\n* Twip\n* UsSurveyFoot\n* Yard",
        "example": "print result = convert_length(1.2, 'Meter', 'Foot')",
        "sourceLength": 2216
      }
    },
    {
      "name": "convert_mass",
      "category": "KQL Function",
      "documentation": {
        "title": "convert_mass",
        "description": "Converts a mass value from one unit to another.",
        "syntax": "`convert_mass(`*value*`,`*from*`,`*to*`)`",
        "returnInfo": "Returns the input value converted from one mass unit to another. Invalid units return `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `real` |  *True* | The value to be converted. |\n| *from* | `string` |  *True* | The unit to convert from. For possible values, see Conversion units. |\n| *to* | `string` |  *True* | The unit to convert to. For possible values, see Conversion units. |\n\n### Conversion units\n\n* Centigram\n* Decagram\n* Decigram\n* EarthMass\n* Grain\n* Gram\n* Hectogram\n* Kilogram\n* Kilopound\n* Kilotonne\n* LongHundredweight\n* LongTon\n* Megapound\n* Megatonne\n* Microgram\n* Milligram\n* Nanogram\n* Ounce\n* Pound\n* ShortHundredweight\n* ShortTon\n* Slug\n* SolarMass\n* Stone\n* Tonne",
        "example": "print result = convert_mass(1.2, 'Kilogram', 'Pound')",
        "sourceLength": 2077
      }
    },
    {
      "name": "convert_speed",
      "category": "KQL Function",
      "documentation": {
        "title": "convert_speed",
        "description": "Converts a speed value from one unit to another.",
        "syntax": "`convert_speed(`*value*`,`*from*`,`*to*`)`",
        "returnInfo": "Returns the input value converted from one speed unit to another. Invalid units return `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `real` |  *True* | The value to be converted. |\n| *from* | `string` |  *True* | The unit to convert from. For possible values, see Conversion units.|\n| *to* | `string` |  *True* | The unit to convert to. For possible values, see Conversion units. |\n\n### Conversion units\n\n* CentimeterPerHour\n* CentimeterPerMinute\n* CentimeterPerSecond\n* DecimeterPerMinute\n* DecimeterPerSecond\n* FootPerHour\n* FootPerMinute\n* FootPerSecond\n* InchPerHour\n* InchPerMinute\n* InchPerSecond\n* KilometerPerHour\n* KilometerPerMinute\n* KilometerPerSecond\n* Knot\n* MeterPerHour\n* MeterPerMinute\n* MeterPerSecond\n* MicrometerPerMinute\n* MicrometerPerSecond\n* MilePerHour\n* MillimeterPerHour\n* MillimeterPerMinute\n* MillimeterPerSecond\n* NanometerPerMinute\n* NanometerPerSecond\n* UsSurveyFootPerHour\n* UsSurveyFootPerMinute\n* UsSurveyFootPerSecond\n* YardPerHour\n* YardPerMinute\n* YardPerSecond",
        "example": "print result = convert_speed(1.2, 'MeterPerSecond', 'CentimeterPerHour')",
        "sourceLength": 2424
      }
    },
    {
      "name": "convert_temperature",
      "category": "KQL Function",
      "documentation": {
        "title": "convert_temperature",
        "description": "Converts a temperature value from one unit to another.",
        "syntax": "`convert_temperature(`*value*`,`*from*`,`*to*`)`",
        "returnInfo": "Returns the input value converted from one temperature unit to another. Invalid units return `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `real` |  *True* | The value to be converted. |\n| *from* | `string` |  *True* | The unit to convert from. For possible values, see Conversion units. |\n| *to* | `string` |  *True* | The unit to convert to. For possible values, see Conversion units. |\n\n### Conversion units\n\n* DegreeCelsius\n* DegreeDelisle\n* DegreeFahrenheit\n* DegreeNewton\n* DegreeRankine\n* DegreeReaumur\n* DegreeRoemer\n* Kelvin\n* MillidegreeCelsius\n* SolarTemperature",
        "example": "print result = convert_temperature(1.2, 'Kelvin', 'DegreeCelsius')",
        "sourceLength": 2035
      }
    },
    {
      "name": "convert_volume",
      "category": "KQL Function",
      "documentation": {
        "title": "convert_volume",
        "description": "Converts a volume value from one unit to another.",
        "syntax": "`convert_volume(`*value*`,`*from*`,`*to*`)`",
        "returnInfo": "Returns the input value converted from one volume unit to another. Invalid units return `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `real` |  *True* | The value to be converted. |\n| *from* | `string` |  *True* | The unit to convert from. For possible values, see Conversion units. |\n| *to* | `string` |  *True* | The unit to convert to. For possible values, see Conversion units. |\n\n### Conversion units\n\n* AcreFoot\n* AuTablespoon\n* BoardFoot\n* Centiliter\n* CubicCentimeter\n* CubicDecimeter\n* CubicFoot\n* CubicHectometer\n* CubicInch\n* CubicKilometer\n* CubicMeter\n* CubicMicrometer\n* CubicMile\n* CubicMillimeter\n* CubicYard\n* Decaliter\n* DecausGallon\n* Deciliter\n* DeciusGallon\n* HectocubicFoot\n* HectocubicMeter\n* Hectoliter\n* HectousGallon\n* ImperialBeerBarrel\n* ImperialGallon\n* ImperialOunce\n* ImperialPint\n* KilocubicFoot\n* KilocubicMeter\n* KiloimperialGallon\n* Kiloliter\n* KilousGallon\n* Liter\n* MegacubicFoot\n* MegaimperialGallon\n* Megaliter\n* MegausGallon\n* MetricCup\n* MetricTeaspoon\n* Microliter\n* Milliliter\n* OilBarrel\n* UkTablespoon\n* UsBeerBarrel\n* UsCustomaryCup\n* UsGallon\n* UsLegalCup\n* UsOunce\n* UsPint\n* UsQuart\n* UsTablespoon\n* UsTeaspoon",
        "example": "print result = convert_volume(1.2, 'CubicMeter', 'AcreFoot')",
        "sourceLength": 2576
      }
    },
    {
      "name": "cos",
      "category": "KQL Function",
      "documentation": {
        "title": "cos()",
        "description": "Performs a cosine operation on the input value.\nThe angle is specified in radians.",
        "syntax": "`cos(`*number*`)`",
        "returnInfo": "The cosine of *number* of radians.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *number* | `real` |  *True* | The value in radians for which to calculate the cosine. |",
        "example": "print cos(1)",
        "sourceLength": 1347
      }
    },
    {
      "name": "cot",
      "category": "KQL Function",
      "documentation": {
        "title": "cot()",
        "description": "Calculates the trigonometric cotangent of the specified angle, in radians.",
        "syntax": "`cot(`*number*`)`",
        "returnInfo": "The cotangent function value for *number*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *number* | `real` |  *True* | The value for which to calculate the cotangent. |",
        "example": "print cot(1)",
        "sourceLength": 1305
      }
    },
    {
      "name": "countof",
      "category": "KQL Function",
      "documentation": {
        "title": "countof()",
        "description": "Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches don't.",
        "syntax": "`countof(`*source*`,` *search* [`,` *kind*]`)`",
        "returnInfo": "The number of times that the *search* value can be matched in the *source* string. Plain string matches may overlap; regex matches don't.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | `string` |  *True* | The value to search. |\n| *search* | `string` |  *True* | The value or regular expression to match inside *source*. |\n| *kind* | `string` | | The value `normal` or `regex`. The default is `normal`. |",
        "example": "",
        "sourceLength": 1540
      }
    },
    {
      "name": "current_cluster_endpoint",
      "category": "KQL Function",
      "documentation": {
        "title": "current_cluster_endpoint()",
        "description": ":::moniker range=\"azure-data-explorer || azure-monitor || microsoft-sentinel\"\nProvides the network endpoint (DNS name) of the current cluster being queried.\n::: moniker-end\n\n:::moniker range=\"microsoft-fabric\"\nProvides the network endpoint (DNS name) of the current Eventhouse being queried.\n::: moniker-end",
        "syntax": "`current_cluster_endpoint()`",
        "returnInfo": ":::moniker range=\"azure-data-explorer || azure-monitor || microsoft-sentinel\"\nReturns the network endpoint (DNS name) of the current cluster being queried, as a value of type `string`.\n::: moniker-end\n\n:::moniker range=\"microsoft-fabric\"\nReturns the network endpoint (DNS name) of the current Eventhouse being queried, as a value of type `string`.\n::: moniker-end",
        "parametersTable": "",
        "example": "print strcat(\"This query executed on: \", current_cluster_endpoint())",
        "sourceLength": 1535
      }
    },
    {
      "name": "current_database",
      "category": "KQL Function",
      "documentation": {
        "title": "current_database()",
        "description": "PRovides the name of the database in scope (database that all query\nentities are resolved against if no other database is specified).",
        "syntax": "`current_database()`",
        "returnInfo": "Returns name of the database in scope as a value of type `string`.",
        "parametersTable": "",
        "example": "print strcat(\"Database in scope: \", current_database())",
        "sourceLength": 1003
      }
    },
    {
      "name": "current_principal",
      "category": "KQL Function",
      "documentation": {
        "title": "current_principal()",
        "description": "Provides the current principal name that runs the query.",
        "syntax": "`current_principal()`",
        "returnInfo": "The current principal fully qualified name (FQN) as a `string`.  \nThe string format is:  \n*PrinciplaType*`=`*PrincipalId*`;`*TenantId*",
        "parametersTable": "",
        "example": "print fqn=current_principal()",
        "sourceLength": 1451
      }
    },
    {
      "name": "current_principal_details",
      "category": "KQL Function",
      "documentation": {
        "title": "current_principal_details()",
        "description": "Provides details of the principal running the query.",
        "syntax": "`current_principal_details()`",
        "returnInfo": "Returns the details of the current principal as a dynamic. The following table describes the returned fields.\n\n|Field|Description|\n|:--|:--|\n|UserPrincipalName|The sign-in identifier for users. For more information, see UPN.|\n|IdentityProvider|The source that validates the identity of the principal.|\n|Authority|The Microsoft Entra tenant ID.|\n|Mfa|Indicates the use of multifactor authentication. For more information, see Access token claims reference.|\n|Type|The category of the principal: `aaduser`, `aadapp`, or `aadgroup`.|\n|DisplayName|The user-friendly name  for the principal that is displayed in the UI.|\n|ObjectId|The Microsoft Entra object ID for the principal.|\n|FQN|The Fully Qualified Name (FQN) of the principal. Valuable for security role management commands. For more information, see Referencing security principals.|\n|Country|The user's country or region. This property is returned if the information is present. The value is a standard two-letter country or region code, for example, FR, JP, and SZ.|\n|TenantCountry|The resource tenant's country or region, set at a tenant level by an admin. This property is returned if the information is present. The value is a standard two-letter country or region code, for example, FR, JP, and SZ. |\n|TenantRegion|The region of the resource tenant. This property is returned if the information is present. The value is a standard two-letter country or region code, for example, FR, JP, and SZ. |",
        "parametersTable": "",
        "example": "print details=current_principal_details()",
        "sourceLength": 3434
      }
    },
    {
      "name": "current_principal_is_member_of",
      "category": "KQL Function",
      "documentation": {
        "title": "current_principal_is_member_of()",
        "description": "Checks group membership or principal identity of the current principal running the query.",
        "syntax": "`current_principal_is_member_of(`*group*`)`",
        "returnInfo": "The function returns `true` if the current principal running the query is successfully matched for at least one input argument. If not, the function returns `false`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *group* | `dynamic` |  *True* | An array of string literals in which each literal represents a Microsoft Entra principal. See examples for Microsoft Entra principals.|\n\n> [!NOTE]\n>\n> - To avoid throttling from Microsoft Entra ID, the `current_principal_is_member_of()` function only works with string literals. Using values that aren't string literals will result in an error in order to avoid a potentially large number of queries to Microsoft Entra ID.\n> - \n> - For more information on Group Membership cache behavior, see Access control overview.",
        "example": "print result=current_principal_is_member_of(\n    'aaduser=user1@fabrikam.com', \n    'aadgroup=group1@fabrikam.com',\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\n    )\n\nprint result=current_principal_is_member_of(\n    dynamic([\n    'aaduser=user1@fabrikam.com', \n    'aadgroup=group1@fabrikam.com',\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\n    ]))",
        "sourceLength": 3377
      }
    },
    {
      "name": "cursor_after",
      "category": "KQL Function",
      "documentation": {
        "title": "cursor_after()",
        "description": "A predicate runs over the records of a table to compare their ingestion time against a database cursor.\n\n> [!NOTE]\n> This function can only be invoked on records of a table that has the\nIngestionTime policy enabled.",
        "syntax": "`cursor_after(`*RHS*`)`",
        "returnInfo": "Returns a scalar value of type `bool` that indicates whether the record was ingested\nafter the database cursor *RHS* (`true`) or not (`false`).",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *RHS* | `string` |  *True* | Either an empty string literal or a valid database cursor value.|",
        "example": "MyTable\n| where cursor_after('2024-08-01T00:00:00Z')",
        "sourceLength": 1730
      }
    },
    {
      "name": "cursor_before_or_at",
      "category": "KQL Function",
      "documentation": {
        "title": "cursor_before_or_at()",
        "description": "A predicate function runs over the records of a table to compare their ingestion time against the database cursor time.\n\n> [!NOTE]\n> This function can only be invoked on records of a table that has the\nIngestionTime policy enabled.",
        "syntax": "`cursor_before_or_at(`*RHS*`)`",
        "returnInfo": "Returns a scalar value of type `bool` that indicates whether the record was ingested\nbefore or at the database cursor *RHS* (`true`) or not (`false`).",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *RHS* | `string` |  *True* | Either an empty string literal or a valid database cursor value.|",
        "example": "MyTable\n| where cursor_before_or_at('2024-08-01T12:00:00Z')",
        "sourceLength": 1919
      }
    },
    {
      "name": "database",
      "category": "KQL Function",
      "documentation": {
        "title": "database()",
        "description": ":::moniker range=\"azure-data-explorer\"\nChanges the reference of the query to a specific database within the cluster scope.\n\n> [!NOTE]\n>\n> * For more information, see cross-database and cross-cluster queries.\n> * For accessing remote cluster and remote database, see `cluster()` scope function.\n:::moniker-end\n\n:::moniker range=\"microsoft-fabric\"\nChanges the reference of the query to a specific database within the Eventhouse scope.\n<!-- add link in the note to the Cross-database and cross-Eventhouse doc once it is created -->\n> [!NOTE]\n>\n> * For accessing remote cluster and remote database, see `cluster()` scope function.\n:::moniker-end\n``",
        "syntax": "`database(`*databaseName*`)`",
        "returnInfo": "",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *databaseName* | `string` | The name of the database to reference. The *databaseName* can be either the `DatabaseName` or `PrettyName`. The argument must be a constant value and can't come from a subquery evaluation.|",
        "example": "database('Samples').StormEvents | count\n\nlet foo = (dbName:string)\n{\n    database(dbName).StormEvents | count\n};\nfoo('help')\n\n.create function foo(dbName:string)\n{\n    database(dbName).StormEvents | count\n};",
        "sourceLength": 2930
      }
    },
    {
      "name": "datetime_add",
      "category": "KQL Function",
      "documentation": {
        "title": "datetime_add()",
        "description": "Calculates a new datetime from a specified period multiplied by a specified amount, added to, or subtracted from a specified datetime.",
        "syntax": "`datetime_add(`*period*`,`*amount*`,`*datetime*`)`",
        "returnInfo": "Returns a datetime after a certain time/date interval has been added.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *period* | `string` |  *True* | The length of time by which to increment.|\n| *amount* | `int` |  *True* | The number of *periods* to add to or subtract from *datetime*. |\n| *datetime* | `datetime` |  *True* | The date to increment by the result of the *period* x *amount* calculation. |\n\nPossible values of *period*:\n\n* Year\n* Quarter\n* Month\n* Week\n* Day\n* Hour\n* Minute\n* Second\n* Millisecond\n* Microsecond\n* Nanosecond",
        "example": "print  year = datetime_add('year',1,make_datetime(2017,1,1)),\nquarter = datetime_add('quarter',1,make_datetime(2017,1,1)),\nmonth = datetime_add('month',1,make_datetime(2017,1,1)),\nweek = datetime_add('week',1,make_datetime(2017,1,1)),\nday = datetime_add('day',1,make_datetime(2017,1,1)),\nhour = datetime_add('hour',1,make_datetime(2017,1,1)),\nminute = datetime_add('minute',1,make_datetime(2017,1,1)),\nsecond = datetime_add('second',1,make_datetime(2017,1,1))\n\nprint  year = datetime_add('year',-5,make_datetime(2017,1,1)),\nquarter = datetime_add('quarter',12,make_datetime(2017,1,1)),\nmonth = datetime_add('month',-15,make_datetime(2017,1,1)),\nweek = datetime_add('week',100,make_datetime(2017,1,1))",
        "sourceLength": 3766
      }
    },
    {
      "name": "datetime_diff",
      "category": "KQL Function",
      "documentation": {
        "title": "datetime_diff()",
        "description": "Calculates the number of the specified periods between two datetime values.",
        "syntax": "`datetime_diff(`*period*`,`*datetime1*`,`*datetime2*`)`",
        "returnInfo": "Returns an integer that represents the amount of *periods* in the result of subtraction (*datetime1* - *datetime2*).",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *period* | `string` |  *True* | The measurement of time used to calculate the return value. See possible values.|\n| *datetime1* | `datetime` |  *True* | The left-hand side of the subtraction equation.|\n| *datetime2* | `datetime` |  *True* | The right-hand side of the subtraction equation. |\n\n### Possible values of *period*\n\nThese values are case insensitive:\n\n* Year\n* Quarter\n* Month\n* Week\n* Day\n* Hour\n* Minute\n* Second\n* Millisecond\n* Microsecond\n* Nanosecond",
        "example": "print\nyear = datetime_diff('year',datetime(2017-01-01),datetime(2000-12-31)),\nquarter = datetime_diff('quarter',datetime(2017-07-01),datetime(2017-03-30)),\nmonth = datetime_diff('month',datetime(2017-01-01),datetime(2015-12-30)),\nweek = datetime_diff('week',datetime(2017-10-29 00:00),datetime(2017-09-30 23:59)),\nday = datetime_diff('day',datetime(2017-10-29 00:00),datetime(2017-09-30 23:59)),\nhour = datetime_diff('hour',datetime(2017-10-31 01:00),datetime(2017-10-30 23:59)),\nminute = datetime_diff('minute',datetime(2017-10-30 23:05:01),datetime(2017-10-30 23:00:59)),\nsecond = datetime_diff('second',datetime(2017-10-30 23:00:10.100),datetime(2017-10-30 23:00:00.900)),\nmillisecond = datetime_diff('millisecond',datetime(2017-10-30 23:00:00.200100),datetime(2017-10-30 23:00:00.100900)),\nmicrosecond = datetime_diff('microsecond',datetime(2017-10-30 23:00:00.1009001),datetime(2017-10-30 23:00:00.1008009)),\nnanosecond = datetime_diff('nanosecond',datetime(2017-10-30 23:00:00.0000000),datetime(2017-10-30 23:00:00.0000007))",
        "sourceLength": 3523
      }
    },
    {
      "name": "datetime_local_to_utc",
      "category": "KQL Function",
      "documentation": {
        "title": "datetime_local_to_utc()",
        "description": "Converts local datetime to UTC datetime using a time-zone specification.",
        "syntax": "`datetime_local_to_utc(`*from*`,`*timezone*`)`",
        "returnInfo": "Returns a UTC datetime that corresponds the local datetime in the specified `timezone`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *from* | `datetime` |  *True* | The local datetime to convert.|\n| *timezone* | `string` |  *True* | The timezone of the desired datetime. The value must be one of the supported timezones.|",
        "example": "datatable(local_dt: datetime, tz: string)\n[ datetime(2020-02-02 20:02:20), 'US/Pacific', \n  datetime(2020-02-02 20:02:20), 'America/Chicago', \n  datetime(2020-02-02 20:02:20), 'Europe/Paris']\n| extend utc_dt = datetime_local_to_utc(local_dt, tz)\n\nrange Local from datetime(2022-03-27 01:00:00.0000000) to datetime(2022-03-27 04:00:00.0000000) step 1h\n| extend UTC=datetime_local_to_utc(Local, 'Europe/Brussels')\n| extend BackToLocal=datetime_utc_to_local(UTC, 'Europe/Brussels')\n| extend diff=Local-BackToLocal",
        "sourceLength": 3568
      }
    },
    {
      "name": "datetime_part",
      "category": "KQL Function",
      "documentation": {
        "title": "datetime_part()",
        "description": "Extracts the requested date part as an integer value.\n\n> **Deprecated aliases:** datepart()",
        "syntax": "`datetime_part(`*part*`,`*datetime*`)`",
        "returnInfo": "Returns an integer representing the extracted part.\n\n> [!NOTE]\n> `week_of_year` returns an integer which represents the week number. The week number is calculated from the first week of a year, which is the one that includes the first Thursday.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *part* | `string` |  *True* | Measurement of time to extract from *date*. See possible values.|\n| *date* | `datetime` |  *True* | The full date from which to extract *part*. |\n\n### Possible values of part\n\n* Year\n* Quarter\n* Month\n* week_of_year\n* Day\n* DayOfYear\n* Hour\n* Minute\n* Second\n* Millisecond\n* Microsecond\n* Nanosecond",
        "example": "let dt = datetime(2017-10-30 01:02:03.7654321); \nprint \nyear = datetime_part(\"year\", dt),\nquarter = datetime_part(\"quarter\", dt),\nmonth = datetime_part(\"month\", dt),\nweekOfYear = datetime_part(\"week_of_year\", dt),\nday = datetime_part(\"day\", dt),\ndayOfYear = datetime_part(\"dayOfYear\", dt),\nhour = datetime_part(\"hour\", dt),\nminute = datetime_part(\"minute\", dt),\nsecond = datetime_part(\"second\", dt),\nmillisecond = datetime_part(\"millisecond\", dt),\nmicrosecond = datetime_part(\"microsecond\", dt),\nnanosecond = datetime_part(\"nanosecond\", dt)",
        "sourceLength": 3315
      }
    },
    {
      "name": "datetime_utc_to_local",
      "category": "KQL Function",
      "documentation": {
        "title": "datetime_utc_to_local()",
        "description": "Converts UTC datetime to local datetime using a time-zone specification.",
        "syntax": "`datetime_utc_to_local(`*from*`,`*timezone*`)`",
        "returnInfo": "Returns a local datetime in the *timezone* that corresponds the UTC datetime.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *from* | `datetime` |  *True* | The UTC datetime to convert.|\n| *timezone* | `string` |  *True* | The timezone to convert to. This value must be one of the supported timezones.|",
        "example": "print dt=now()\n| extend pacific_dt = datetime_utc_to_local(dt, 'US/Pacific'), canberra_dt = datetime_utc_to_local(dt, 'Australia/Canberra')\n| extend diff = pacific_dt - canberra_dt",
        "sourceLength": 2318
      }
    },
    {
      "name": "dcount_hll",
      "category": "KQL Function",
      "documentation": {
        "title": "dcount_hll()",
        "description": "Calculates the distinct count from results generated by hll or hll_merge.\n\nRead about the underlying algorithm (*H*yper*L*og*L*og) and estimation accuracy.",
        "syntax": "`dcount_hll(`*hll*`)`",
        "returnInfo": "Returns the distinct count of each value in *hll*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*hll*| `string` | *True*| An expression generated by hll or hll-merge to be used to find the distinct count.|",
        "example": "StormEvents\n| summarize hllRes = hll(DamageProperty) by bin(StartTime,10m)\n| summarize hllMerged = hll_merge(hllRes)\n| project dcount_hll(hllMerged)",
        "sourceLength": 2065
      }
    },
    {
      "name": "degrees",
      "category": "KQL Function",
      "documentation": {
        "title": "degrees()",
        "description": "Converts angle value in radians into value in degrees, using the formula `degrees = (180 / PI ) * angle_in_radians`.",
        "syntax": "`degrees(`*radians*`)`",
        "returnInfo": "Returns the corresponding angle in degrees for an angle specified in radians.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *radians* | `real` |  *True* | The angle in radians to convert to degrees. |",
        "example": "print degrees0 = degrees(pi()/4), degrees1 = degrees(pi()*1.5), degrees2 = degrees(0)",
        "sourceLength": 1574
      }
    },
    {
      "name": "dynamic_to_json",
      "category": "KQL Function",
      "documentation": {
        "title": "dynamic_to_json()",
        "description": "Converts a scalar value of type `dynamic` to a canonical `string` representation.",
        "syntax": "`dynamic_to_json(`*expr*`)`",
        "returnInfo": "Returns a canonical representation of the input as a value of type `string`,\naccording to the following rules:\n\n* If the input is a scalar value of type other than `dynamic`,\n   the output is the application of `tostring()` to that value.\n\n* If the input is an array of values, the output is composed of the\n   characters `[`, `,`, and `]` interspersed with the canonical representation\n   described here of each array element.\n\n* If the input is a property bag, the output is composed of the characters\n   `{`, `,`, and `}` interspersed with the colon (`:`)-delimited name/value pairs\n   of the properties. The pairs are sorted by the names, and the values\n   are in the canonical representation described here of each array element.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *expr* | `dynamic` |  *True* | The expression to convert to string representation.|",
        "example": "let bag1 = dynamic_to_json(\n  dynamic({\n    'Y10':dynamic({}),\n    'X8': dynamic({\n      'c3':1,\n      'd8':5,\n      'a4':6\n    }),\n    'D1':114,\n    'A1':12,\n    'B1':2,\n    'C1':3,\n    'A14':[15, 13, 18]\n}));\nlet bag2 = dynamic_to_json(\n  dynamic({\n    'X8': dynamic({\n      'a4':6,\n      'c3':1,\n      'd8':5\n    }),\n    'A14':[15, 13, 18],\n    'C1':3,\n    'B1':2,\n    'Y10': dynamic({}),\n    'A1':12, 'D1':114\n  }));\nprint AreEqual=bag1 == bag2, Result=bag1",
        "sourceLength": 2919
      }
    },
    {
      "name": "endofday",
      "category": "KQL Function",
      "documentation": {
        "title": "endofday()",
        "description": "Provides the end of the day containing the date, shifted by an offset, if provided.",
        "syntax": "`endofday(`*date* [, *offset*]`)`",
        "returnInfo": "Returns a datetime representing the end of the day for the given *date* value, with the *offset*, if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True*| The date to find the end of. |\n| *offset* | `int` | | The number of offset days from *date*. Default is 0. |",
        "example": "range offset from -1 to 1 step 1\n | project dayEnd = endofday(datetime(2017-01-01 10:10:17), offset)",
        "sourceLength": 2027
      }
    },
    {
      "name": "endofmonth",
      "category": "KQL Function",
      "documentation": {
        "title": "endofmonth()",
        "description": "Provides the end of the month containing the date, shifted by an offset, if provided.",
        "syntax": "`endofmonth(`*date* [, *offset*]`)`",
        "returnInfo": "Returns a datetime representing the end of the month for the given *date* value, with the *offset*, if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True*| The date used to find the end of the month. |\n| *offset* | `int` | | The number of offset months from *date*. Default is 0. |",
        "example": "range offset from -1 to 1 step 1\n | project monthEnd = endofmonth(datetime(2017-01-01 10:10:17), offset)",
        "sourceLength": 2066
      }
    },
    {
      "name": "endofweek",
      "category": "KQL Function",
      "documentation": {
        "title": "endofweek()",
        "description": "Provides the end of the week containing the date, shifted by an offset, if provided.\n\nLast day of the week is considered to be a Saturday.",
        "syntax": "`endofweek(`*date* [, *offset*]`)`",
        "returnInfo": "Returns datetime representing the end of the week for the given *date* value, with the *offset*, if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True*| The date used to find the end of the week. |\n| *offset* | `int` | | The number of offset weeks from *date*. Default is 0. |",
        "example": "range offset from -1 to 1 step 1\n | project weekEnd = endofweek(datetime(2017-01-01 10:10:17), offset)  \n\nlet endofweekSunday = (dateArg: datetime) {\n    datetime_add('day', 8, endofweek(datetime_add('day', -8, dateArg)))\n};\nlet data=datatable(Date: datetime, day: string)\n[\ndatetime(2025, 6, 14), \"Saturday\",\ndatetime(2025, 6, 15), \"Sunday\",\ndatetime(2025, 6, 16), \"Monday\",\ndatetime(2025, 6, 17), \"Tuesday\"\n];\ndata \n| extend SundayEndOfWeek=endofweekSunday(Date)",
        "sourceLength": 3519
      }
    },
    {
      "name": "endofyear",
      "category": "KQL Function",
      "documentation": {
        "title": "endofyear()",
        "description": "Provides the end of the year containing the date, shifted by an offset, if provided.",
        "syntax": "`endofyear(`*date* [, *offset*]`)`",
        "returnInfo": "Returns a datetime representing the end of the year for the given *date* value, with the &*offset*, if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True*| The date used to find the end of the year. |\n| *offset* | `int` | | The number of offset years from *date*. Default is 0. |",
        "example": "range offset from -1 to 1 step 1\n | project yearEnd = endofyear(datetime(2017-01-01 10:10:17), offset)",
        "sourceLength": 2054
      }
    },
    {
      "name": "erf",
      "category": "KQL Function",
      "documentation": {
        "title": "erf()",
        "description": "Returns the error function of the input.",
        "syntax": "`erf(`*x*`)`",
        "returnInfo": "Returns the error function of x.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | `real` |  *True* | The value for which to calculate the function. |",
        "example": "range x from -3 to 3 step 1\n| extend erf_x = erf(x)",
        "sourceLength": 1604
      }
    },
    {
      "name": "erfc",
      "category": "KQL Function",
      "documentation": {
        "title": "erfc()",
        "description": "Provides the complementary error function of the input.",
        "syntax": "`erfc(`*x*`)`",
        "returnInfo": "Returns the complementary error function of x.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | `real` |  *True* | The value for which to calculate the function. |",
        "example": "range x from -3 to 3 step 1\n| extend erf_x = erfc(x)",
        "sourceLength": 1653
      }
    },
    {
      "name": "estimate_data_size",
      "category": "KQL Function",
      "documentation": {
        "title": "estimate_data_size()",
        "description": "Provides an estimated data size in bytes for the selected columns of a tabular expression.",
        "syntax": "`estimate_data_size(`*columns*`)`",
        "returnInfo": "Returns the estimated data size in bytes of the referenced columns. Estimation is based on data types and actual values.\nFor example, the data size for the string `'{\"a\":\"bcd\"}'` is smaller than the dynamic value `dynamic({\"a\":\"bcd\"})`\nbecause the latter's internal representation is more complex than that of a string.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*columns*| `string` | *True*|One or more comma-separated column references in the source tabular expression to use for data size estimation. To include all columns, use the wildcard (`*`) character.|",
        "example": "range x from 1 to 10 step 1                    // x (long) is 8 \n| extend Text = '1234567890'                   // Text length is 10  \n| summarize Total=sum(estimate_data_size(*))   // (8+10)x10 = 180",
        "sourceLength": 2290
      }
    },
    {
      "name": "exp",
      "category": "KQL Function",
      "documentation": {
        "title": "exp()",
        "description": "The base-e exponential function of x, which is e raised to the power x: e^x.",
        "syntax": "`exp(`*x*`)`",
        "returnInfo": "The exponential value of x.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | `real` |  *True*| The value of the exponent. |",
        "example": "print result = exp(2)",
        "sourceLength": 1307
      }
    },
    {
      "name": "exp10",
      "category": "KQL Function",
      "documentation": {
        "title": "exp10()",
        "description": "The base-10 exponential function of x, which is 10 raised to the power x: 10^x.",
        "syntax": "`exp10(`*x*`)`",
        "returnInfo": "Returns the exponential value of x.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | `real` |  *True*| The value of the exponent. |",
        "example": "print result = exp10(2)",
        "sourceLength": 1324
      }
    },
    {
      "name": "exp2",
      "category": "KQL Function",
      "documentation": {
        "title": "exp2()",
        "description": "The base-2 exponential function of x, which is 2 raised to the power x: 2^x.",
        "syntax": "`exp2(`*x*`)`",
        "returnInfo": "Returns the exponential value of x.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | `real` |  *True*| The value of the exponent. |",
        "example": "print result = exp2(3)",
        "sourceLength": 1315
      }
    },
    {
      "name": "extent_id",
      "category": "KQL Function",
      "documentation": {
        "title": "extent_id()",
        "description": "Provides a unique identifier for the data shard (\"extent\") containing the current record at the time the query was run.\n\nApplying this function to calculated data that isn't attached to a data shard returns an empty guid (all zeros).\n\n> **Deprecated aliases:** extentid()\n\n> [!CAUTION]\n>\n> The value returned by this function isn't guaranteed to remain stable over time. The system continuously performs data grooming operations in the background\n> and these can result with changes to existing extents and their IDs.",
        "syntax": "`extent_id()`",
        "returnInfo": "Returns a value of type `guid` that identifies the current record's data shard at the time the query was run,\nor an empty guid (all zeros).",
        "parametersTable": "",
        "example": "T\n| where Timestamp > ago(1h)\n| where ActivityId == 'dd0595d4-183e-494e-b88e-54c52fe90e5a'\n| extend eid=extent_id()\n| summarize by eid",
        "sourceLength": 1895
      }
    },
    {
      "name": "extent_tags",
      "category": "KQL Function",
      "documentation": {
        "title": "extent_tags()",
        "description": "Provides a dynamic array with the extent tags of the extent that the current record is in.\n\nIf you apply this function to calculated data, which isn't attached to a data shard, returns an empty value.",
        "syntax": "`extent_tags()`",
        "returnInfo": "Returns a value of type `dynamic` that is an array holding the current record's extent tags,\nor an empty value.",
        "parametersTable": "",
        "example": "T\n| where Timestamp > ago(1h)\n| where ActivityId == 'dd0595d4-183e-494e-b88e-54c52fe90e5a'\n| extend tags = extent_tags()\n| summarize by tostring(tags)\n\nT\n| where Timestamp > ago(1h)\n| extend Tags = extent_tags()\n| where Tags has_cs 'MyTag' and Tags !has_cs 'drop-by:MyOtherTag'\n| count",
        "sourceLength": 2161
      }
    },
    {
      "name": "external_table",
      "category": "KQL Function",
      "documentation": {
        "title": "external_table()",
        "description": "References an external table by name.\n\n> [!NOTE]\n>\n> The `external_table` function has similar restrictions as the table function.\n> Standard query limits apply to external table queries as well.\n\nTo accelerate queries over external delta tables, see Query acceleration policy.",
        "syntax": "`external_table(` *TableName* [`,` *MappingName* ] `)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *TableName* | `string` |  *True* | The name of the external table being queried. Must reference an external table of kind `blob`, `adl`, or `sql`.|\n| *MappingName* | `string` | | A name of a mapping object that maps fields in the external data shards to columns output.|\n\nThe authentication method to access an external table is based on the connection string provided during its creation, and the permissions required to access the table vary depending on the authentication method. For more information, see Azure Storage external table or SQL Server external table.",
        "example": "",
        "sourceLength": 2206
      }
    },
    {
      "name": "extract",
      "category": "KQL Function",
      "documentation": {
        "title": "extract()",
        "description": "Get a match for a regular expression from a source string.\n\nOptionally, convert the extracted substring to the indicated type.",
        "syntax": "`extract(`*regex*`,` *captureGroup*`,` *source* [`,` *typeLiteral*]`)`",
        "returnInfo": "If *regex* finds a match in *source*: the substring matched against the indicated capture group *captureGroup*, optionally converted to *typeLiteral*.\n\nIf there's no match, or the type conversion fails: `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *regex* | `string` |  *True* | A regular expression.|\n| *captureGroup* | `int` |  *True* | The capture group to extract. 0 stands for the entire match, 1 for the value matched by the first '('parenthesis')' in the regular expression, and 2 or more for subsequent parentheses.|\n| *source* | `string` |  *True*| The string to search.|\n| *typeLiteral* | `string` | | If provided, the extracted substring is converted to this type. For example, `typeof(long)`.",
        "example": "let Text = \"User: JohnDoe, Email: johndoe@example.com, Age: 29\";\nprint UserName = extract(\"User: ([^,]+)\", 1, Text),\nEmailId = extract(@\"Email: (\\S+),\", 1, Text),\nAge = extract(@\"\\d+\", 0, Text)\n\nlet Dates = datatable(DateString: string)\n[\n    \"15-12-2024\",\n    \"21-07-2023\",\n    \"10-03-2022\"\n];\nDates\n| extend Month = extract(@\"-(\\d{2})-\", 1, DateString, typeof(int))\n| project DateString, Month",
        "sourceLength": 3654
      }
    },
    {
      "name": "extract_all",
      "category": "KQL Function",
      "documentation": {
        "title": "extract_all()",
        "description": "Get all matches for a regular expression from a source string.\nOptionally, retrieve a subset of matching groups.\n\n```kusto\nprint extract_all(@\"(\\d+)\", \"a set of numbers: 123, 567 and 789\") // results with the dynamic array [\"123\", \"567\", \"789\"]\n```\n\n> **Deprecated aliases:** extractall()",
        "syntax": "`extract_all(`*regex*`,` [*captureGroups*`,`] *source*`)`",
        "returnInfo": "* If *regex* finds a match in *source*: Returns dynamic array including all matches against the indicated capture groups *captureGroups*, or all of capturing groups in the *regex*.\n* If number of *captureGroups* is 1: The returned array has a single dimension of matched values.\n* If number of *captureGroups* is more than 1: The returned array is a two-dimensional collection of multi-value matches per *captureGroups* selection, or all capture groups present in the *regex* if *captureGroups* is omitted.\n* If there's no match: `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *regex* | `string` |  *True* | A regular expression containing between one and 16 capture groups.|\n| *captureGroups* | `dynamic` | | An array that indicates the capture groups to extract. Valid values are from 1 to the number of capturing groups in the regular expression. Named capture groups are allowed as well. See examples.|\n| *source* | `string` |  *True*| The string to search.|",
        "example": "print Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\n| extend guid_bytes = extract_all(@\"([\\da-f]{2})\", Id) \n\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\n| extend guid_bytes = extract_all(@\"(\\w)(\\w+)(\\w)\", Id)\n\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\n| extend guid_bytes = extract_all(@\"(\\w)(\\w+)(\\w)\", dynamic([1,3]), Id) \n\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\n| extend guid_bytes = extract_all(@\"(?P<first>\\w)(?P<middle>\\w+)(?P<last>\\w)\", dynamic(['first',2,'last']), Id)",
        "sourceLength": 5590
      }
    },
    {
      "name": "extract_json",
      "category": "KQL Function",
      "documentation": {
        "title": "extract_json()",
        "description": "Get a specified element out of a JSON text using a path expression.\n\nOptionally convert the extracted string to a specific type.\n\n> The `extract_json()` and `extractjson()` functions are equivalent",
        "syntax": "`extract_json(`*jsonPath*`,` *dataSource*`,` *type*`)`",
        "returnInfo": "This function performs a JSONPath query into dataSource, which contains a valid JSON string, optionally converting that value to another type depending on the third argument.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *jsonPath* | `string` |  *True* | A JSONPath that defines an accessor into the JSON document.|\n| *dataSource* | `string` |  *True* | A JSON document.|\n| *type* | `string` | | An optional type literal. If provided, the extracted value is converted to this type. For example, `typeof(long)` will convert the extracted value to a `long`.|\n\n* Apply where-clauses before using `extract_json()`.\n* Consider using a regular expression match with extract instead. This can run very much faster, and is effective if the JSON is produced from a template.\n* Use `parse_json()` if you need to extract more than one value from the JSON.\n* Consider having the JSON parsed at ingestion by declaring the type of the column to be dynamic.",
        "example": "let json = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}';\nprint extract_json(\"$.name\", json, typeof(string));",
        "sourceLength": 2823
      }
    },
    {
      "name": "format_bytes",
      "category": "KQL Function",
      "documentation": {
        "title": "format_bytes()",
        "description": "Formats a number as a string representing data size in bytes.",
        "syntax": "`format_bytes(`*size* [`,` *precision* [`,` *units*]]`)`",
        "returnInfo": "A string of *size* formatted as data size in bytes.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *size* | `real` |  *True* | The value to be formatted as data size in bytes.|\n| *precision* | `int` | | The number of digits the value will be rounded to after the decimal point. The default is 0.|\n| *units* | `string` | | The units of the target data size: `Bytes`, `KB`, `MB`, `GB`, `TB`, `PB`, or `EB`. If this parameter is empty, the units will be auto-selected based on input value.|",
        "example": "print \nv1 = format_bytes(564),\nv2 = format_bytes(10332, 1),\nv3 = format_bytes(20010332),\nv4 = format_bytes(20010332, 2),\nv5 = format_bytes(20010332, 0, \"KB\")",
        "sourceLength": 2166
      }
    },
    {
      "name": "format_datetime",
      "category": "KQL Function",
      "documentation": {
        "title": "format_datetime()",
        "description": "Formats a datetime according to the provided format.",
        "syntax": "`format_datetime(`*date* `,` *format*`)`",
        "returnInfo": "A string with *date* formatted as specified by *format*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True* | The value to format.|\n| *format* | `string` |  *True*| The output format comprised of one or more of the supported format elements.\n\n### Supported format elements\n\nThe *format* parameter should include one or more of the following elements:\n\n|Format specifier| Description| Examples|\n|:--|:--|:--|\n|`d`| The day of the month, from 1 through 31.| 2009-06-01T13:45:30 -> 1, 2009-06-15T13:45:30 -> 15\n|`dd`| The day of the month, from 01 through 31.| 2009-06-01T13:45:30 -> 01, 2009-06-15T13:45:30 -> 15\n|`f`| The tenths of a second in a date and time value.| 2009-06-15T13:45:30.6170000 -> 6, 2009-06-15T13:45:30.05 -> 0\n|`ff`| The hundredths of a second in a date and time value.| 2009-06-15T13:45:30.6170000 -> 61, 2009-06-15T13:45:30.0050000 -> 00\n|`fff`| The milliseconds in a date and time value.| 6/15/2009 13:45:30.617 -> 617, 6/15/2009 13:45:30.0005 -> 000\n|`ffff`| The ten thousandths of a second in a date and time value.| 2009-06-15T13:45:30.6175000 -> 6175, 2009-06-15T13:45:30.0000500 -> 0000\n|`fffff`| The hundred thousandths of a second in a date and time value. |2009-06-15T13:45:30.6175400 -> 61754, 2009-06-15T13:45:30.000005 -> 00000\n|`ffffff`| The millionths of a second in a date and time value.| 2009-06-15T13:45:30.6175420 -> 617542, 2009-06-15T13:45:30.0000005 -> 000000\n|`fffffff`| The ten millionths of a second in a date and time value.| 2009-06-15T13:45:30.6175425 -> 6175425, 2009-06-15T13:45:30.0001150 -> 0001150\n|`F`| If non-zero, the tenths of a second in a date and time value.| 2009-06-15T13:45:30.6170000 -> 6, 2009-06-15T13:45:30.0500000 -> (no output)\n|`FF`| If non-zero, the hundredths of a second in a date and time value.| 2009-06-15T13:45:30.6170000 -> 61, 2009-06-15T13:45:30.0050000 -> (no output)\n|`FFF`| If non-zero, the milliseconds in a date and time value.| 2009-06-15T13:45:30.6170000 -> 617, 2009-06-15T13:45:30.0005000 -> (no output)\n|`FFFF`| If non-zero, the ten thousandths of a second in a date and time value.|2009-06-15T13:45:30.5275000 -> 5275, 2009-06-15T13:45:30.0000500 -> (no output)\n|`FFFFF`| If non-zero, the hundred thousandths of a second in a date and time value.| 2009-06-15T13:45:30.6175400 -> 61754, 2009-06-15T13:45:30.0000050 -> (no output)\n|`FFFFFF`| If non-zero, the millionths of a second in a date and time value.| 2009-06-15T13:45:30.6175420 -> 617542, 2009-06-15T13:45:30.0000005 -> (no output)\n|`FFFFFFF`| If non-zero, the ten millionths of a second in a date and time value.| 2009-06-15T13:45:30.6175425 -> 6175425, 2009-06-15T13:45:30.0001150 -> 000115\n|`h`| The hour, using a 12-hour clock from 1 to 12.| 2009-06-15T01:45:30 -> 1, 2009-06-15T13:45:30 -> 1\n|`hh`| The hour, using a 12-hour clock from 01 to 12.| 2009-06-15T01:45:30 -> 01, 2009-06-15T13:45:30 -> 01\n|`H`| The hour, using a 24-hour clock from 0 to 23.| 2009-06-15T01:45:30 -> 1, 2009-06-15T13:45:30 -> 13\n|`HH`| The hour, using a 24-hour clock from 00 to 23.| 2009-06-15T01:45:30 -> 01, 2009-06-15T13:45:30 -> 13\n|`m`| The minute, from 0 through 59.| 2009-06-15T01:09:30 -> 9, 2009-06-15T13:29:30 -> 29\n|`mm`| The minute, from 00 through 59.| 2009-06-15T01:09:30 -> 09, 2009-06-15T01:45:30 -> 45\n|`M`| The month, from 1 through 12.| 2009-06-15T13:45:30 -> 6\n|`MM`| The month, from 01 through 12.| 2009-06-15T13:45:30 -> 06\n|`s`| The second, from 0 through 59.| 2009-06-15T13:45:09 -> 9\n|`ss`| The second, from 00 through 59.| 2009-06-15T13:45:09 -> 09\n|`y`| The year, from 0 to 99.| 0001-01-01T00:00:00 -> 1, 0900-01-01T00:00:00 -> 0, 1900-01-01T00:00:00 -> 0, 2009-06-15T13:45:30 -> 9, 2019-06-15T13:45:30 -> 19\n|`yy`| The year, from 00 to 99.| 0001-01-01T00:00:00 -> 01, 0900-01-01T00:00:00 -> 00, 1900-01-01T00:00:00 -> 00, 2019-06-15T13:45:30 -> 19\n|`yyyy`| The year as a four-digit number.| 0001-01-01T00:00:00 -> 0001, 0900-01-01T00:00:00 -> 0900, 1900-01-01T00:00:00 -> 1900, 2009-06-15T13:45:30 -> 2009\n|`tt`| AM / PM hours| 2009-06-15T13:45:09 -> PM\n\n### Supported delimiters\n\nThe format specifier can include the following delimiters:\n\n|Delimiter|Comment|\n|:---------|:-------|\n|`' '`| Space|\n|`'/'`||\n|`'-'`|Dash|\n|`':'`||\n|`','`||\n|`'.'`||\n|`'_'`||\n|`'['`||\n|`']'`||",
        "example": "let dt = datetime(2017-01-29 09:00:05);\nprint \nv1=format_datetime(dt,'yy-MM-dd [HH:mm:ss]')\n\nlet dt = datetime(2017-01-29 09:00:05);\nprint \nv2=format_datetime(dt, 'yyyy-M-dd [H:mm:ss]')\n\nlet dt = datetime(2017-01-29 09:00:05);\nprint \nv3=format_datetime(dt, 'yy-MM-dd [hh:mm:ss tt]')",
        "sourceLength": 7469
      }
    },
    {
      "name": "format_ipv4",
      "category": "KQL Function",
      "documentation": {
        "title": "format_ipv4()",
        "description": "Parses the input with a netmask and returns a string representing the IPv4 address.",
        "syntax": "`format_ipv4(`*ip* [`,` *prefix*`])`",
        "returnInfo": "If conversion is successful, the result will be a string representing IPv4 address.\nIf conversion isn't successful, the result will be an empty string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip* | `string` |  *True* | The IPv4 address. The format may be a string or number representation in big-endian order.|\n| *prefix* | `int` | | An integer from 0 to 32 representing the number of most-significant bits that are taken into account. If unspecified, all 32 bit-masks are used.|",
        "example": "datatable(address:string, mask:long)\n[\n '192.168.1.1', 24,          \n '192.168.1.1', 32,          \n '192.168.1.1/24', 32,       \n '192.168.1.1/24', long(-1), \n]\n| extend result = format_ipv4(address, mask), \n         result_mask = format_ipv4_mask(address, mask)",
        "sourceLength": 2684
      }
    },
    {
      "name": "format_ipv4_mask",
      "category": "KQL Function",
      "documentation": {
        "title": "format_ipv4_mask()",
        "description": "Parses the input with a netmask and returns a string representing the IPv4 address in CIDR notation.",
        "syntax": "`format_ipv4_mask(`*ip* [`,` *prefix*`])`",
        "returnInfo": "If conversion is successful, the result will be a string representing IPv4 address as CIDR notation.\nIf conversion isn't successful, the result will be an empty string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip* | `string` |  *True* | The IPv4 address as CIDR notation. The format may be a string or number representation in big-endian order.|\n| *prefix* | `int` | | An integer from 0 to 32 representing the number of most-significant bits that are taken into account. If unspecified, all 32 bit-masks are used.|",
        "example": "datatable(address:string, mask:long)\n[\n '192.168.1.1', 24,          \n '192.168.1.1', 32,          \n '192.168.1.1/24', 32,       \n '192.168.1.1/24', long(-1), \n]\n| extend result = format_ipv4(address, mask), \n         result_mask = format_ipv4_mask(address, mask)",
        "sourceLength": 2597
      }
    },
    {
      "name": "format_timespan",
      "category": "KQL Function",
      "documentation": {
        "title": "format_timespan()",
        "description": "Formats a timespan according to the provided format.",
        "syntax": "`format_timespan(`*timespan* `,` *format*`)`",
        "returnInfo": "A string with *timespan* formatted as specified by *format*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *timespan* | `timespan` |  *True* | The value to format.|\n| *format* | `string` |  *True*| The output format comprised of one or more of the supported format elements.\n\n### Supported format elements\n\n|Format specifier| Description| Examples\n|:---|:---|:---\n|`d`-`dddddddd`| The number of whole days in the time interval. Padded with zeros if needed.| 15.13:45:30: d -> 15, dd -> 15, ddd -> 015\n|`f`| The tenths of a second in the time interval.| 15.13:45:30.6170000 -> 6, 15.13:45:30.05 -> 0\n|`ff`| The hundredths of a second in the time interval.| 15.13:45:30.6170000 -> 61, 15.13:45:30.0050000 -> 00\n|`fff`| The milliseconds in the time interval.| 6/15/2009 13:45:30.617 -> 617, 6/15/2009 13:45:30.0005 -> 000\n|`ffff`| The ten thousandths of a second in the time interval.| 15.13:45:30.6175000 -> 6175, 15.13:45:30.0000500 -> 0000\n|`fffff`| The hundred thousandths of a second in the time interval.| 15.13:45:30.6175400 -> 61754, 15.13:45:30.000005 -> 00000\n|`ffffff`| The millionths of a second in the time interval.| 15.13:45:30.6175420 -> 617542, 15.13:45:30.0000005 -> 000000\n|`fffffff`| The ten millionths of a second in the time interval.| 15.13:45:30.6175425 -> 6175425, 15.13:45:30.0001150 -> 0001150\n|`F`| If non-zero, the tenths of a second in the time interval.| 15.13:45:30.6170000 -> 6, 15.13:45:30.0500000 -> (no output)\n|`FF`| If non-zero, the hundredths of a second in the time interval.| 15.13:45:30.6170000 -> 61, 15.13:45:30.0050000 -> (no output)\n|`FFF`| If non-zero, the milliseconds in the time interval.| 15.13:45:30.6170000 -> 617, 15.13:45:30.0005000 -> (no output)\n|`FFFF`| If non-zero, the ten thousandths of a second in the time interval. |15.13:45:30.5275000 -> 5275, 15.13:45:30.0000500 -> (no output)\n|`FFFFF`| If non-zero, the hundred thousandths of a second in the time interval.| 15.13:45:30.6175400 -> 61754, 15.13:45:30.0000050 -> (no output)\n|`FFFFFF`| If non-zero, the millionths of a second in the time interval.| 15.13:45:30.6175420 -> 617542, 15.13:45:30.0000005 -> (no output)\n|`FFFFFFF`| If non-zero, the ten millionths of a second in the time interval.| 15.13:45:30.6175425 -> 6175425, 15.13:45:30.0001150 -> 000115\n|`H`| The hour, using a 24-hour clock from 0 to 23.| 15.01:45:30 -> 1, 15.13:45:30 -> 13\n|`HH`| The hour, using a 24-hour clock from 00 to 23.| 15.01:45:30 -> 01, 15.13:45:30 -> 13\n|`m`| The number of whole minutes in the time interval that aren't included as part of hours or days. Single-digit minutes don't have a leading zero.| 15.01:09:30 -> 9, 15.13:29:30 -> 29\n|`mm`| The number of whole minutes in the time interval that aren't included as part of hours or days. Single-digit minutes have a leading zero.| 15.01:09:30 -> 09, 15.01:45:30 -> 45\n|`s`| The number of whole seconds in the time interval that aren't included as part of hours, days, or minutes. Single-digit seconds don't have a leading zero.| 15.13:45:09 -> 9\n|`ss`|The number of whole seconds in the time interval that aren't included as part of hours, days, or minutes. Single-digit seconds have a leading zero.| 15.13:45:09 -> 09\n\n### Supported delimiters\n\nThe format specifier can include following delimiters:\n\n|Delimiter|Comment|\n|:---------|:-------|\n|`' '`| Space|\n|`'/'`||\n|`'-'`|Dash|\n|`':'`||\n|`','`||\n|`'.'`||\n|`'_'`||\n|`'['`||\n|`']'`||",
        "example": "let t = time(29.09:00:05.12345);\nprint \nv1=format_timespan(t, 'dd.hh:mm:ss:FF'),\nv2=format_timespan(t, 'ddd.h:mm:ss [fffffff]')",
        "sourceLength": 4824
      }
    },
    {
      "name": "gamma",
      "category": "KQL Function",
      "documentation": {
        "title": "gamma()",
        "description": "Computes the gamma function for the provided *number*.",
        "syntax": "`gamma(`*number*`)`",
        "returnInfo": "Gamma function of *number*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *number* | `real` |  *True* | The number used to calculate the gamma function. |",
        "example": "",
        "sourceLength": 1006
      }
    },
    {
      "name": "geo_angle",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_angle()",
        "description": "Calculates clockwise angle in radians between two lines on Earth. The first line is [point1, point2] and the second line is [point2, point3].",
        "syntax": "`geo_angle(`*p1_longitude*`,`*p1_latitude*`,`*p2_longitude*`,`*p2_latitude*`,`*p3_longitude*`,`*p3_latitude*`)`",
        "returnInfo": "An angle in radians in range [0, 2pi) between two lines [p1, p2] and [p2, p3]. The angle is measured CW from the first line to the Second line.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If the coordinates are invalid, the query will produce a null result.\n> * If point1 is equal to point2, the query will produce a null result.\n> * If point2 is equal to point3, the query will produce a null result.\n> * If point1 and point2 are antipodal, the query will produce a null result.\n> * If point2 and point3 are antipodal, the query will produce a null result.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*p1_longitude*| `real` |  *True* | The longitude value in degrees of the first geospatial coordinate. A valid value is in the range [-180, +180].|\n|*p1_latitude*| `real` |  *True* | The latitude value in degrees of the first geospatial coordinate. A valid value is in the range [-90, +90].|\n|*p2_longitude*| `real` |  *True* | The longitude value in degrees of the second geospatial coordinate. A valid value is in the range [-180, +180].|\n|*p2_latitude*| `real` |  *True* | The latitude value in degrees of the second geospatial coordinate. A valid value is in the range [-90, +90].|\n|*p3_longitude*| `real` |  *True* | The longitude value in degrees of the second geospatial coordinate. A valid value is in the range [-180, +180].|\n|*p3_latitude*| `real` |  *True* | The latitude value in degrees of the second geospatial coordinate. A valid value is in the range [-90, +90].|",
        "example": "print angle_in_radians = geo_angle(0, 10, 0,5, 3,-10)\n\nlet angle_in_radians = geo_angle(0, 10, 0,5, 3,-10);\nprint angle_in_degrees = degrees(angle_in_radians)\n\nprint is_null = isnull(geo_angle(0, 10, 0, 10, 3, -10))",
        "sourceLength": 4372
      }
    },
    {
      "name": "geo_azimuth",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_azimuth()",
        "description": "Calculates clockwise angle in radians between the line from point1 to true north and a line from point1 to point2 on Earth.",
        "syntax": "`geo_azimuth(`*p1_longitude*`,`*p1_latitude*`,`*p2_longitude*`,`*p2_latitude*`)`",
        "returnInfo": "An angle in radians between the line from point p1 to true north and line [p1, p2]. The angle is measured clockwise.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * Azimuth 0 points north. Azimuth Pi/2 points east. Azimuth Pi points south. Azimuth 3Pi/2 points west.\n> * If the coordinates are invalid, the query will produce a null result.\n> * If point1 is equal to point2, the query will produce a null result.\n> * If point1 and point2 are antipodal, the query will produce a null result.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*p1_longitude*| `real` |  *True* | The longitude value in degrees of the first geospatial coordinate. A valid value is in the range [-180, +180].|\n|*p1_latitude*| `real` |  *True* | The latitude value in degrees of the first geospatial coordinate. A valid value is in the range [-90, +90].|\n|*p2_longitude*| `real` |  *True* | The longitude value in degrees of the second geospatial coordinate. A valid value is in the range [-180, +180].|\n|*p2_latitude*| `real` |  *True* | The latitude value in degrees of the second geospatial coordinate. A valid value is in the range [-90, +90].|",
        "example": "print azimuth_in_radians = geo_azimuth(5, 10, 10, -40)\n\nlet azimuth_in_radians = geo_azimuth(5, 10, 10, -40);\nprint azimuth_in_degrees = degrees(azimuth_in_radians);\n\nlet get_direction = (azimuth:real)\n{\n    let pi = pi();\n    iff(azimuth < pi/2,   \"North-East\",\n    iff(azimuth < pi,     \"South-East\",\n    iff(azimuth < 3*pi/2, \"South-West\",\n                          \"North-West\")));\n};\ndatatable(timestamp:datetime, lng:real, lat:real)\n[\n    datetime(2024-01-01T00:01:53.048506Z), -115.4036607693417, 36.40551631046261,\n    datetime(2024-01-01T00:02:53.048506Z), -115.3256807623232, 36.34102142760111,\n    datetime(2024-01-01T00:03:53.048506Z), -115.2732290602112, 36.28458914829917,\n    datetime(2024-01-01T00:04:53.048506Z), -115.2513186233914, 36.27622394664352,\n    datetime(2024-01-01T00:05:53.048506Z), -115.2352055633212, 36.27545547038515,\n    datetime(2024-01-01T00:06:53.048506Z), -115.1894341934856, 36.28266934431671,\n    datetime(2024-01-01T00:07:53.048506Z), -115.1054318118468, 36.28957085435267,\n    datetime(2024-01-01T00:08:53.048506Z), -115.0648614339413, 36.28110743285072,\n    datetime(2024-01-01T00:09:53.048506Z), -114.9858032867736, 36.29780696509714,\n    datetime(2024-01-01T00:10:53.048506Z), -114.9016966527561, 36.36556196813566,\n]\n| sort by timestamp asc \n| extend prev_lng = prev(lng), prev_lat = prev(lat)\n| where isnotnull(prev_lng) and isnotnull(prev_lat)\n| extend direction = get_direction(geo_azimuth(prev_lng, prev_lat, lng, lat))\n| project direction, lng, lat\n| render scatterchart with (kind = map)\n\nprint is_null = isnull(geo_azimuth(5, 10, 5, 10))",
        "sourceLength": 6614
      }
    },
    {
      "name": "geo_closest_point_on_line",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_closest_point_on_line()",
        "description": "Calculates a point on a line or a multiline, which is closest to a given point on Earth.",
        "syntax": "`geo_closest_point_on_line(`*longitude*`,`*latitude*`,`*lineString*`)`",
        "returnInfo": "A point in GeoJSON Format and of a dynamic data type on a line or multiline which is the closest to a given point on Earth. If the coordinate or lineString are invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n> * In order to calculate a distance between the closest point on a line or multiline to a given point, use geo_distance_point_to_line()\n\n### LineString definition and constraints\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2],..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices is chosen.\n\n> [!TIP]\n>\n> * Using literal LineString or a MultiLineString may result in better performance.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | The geospatial coordinate longitude value in degrees. A valid value is in the range [-180, +180].|\n| *latitude* | `real` |  *True* | The geospatial coordinate latitude value in degrees. A valid value is in the range [-90, +90].|\n| *lineString* | `dynamic` |  *True* | A line or multiline in the GeoJSON format.|",
        "example": "print point_on_line = geo_closest_point_on_line(-115.199625, 36.210419, dynamic({ \"type\":\"LineString\",\"coordinates\":[[-115.115385,36.229195],[-115.136995,36.200366],[-115.140252,36.192470],[-115.143558,36.188523],[-115.144076,36.181954],[-115.154662,36.174483],[-115.166431,36.176388],[-115.183289,36.175007],[-115.192612,36.176736],[-115.202485,36.173439],[-115.225355,36.174365]]}))\n\nprint isnull(geo_closest_point_on_line(1,1, dynamic({ \"type\":\"LineString\"})))\n\nprint result = isnull(geo_closest_point_on_line(300, 3, dynamic({ \"type\":\"LineString\",\"coordinates\":[[1,1],[2,2]]})))",
        "sourceLength": 5649
      }
    },
    {
      "name": "geo_closest_point_on_polygon",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_closest_point_on_polygon()",
        "description": "Calculates a point on a polygon or a multipolygon, which is closest to a given point on Earth.",
        "syntax": "`geo_closest_point_on_polygon(`*longitude*`,`*latitude*`,`*polygon*`)`",
        "returnInfo": "A point in GeoJSON Format and of a dynamic data type on a polygon or multipolygon which is the closest to a given point on Earth. If polygon contains input point, the result with be the same point. If the coordinates or polygons are invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n> * In order to calculate a distance between the closest point on a polygon or multipolygon to a given point, use geo_distance_point_to_polygon()\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1,..., LinearRingHole_N],..., [LinearRingShell, LinearRingHole_1,..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\n* Polygon doesn't necessarily contain its vertices.\n\n> [!TIP]\n>\n> * Using literal polygons may result in better performance.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *latitude* | `real` |  *True* | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|",
        "example": "let central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nprint geo_closest_point_on_polygon(-73.9839, 40.7705, central_park)\n\nprint result = isnull(geo_closest_point_on_polygon(500,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,1],[0,0]]]})))\n\nprint result = isnull(geo_closest_point_on_polygon(1,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))",
        "sourceLength": 6412
      }
    },
    {
      "name": "geo_distance_2points",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_distance_2points()",
        "description": "Calculates the shortest distance in meters between two geospatial coordinates on Earth.",
        "syntax": "`geo_distance_2points(`*p1_longitude*`,`*p1_latitude*`,`*p2_longitude*`,`*p2_latitude*`,`[ *use_spheroid* ]`)`",
        "returnInfo": "The shortest distance, in meters, between two geographic locations on Earth. If the coordinates are invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * Most applications should measure distance using sphere ('use_spheroid' = false) which is more performant. If extra precision is needed, 'use_spheroid' option can be set to 'true', for extra precision, which might be more relevant for bigger distances, which might get impacted due to earth curvature.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*p1_longitude*| `real` |  *True* | The longitude value in degrees of the first geospatial coordinate. A valid value is in the range [-180, +180].|\n|*p1_latitude*| `real` |  *True* | The latitude value in degrees of the first geospatial coordinate. A valid value is in the range [-90, +90].|\n|*p2_longitude*| `real` |  *True* | The longitude value in degrees of the second geospatial coordinate. A valid value is in the range [-180, +180].|\n|*p2_latitude*| `real` |  *True* | The latitude value in degrees of the second geospatial coordinate. A valid value is in the range [-90, +90].|\n|*use_spheroid*| `bool` | | If `false` will use a sphere as geodetic datum for measuring distance. If `true` will measure distance using spheroid. If unspecified, the default value `false` is used.",
        "example": "print distance_in_meters = geo_distance_2points(-122.407628, 47.578557, -118.275287, 34.019056)\n\nrange i from 1 to 1000000 step 1\n| project lng = rand() * real(-122), lat = rand() * 90\n| where lng between(real(-122) .. 0) and lat between(47 .. 90)\n| where geo_distance_point_to_line(lng,lat,dynamic({\"type\":\"LineString\",\"coordinates\":[[-122,47],[0,51]]})) < 500\n| render scatterchart with (kind=map)\n\nStormEvents\n| extend distance_1_to_11m = geo_distance_2points(BeginLon, BeginLat, EndLon, EndLat)\n| where distance_1_to_11m between (1 .. 11)\n| project distance_1_to_11m\n\nprint distance = geo_distance_2points(300,1,1,1)",
        "sourceLength": 5762
      }
    },
    {
      "name": "geo_distance_point_to_line",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_distance_point_to_line()",
        "description": "Calculates the shortest distance in meters between a coordinate and a line or multiline on Earth.",
        "syntax": "`geo_distance_point_to_line(`*longitude*`,`*latitude*`,`*lineString*`)`",
        "returnInfo": "The shortest distance, in meters, between a coordinate and a line or multiline on Earth. If the coordinate or lineString are invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n\n### LineString definition and constraints\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2],..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices is chosen.\n\n> [!TIP]\n>\n> * Using literal LineString or a MultiLineString may result in better performance.\n> * If you want to know the shortest distance between one or more points to many lines, consider folding these lines into one multiline. See the following example.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | The geospatial coordinate longitude value in degrees. A valid value is in the range [-180, +180].|\n| *latitude* | `real` |  *True* | The geospatial coordinate latitude value in degrees. A valid value is in the range [-90, +90].|\n| *lineString* | `dynamic` |  *True* | A line or multiline in the GeoJSON format.|",
        "example": "",
        "sourceLength": 18550
      }
    },
    {
      "name": "geo_distance_point_to_polygon",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_distance_point_to_polygon()",
        "description": "Calculates the shortest distance between a coordinate and a polygon or a multipolygon on Earth.",
        "syntax": "`geo_distance_point_to_polygon(`*longitude*`,`*latitude*`,`*polygon*`)`",
        "returnInfo": "The shortest distance, in meters, between a coordinate and a polygon or a multipolygon on Earth. If polygon contains point, the distance will be 0. If the coordinates or polygons are invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1,..., LinearRingHole_N],..., [LinearRingShell, LinearRingHole_1,..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\n* Polygon doesn't necessarily contain its vertices.\n\n> [!TIP]\n>\n> * Using literal polygons may result in better performance.\n> * If you want to know if polygon contains point, see geo_point_in_polygon()",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *latitude* | `real` |  *True* | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|",
        "example": "let central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nprint geo_distance_point_to_polygon(-73.9839, 40.7705, central_park)\n\nlet multipolygon = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]],[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]],[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]]});\nlet coordinates = \n    datatable(longitude:real, latitude:real, description:string)\n    [\n        real(-73.9741), 40.7914, 'Upper West Side',\n        real(-73.9950), 40.7340, 'Greenwich Village',\n        real(-73.8743), 40.7773, 'LaGuardia Airport',\n    ];\ncoordinates\n| extend distance = geo_distance_point_to_polygon(longitude, latitude, multipolygon)\n\nUS_States\n| project name = features.properties.NAME, polygon = features.geometry\n| project name, distance = ceiling(geo_distance_point_to_polygon(-111.905, 40.634, polygon) / 1000)\n| where distance < 200 and distance > 0\n\nprint distance = geo_distance_point_to_polygon(500,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,1],[0,0]]]}))\n\nprint distance = geo_distance_point_to_polygon(1,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]}))",
        "sourceLength": 19866
      }
    },
    {
      "name": "geo_from_wkt",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_from_wkt()",
        "description": "Converts Well-known text (WKT) string to GeoJSON shape.",
        "syntax": "`geo_from_wkt(`*wkt*`)`",
        "returnInfo": "Shape in GeoJSON Format and of a dynamic data type. If the input WKT string is invalid or unsupported, the query produces a null result.\n\n> [!NOTE]\n>\n> The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n\n> [!TIP]\n>\n> * Using converted and stored GeoJSON shapes may result in better performance in geospatial analysis.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *wkt* | `string` |  *True* | Well-known text representation string of geometry.|",
        "example": "print point = geo_from_wkt(\"POINT (1 2)\");\n\nprint line = geo_from_wkt(\"LINESTRING (1 2, 3 4)\");\n\nprint polygon = geo_from_wkt(\"POLYGON ((0 0, 2 0, 2 2, 0 0))\");\n\nprint multipoint = geo_from_wkt(\"MULTIPOINT (1 1, 2 2, 3 3)\");\n\nprint multiline = geo_from_wkt(\"MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5))\");\n\nprint multipolygon = geo_from_wkt(\"MULTIPOLYGON (((0 0, 2 0, 2 2, 0 0)),((10 10, 12 10, 12 12, 10 10)))\");\n\nprint geometry_collection = geo_from_wkt(\"GEOMETRYCOLLECTION (POINT (1 1),LINESTRING (2 2, 3 3, 4 4),POLYGON ((10 10, 12 10, 12 12, 10 10)))\");\n\nprint result = isnull(geo_from_wkt(\"LINESTRING\"))",
        "sourceLength": 6274
      }
    },
    {
      "name": "geo_geohash_neighbors",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_geohash_neighbors()",
        "description": "Calculates Geohash neighbors.\n\nRead more about `geohash`.",
        "syntax": "`geo_geohash_neighbors(`*geohash*`)`",
        "returnInfo": "An array of Geohash neighbors. If the Geohash is invalid, the query produces a null result.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *geohash* | `string` |  *True* | A geohash value as it was calculated by geo_point_to_geohash(). The geohash string must be between 1 and 18 characters.|",
        "example": "print neighbors = geo_geohash_neighbors('sunny')\n\nlet geohash = 'sunny';\nprint cells = array_concat(pack_array(geohash), geo_geohash_neighbors(geohash))\n\nlet geohash = 'sunny';\nprint cells = array_concat(pack_array(geohash), geo_geohash_neighbors(geohash))\n| mv-expand cells to typeof(string)\n| project polygons = geo_geohash_to_polygon(cells)\n| summarize arr = make_list(polygons)\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", bag_pack(\"name\", \"polygons\"))\n\nlet h3cell = 'sunny';\nprint cells = array_concat(pack_array(h3cell), geo_geohash_neighbors(h3cell))\n| mv-expand cells to typeof(string)\n| project polygons = geo_geohash_to_polygon(cells)\n| summarize arr = make_list(polygons)\n| project polygon = geo_union_polygons_array(arr)\n\nprint invalid = isnull(geo_geohash_neighbors('a'))",
        "sourceLength": 6901
      }
    },
    {
      "name": "geo_geohash_to_central_point",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_geohash_to_central_point()",
        "description": "Calculates the geospatial coordinates that represent the center of a geohash rectangular area.\n\nRead more about `geohash`.",
        "syntax": "`geo_geohash_to_central_point(`*geohash*`)`",
        "returnInfo": "The geospatial coordinate values in GeoJSON Format and of a dynamic data type. If the geohash is invalid, the query will produce a null result.\n\n> [!NOTE]\n> The GeoJSON format specifies longitude first and latitude second.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *geohash* | `string` |  *True* | A geohash value as it was calculated by geo_point_to_geohash(). The geohash string must be between 1 and 18 characters.|",
        "example": "print point = geo_geohash_to_central_point(\"sunny\")\n| extend coordinates = point.coordinates\n| extend longitude = coordinates[0], latitude = coordinates[1]\n\nprint geohash = geo_geohash_to_central_point(\"a\")",
        "sourceLength": 4401
      }
    },
    {
      "name": "geo_geohash_to_polygon",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_geohash_to_polygon()",
        "description": "Calculates the polygon that represents the geohash rectangular area.\n\nRead more about geohash.",
        "syntax": "`geo_geohash_to_polygon(`*geohash*`)`",
        "returnInfo": "Polygon in GeoJSON Format and of a dynamic data type. If the geohash is invalid, the query will produce a null result.\n\n> [!NOTE]\n> Geohash edges are straight lines and aren't geodesics. If the geohash polygon is part of some other calculation, consider densifying it with geo_polygon_densify().",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *geohash* | `string` |  *True* | A geohash value as it was calculated by geo_point_to_geohash(). The geohash string must be between 1 and 18 characters.|",
        "example": "print GeohashPolygon = geo_geohash_to_polygon(\"dr5ru\");\n\n// Geohash GeoJSON collection\ndatatable(lng:real, lat:real)\n[\n    -73.975212, 40.789608,\n    -73.916869, 40.818314,\n    -73.989148, 40.743273,\n]\n| project geohash = geo_point_to_geohash(lng, lat, 5)\n| project geohash_polygon = geo_geohash_to_polygon(geohash)\n| summarize geohash_polygon_lst = make_list(geohash_polygon)\n| project bag_pack(\n    \"type\", \"Feature\",\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", geohash_polygon_lst),\n    \"properties\", bag_pack(\"name\", \"Geohash polygons collection\"))\n\nprint GeohashPolygon = geo_geohash_to_polygon(\"a\");",
        "sourceLength": 4623
      }
    },
    {
      "name": "geo_h3cell_children",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_h3cell_children()",
        "description": "Calculates the H3 cell children.\n\nRead more about H3 Cell.",
        "syntax": "`geo_h3cell_children(`*h3cell*`,`*resolution*`)`",
        "returnInfo": "Array of H3 Cell children tokens. If the H3 Cell is invalid or child resolution is lower than given cell, the query will produce a null result.\n\n> [!NOTE]\n>\n> A difference between cell resolution and its children can't be more than 5. A difference of 5 levels will be resulted in up to 16807 children tokens.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *h3cell* | `string` |  *True* | An H3 Cell token value as it was calculated by geo_point_to_h3cell().|\n| *resolution* | `int` | | Defines the requested children cells resolution. Supported values are in the range [1, 15]. If unspecified, an immediate children token will be calculated.|",
        "example": "print children = geo_h3cell_children('862a1072fffffff')\n\nlet h3_cell = '862a1072fffffff'; \nprint children_count = array_length(geo_h3cell_children(h3_cell, geo_h3cell_level(h3_cell) + 3))\n\nprint children = geo_h3cell_children('862a1072fffffff')\n| mv-expand children to typeof(string)\n| project child = geo_h3cell_to_polygon(children)\n| summarize h3_hash_polygon_lst = make_list(child)\n| project geojson = bag_pack(\n    \"type\", \"Feature\",\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", h3_hash_polygon_lst),\n    \"properties\", bag_pack(\"name\", \"H3 polygons collection\"))\n\nprint is_null = isnull(geo_h3cell_children('abc'))\n\nprint is_null = isnull(geo_h3cell_children(geo_point_to_h3cell(1, 1, 9), 15))",
        "sourceLength": 4892
      }
    },
    {
      "name": "geo_h3cell_level",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_h3cell_level()",
        "description": "Calculates the H3 cell resolution.\n\nRead more about H3 Cell.",
        "syntax": "`geo_h3cell_level(`*h3cell*`)`",
        "returnInfo": "An integer that represents H3 Cell level. Valid level is in range [0, 15]. If the H3 Cell is invalid, the query will produce a null result.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *h3cell* | `string` |  *True* | An H3 Cell token value as it was calculated by geo_point_to_h3cell().|",
        "example": "print cell_res = geo_h3cell_level('862a1072fffffff')\n\nprint cell_res = geo_h3cell_level(geo_point_to_h3cell(1,1,10))\n\nprint invalid_res = isnull(geo_h3cell_level('abc'))",
        "sourceLength": 2440
      }
    },
    {
      "name": "geo_h3cell_neighbors",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_h3cell_neighbors()",
        "description": "Calculates the H3 cell neighbors.\n\nRead more about H3 Cell.",
        "syntax": "`geo_h3cell_neighbors(`*h3cell*`)`",
        "returnInfo": "An array of H3 cell neighbors. If the H3 Cell is invalid, the query will produce a null result.\n\n> [!NOTE]\n> If more than immidiate neighbors are needed, please see geo_h3cell_rings().",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *h3cell* | `string` |  *True* | An H3 Cell token value as it was calculated by geo_point_to_h3cell().|",
        "example": "print neighbors = geo_h3cell_neighbors('862a1072fffffff')\n\nlet h3cell = '862a1072fffffff';\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\n\nlet h3cell = '862a1072fffffff';\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\n| mv-expand cells to typeof(string)\n| project polygons = geo_h3cell_to_polygon(cells)\n| summarize arr = make_list(polygons)\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", bag_pack(\"name\", \"polygons\"))\n\nlet h3cell = '862a1072fffffff';\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\n| mv-expand cells to typeof(string)\n| project polygons = geo_h3cell_to_polygon(cells)\n| summarize arr = make_list(polygons)\n| project polygon = geo_union_polygons_array(arr)\n\nprint invalid = isnull(geo_h3cell_neighbors('abc'))",
        "sourceLength": 8226
      }
    },
    {
      "name": "geo_h3cell_parent",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_h3cell_parent()",
        "description": "Calculates the H3 cell parent.\n\nRead more about H3 Cell.",
        "syntax": "`geo_h3cell_parent(`*h3cell*`,`*resolution*`)`",
        "returnInfo": "H3 Cell parent token `string`. If the H3 Cell is invalid or parent resolution is higher than given cell, the query will produce an empty result.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *h3cell* | `string` |  *True* | An H3 Cell token value as it was calculated by geo_point_to_h3cell().|\n| *resolution* | `int` | | Defines the requested children cells resolution. Supported values are in the range [0, 14]. If unspecified, an immediate children token will be calculated.|",
        "example": "print parent_cell = geo_h3cell_parent('862a1072fffffff')\n\nprint parent_cell = geo_h3cell_parent('862a1072fffffff', 1)\n\nprint parent_res = geo_h3cell_level(geo_h3cell_parent((geo_point_to_h3cell(1,1,10))))\n\nprint parent_res = geo_h3cell_level(geo_h3cell_parent(geo_point_to_h3cell(1,1,10), 3))\n\nprint invalid = isempty(geo_h3cell_parent('123'))\n\nprint invalid = isempty(geo_h3cell_parent('862a1072fffffff', 100))\n\nprint invalid = isempty(geo_h3cell_parent('862a1072fffffff', 15))",
        "sourceLength": 4842
      }
    },
    {
      "name": "geo_h3cell_rings",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_h3cell_rings()",
        "description": "Calculates the H3 cell Rings.\n\nRead more about H3 Cell.",
        "syntax": "`geo_h3cell_rings(`*h3cell*`,`*distance*`)`",
        "returnInfo": "An ordered array of ring arrays where first ring contains the original cell, second ring contains neighboring cells, and so on. If either the H3 Cell or distance is invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * For H3 Cell immediate neighbors only, please see geo_h3cell_neighbors().\n> * A cell might be not present in the ring if pentagonal distortion was encountered.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *h3cell* | `string` |  *True* | An H3 Cell token value as it was calculated by geo_point_to_h3cell().|\n| *distance* | `int` |  *True* | Defines the maximum ring distance from given cell. Valid distance is in range [0, 142].|",
        "example": "print rings = geo_h3cell_rings('861f8894fffffff', 2)\n\nprint neighbors = geo_h3cell_rings('861f8894fffffff', 1)[1]\n\nprint rings = geo_h3cell_rings('861f8894fffffff', 1)\n| mv-apply rings on \n(\n  summarize cells = make_list(rings)\n)\n\nprint rings = geo_h3cell_rings('861f8894fffffff', 1)\n| mv-apply rings on \n(\n  summarize make_list(rings)\n)\n| mv-expand list_rings to typeof(string)\n| project polygon = geo_h3cell_to_polygon(list_rings)\n| summarize polygon_lst = make_list(polygon)\n| project geojson = bag_pack(\n    \"type\", \"Feature\",\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", polygon_lst),\n    \"properties\", bag_pack(\"name\", \"H3 polygons collection\"))\n\nprint is_null = isnull(geo_h3cell_rings('abc', 3))\n\nprint is_null = isnull(geo_h3cell_rings('861f8894fffffff', 150))",
        "sourceLength": 5876
      }
    },
    {
      "name": "geo_h3cell_to_central_point",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_h3cell_to_central_point()",
        "description": "Calculates the geospatial coordinates that represent the center of an H3 Cell.\n\nRead more about H3 Cell.",
        "syntax": "`geo_h3cell_to_central_point(`*h3cell*`)`",
        "returnInfo": "The geospatial coordinate values in GeoJSON Format and of a dynamic data type. If the H3 cell token is invalid, the query will produce a null result.\n\n> [!NOTE]\n> The GeoJSON format specifies longitude first and latitude second.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *h3cell* | `string` |  *True* | An H3 Cell token value as it was calculated by geo_point_to_h3cell().|",
        "example": "print h3cell = geo_h3cell_to_central_point(\"862a1072fffffff\")\n\nprint longitude = geo_h3cell_to_central_point(\"862a1072fffffff\").coordinates[0]\n\nprint h3cell = geo_h3cell_to_central_point(\"1\")",
        "sourceLength": 3056
      }
    },
    {
      "name": "geo_h3cell_to_polygon",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_h3cell_to_polygon()",
        "description": "Calculates the polygon that represents the H3 Cell rectangular area.\n\nRead more about H3 Cell.",
        "syntax": "`geo_h3cell_to_polygon(`*h3cell*`)`",
        "returnInfo": "Polygon in GeoJSON Format and of a dynamic data type. If the H3 Cell is invalid, the query will produce a null result.\n\n> [!NOTE]\n> H3 Cell polygon edges are straight lines and aren't geodesics. If an H3 Cell polygon is part of some other calculation, consider densifying it with geo_polygon_densify().",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *h3cell* | `string` |  *True* | An H3 Cell token value as it was calculated by geo_point_to_h3cell().|",
        "example": "print geo_h3cell_to_polygon(\"862a1072fffffff\")\n\n// H3 cell GeoJSON collection\ndatatable(lng:real, lat:real)\n[\n    -73.956683, 40.807907,\n    -73.916869, 40.818314,\n    -73.989148, 40.743273,\n]\n| project h3_hash = geo_point_to_h3cell(lng, lat, 6)\n| project h3_hash_polygon = geo_h3cell_to_polygon(h3_hash)\n| summarize h3_hash_polygon_lst = make_list(h3_hash_polygon)\n| project bag_pack(\n    \"type\", \"Feature\",\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", h3_hash_polygon_lst),\n    \"properties\", bag_pack(\"name\", \"H3 polygons collection\"))\n\nprint geo_h3cell_to_polygon(\"@\")",
        "sourceLength": 5185
      }
    },
    {
      "name": "geo_info_from_ip_address",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_info_from_ip_address()",
        "description": "Retrieves geolocation information about IPv4 or IPv6 addresses.",
        "syntax": "`geo_info_from_ip_address(`*IpAddress* `)`",
        "returnInfo": "A dynamic object containing the information on IP address whereabouts (if the information is available). The object contains the following fields:\n\n|Name| Type | Description|\n|:--|:--|:--|\n|`country`| `string` |Country name|\n|`state`| `string` |State (subdivision) name|\n|`city`| `string` |City name|\n|`latitude`| `real` |Latitude coordinate|\n|`longitude`| `real` |Longitude coordinate|\n\n> [!NOTE]\n>\n> * IP geolocation is inherently imprecise; locations are often near the center of the population. Any location provided by this function should not be used to identify a particular address or household.\n> * This function uses **free** `GeoLite2-City` data created by MaxMind, available from https://www.maxmind.com. Please be aware that the demo version on MaxMind's website utilizes their commercial service, which may provide higher-quality results than those supported by the `geo_info_from_ip_address()` function.\n> * The function is also built on the MaxMind DB Reader library provided under ISC license.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *IpAddress*| `string` |  *True* | IPv4 or IPv6 address to retrieve geolocation information about.|",
        "example": "print ip_location=geo_info_from_ip_address('20.53.203.50')\n\nprint ip_location=geo_info_from_ip_address('2a03:2880:f12c:83:face:b00c::25de')",
        "sourceLength": 3521
      }
    },
    {
      "name": "geo_intersection_2lines",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_intersection_2lines()",
        "description": "Calculates the intersection of two lines or multilines.",
        "syntax": "`geo_intersection_2lines(`*lineString1*`,`*lineString2*`)`",
        "returnInfo": "Intersection in GeoJSON Format and of a dynamic data type. If LineString or a MultiLineString are invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2],..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2,..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n\n> [!TIP]\n>\n> Use literal LineString or MultiLineString for better performance.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString1* | `dynamic` |  *True* | A line or multiline in the GeoJSON format.|\n| *lineString2* | `dynamic` |  *True* | A line or multiline in the GeoJSON format.|",
        "example": "let lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\nprint intersection = geo_intersection_2lines(lineString1, lineString2)\n\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\nprint intersection = geo_intersection_2lines(line, line)\n\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[3, 3],[4, 4]]});\nprint intersection = geo_intersection_2lines(lineString1, lineString2)\n\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[3, 3]]});\nprint invalid = isnull(geo_intersection_2lines(lineString1, lineString2))",
        "sourceLength": 5907
      }
    },
    {
      "name": "geo_intersection_2polygons",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_intersection_2polygons()",
        "description": "Calculates the intersection of two polygons or multipolygons.",
        "syntax": "`geo_intersection_2polygons(`*polygon1*`,`*polygon1*`)`",
        "returnInfo": "Intersection in GeoJSON Format and of a dynamic data type. If Polygon or a MultiPolygon are invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ],..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\n* Polygon contains its vertices.\n\n> [!TIP]\n>\n> * Using literal Polygon or a MultiPolygon may result in better performance.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon1* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|\n| *polygon2* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|",
        "example": "let polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9630937576294,40.77498840732385],[-73.963565826416,40.774383111780914],[-73.96205306053162,40.773745311181585],[-73.96160781383514,40.7743912365898],[-73.9630937576294,40.77498840732385]]]});\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\n\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[3,44],[2,45],[2,43],[3,44]]]});\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\n\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\nlet polygon2 = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[3,44],[2,45],[2,43],[3,44]]],[[[1.192,45.265],[1.005,44.943],[1.356,44.937],[1.192,45.265]]]]});\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\n\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[3,44],[3,45],[2,43],[3,44]]]});\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\n\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\nUS_Counties\n| project name = features.properties.NAME, county = features.geometry\n| project name, intersection = geo_intersection_2polygons(county, area_of_interest)\n| where array_length(intersection.geometries) != 0\n\nlet central_park_polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nlet invalid_polygon = dynamic({\"type\":\"Polygon\"});\nprint isnull(geo_intersection_2polygons(invalid_polygon, central_park_polygon))",
        "sourceLength": 10235
      }
    },
    {
      "name": "geo_intersection_line_with_polygon",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_intersection_line_with_polygon()",
        "description": "Calculates the intersection of a line or a multiline with a polygon or a multipolygon.",
        "syntax": "`geo_intersection_line_with_polygon(`*lineString*`,`*polygon*`)`",
        "returnInfo": "Intersection in GeoJSON Format and of a dynamic data type. If lineString or a multiLineString or a polygon or a multipolygon are invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line or a polygon edges are straight cartesian lines, consider using geo_line_densify() or a geo_polygon_densify() in order to convert planar edges to geodesics.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N],..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\n* Polygon contains its vertices.\n\n> [!TIP]\n>\n> Use literal LineString or MultiLineString for better performance.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A LineString or MultiLineString in the GeoJSON format.|\n| *polygon* | `dynamic` |  *True* | A Polygon or MultiPolygon in the GeoJSON format.|",
        "example": "let lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\n\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-110.522, 39.198],[-91.428, 40.880]]});\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-90.263,36.738],[-102.041,45.274],[-109.335,36.527],[-90.263,36.738]],[[-100.393,41.705],[-103.139,38.925],[-97.558,39.113],[-100.393,41.705]]]});\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\n\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\n\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\nNY_Manhattan_Roads\n| project name = features.properties.Label, road = features.geometry\n| project name, intersection = geo_intersection_line_with_polygon(road, area_of_interest)\n| where array_length(intersection.geometries) != 0\n\nlet area_of_interest = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\nUS_Counties\n| project name = features.properties.NAME, county = features.geometry\n| project name, intersection = geo_intersection_line_with_polygon(area_of_interest, county)\n| where array_length(intersection.geometries) != 0\n\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\nprint is_invalid = isnull(geo_intersection_2lines(lineString, polygon))\n\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[]});\nprint is_invalid = isnull(geo_intersection_2lines(lineString, polygon))",
        "sourceLength": 13309
      }
    },
    {
      "name": "geo_intersects_2lines",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_intersects_2lines()",
        "description": "Calculates whether two lines or multilines intersect.",
        "syntax": "`geo_intersects_2lines(`*lineString1*`,`*lineString2*`)`",
        "returnInfo": "Indicates whether two lines or multilines intersect. If lineString or a multiLineString are invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n\n> [!TIP]\n>\n> Use literal LineString or MultiLineString for better performance.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString1* | `dynamic` |  *True* | A line or multiline in the GeoJSON format.|\n| *lineString2* | `dynamic` |  *True* | A line or multiline in the GeoJSON format.|",
        "example": "let lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\nprint intersects = geo_intersects_2lines(lineString1, lineString2)\n\nlet my_road = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97892951965332,40.78515573551921],[-73.98090362548828,40.78262115769851]]});\nNY_Manhattan_Roads\n| project name = features.properties.Label, road = features.geometry\n| where geo_intersects_2lines(road, my_road)\n| project name\n\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\nprint isnull(geo_intersects_2lines(lineString1, lineString2))",
        "sourceLength": 4687
      }
    },
    {
      "name": "geo_intersects_2polygons",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_intersects_2polygons()",
        "description": "Calculates whether two polygons or multipolygons intersect.",
        "syntax": "`geo_intersects_2polygons(`*polygon1*`,`*polygon1*`)`",
        "returnInfo": "Indicates whether two polygons or multipolygons intersect. If the Polygon or the MultiPolygon are invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1], ..., [lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1], ...,[lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\n* Polygon contains its vertices.\n\n> [!TIP]\n>\n> Use literal LineString or MultiLineString for better performance.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon1* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|\n| *polygon2* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|",
        "example": "let polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9630937576294,40.77498840732385],[-73.963565826416,40.774383111780914],[-73.96205306053162,40.773745311181585],[-73.96160781383514,40.7743912365898],[-73.9630937576294,40.77498840732385]]]});\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\nprint geo_intersects_2polygons(polygon1, polygon2)\n\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\nUS_Counties\n| project name = features.properties.NAME, county = features.geometry\n| where geo_intersects_2polygons(county, area_of_interest)\n| project name\n\nlet central_park_polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nlet invalid_polygon = dynamic({\"type\":\"Polygon\"});\nprint isnull(geo_intersects_2polygons(invalid_polygon, central_park_polygon))",
        "sourceLength": 6709
      }
    },
    {
      "name": "geo_intersects_line_with_polygon",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_intersects_line_with_polygon()",
        "description": "Calculates whether a line or multiline intersect with a polygon or a multipolygon.",
        "syntax": "`geo_intersects_line_with_polygon(`*lineString*`,`*polygon*`)`",
        "returnInfo": "Indicates whether the line or multiline intersects with polygon or a multipolygon. If lineString or a multiLineString or a polygon or a multipolygon are invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line or a polygon edges are straight cartesian lines, consider using geo_line_densify() or a geo_polygon_densify() in order to convert planar edges to geodesics.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1], ...,[lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1], ...,[lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\n* Polygon doesn't necessarily contain its vertices.\n\n> [!TIP]\n>\n> Use literal LineString or MultiLineString for better performance.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A LineString or MultiLineString in the GeoJSON format.|\n| *polygon* | `dynamic` |  *True* | A Polygon or MultiPolygon in the GeoJSON format.|",
        "example": "let lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\nprint intersects = geo_intersects_line_with_polygon(lineString, polygon)\n\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\nNY_Manhattan_Roads\n| project name = features.properties.Label, road = features.geometry\n| where geo_intersects_line_with_polygon(road, area_of_interest)\n| project name\n\nlet area_of_interest = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\nUS_Counties\n| project name = features.properties.NAME, county = features.geometry\n| where geo_intersects_line_with_polygon(area_of_interest, county)\n| project name\n\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\nprint isnull(geo_intersects_2lines(lineString, polygon))\n\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[]});\nprint isnull(geo_intersects_2lines(lineString, polygon))",
        "sourceLength": 8993
      }
    },
    {
      "name": "geo_line_buffer",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_line_buffer()",
        "description": "Calculates polygon or multipolygon that contains all points within the given radius of the input line or multiline on Earth.",
        "syntax": "`geo_line_buffer(`*lineString*`,` *radius*`,` *tolerance*`)`",
        "returnInfo": "Polygon or MultiPolygon around the input LineString or MultiLineString. If the coordinates or radius or tolerance is invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n> * Endcaps of the lines are round.\n> * Both sides of the lines are buffered.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A LineString or MultiLineString in the GeoJSON format.|\n| *radius* | `real` |  *True* | Buffer radius in meters. Valid value must be positive.|\n| *tolerance* | `real` | | Defines the tolerance in meters that determines how much a polygon can deviate from the ideal radius. If unspecified, the default value `10` is used. Tolerance should be no lower than 0.0001% of the radius. Specifying tolerance bigger than radius lowers the tolerance to biggest possible value below the radius.|",
        "example": "let line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-80.66634997047466,24.894526340592122],[-80.67373241820246,24.890808090321286]]});\nprint buffer = geo_line_buffer(line, 4, 0.1)\n\ndatatable(line:dynamic)\n[\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[14.429214068940496,50.10043066548272],[14.431184174126173,50.10046525983731]]}),\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[14.43030222687753,50.100780677801936],[14.4303847111523,50.10020274910934]]})\n]\n| project buffer = geo_line_buffer(line, 2, 0.1)\n| summarize polygons = make_list(buffer)\n| project result = geo_union_polygons_array(polygons)\n\nprint buffer = isnull(geo_line_buffer(dynamic({\"type\":\"LineString\"}), 5))\n\nprint buffer = isnull(geo_line_buffer(dynamic({\"type\":\"LineString\",\"coordinates\":[[0,0],[1,1]]}), 0))",
        "sourceLength": 4086
      }
    },
    {
      "name": "geo_line_centroid",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_line_centroid()",
        "description": "Calculates the centroid of a line or a multiline on Earth.",
        "syntax": "`geo_line_centroid(`*lineString*`)`",
        "returnInfo": "The centroid coordinate values in GeoJSON Format and of a dynamic data type. If the line or the multiline is invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n> * If input is a multiline and contains more than one line, the result will be the centroid of lines union.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices is chosen.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A LineString or MultiLineString in the GeoJSON format.|",
        "example": "let line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95796, 40.80042], [-73.97317, 40.764486]]});\nprint centroid = geo_line_centroid(line);\n\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95807266235352,40.800426144169315],[-73.94966125488281,40.79691751000055],[-73.97317886352539,40.764486356930334],[-73.98210525512695,40.76786669510221],[-73.96004676818848,40.7980870753293]]});\nprint centroid = geo_line_centroid(line)\n| project lng = centroid.coordinates[0]\n\nlet line = dynamic({\"type\":\"MultiLineString\",\"coordinates\":[[[-73.95798683166502,40.800556090021466],[-73.98193359375,40.76819171855746]],[[-73.94940376281738,40.79691751000055],[-73.97317886352539,40.76435634049001]]]});\nprint centroid = geo_line_centroid(line)\n| render scatterchart with (kind = map)\n\nprint is_bad_line = isnull(geo_line_centroid(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))",
        "sourceLength": 5805
      }
    },
    {
      "name": "geo_line_densify",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_line_densify()",
        "description": "Converts planar lines or multiline edges to geodesics by adding intermediate points.",
        "syntax": "`geo_line_densify(`*lineString*`,` *tolerance*`,` [ *preserve_crossing* ]`)`",
        "returnInfo": "Densified line in the GeoJSON format and of a dynamic data type. If either the line or tolerance is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n\n**LineString definition**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* The coordinates [longitude, latitude] must be valid. The longitude must be a real number in the range [-180, +180] and the latitude must be a real number in the range [-90, +90].\n* The edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n\n**Constraints**\n\n* The maximum number of points in the densified line is limited to 10485760.\n* Storing lines in dynamic format has size limits.\n\n**Motivation**\n\n* GeoJSON format defines an edge between two points as a straight cartesian line while `geo_line_densify()` uses geodesic.\n* The decision to use geodesic or planar edges might depend on the dataset and is especially relevant in long edges.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A LineString or MultiLineString in the GeoJSON format.|\n| *tolerance* | int, long, or real | | Defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value `10` is used.|\n| *preserve_crossing* | `bool` | | If `true`, preserves edge crossing over antimeridian. If unspecified, the default value `false` is used.",
        "example": "print densified_line = tostring(geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.949247, 40.796860],[-73.973017, 40.764323]]})))\n\nprint densified_line = tostring(geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[50, 50], [51, 51]]})))\n\nprint densified_line = geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[300,1],[1,1]]}))\n\nprint densified_line = geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1,1],[2,2]]}), 0)",
        "sourceLength": 5794
      }
    },
    {
      "name": "geo_line_interpolate_point",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_line_interpolate_point()",
        "description": "Calculates a point at fraction value on a line on Earth.",
        "syntax": "`geo_line_interpolate_point(`*lineString*`,`*fraction*`)`",
        "returnInfo": "The point coordinate value in GeoJSON Format and of a dynamic data type on line string at the specific fraction value. If the line or fraction value is invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n> * The input should not contain more than a single line string.\n> * In order to calculate a fraction value use geo_line_locate_point()\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices is chosen.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A LineString in the GeoJSON format.|\n| *fraction* | `real` |  *True* | fraction value should be between 0 (start of the line) and 1 (end of the line).|",
        "example": "let line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95796, 40.80042], [-73.97317, 40.764486]]});\nprint point = geo_line_interpolate_point(line, 0.25);\n\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95807266235352,40.800426144169315],[-73.94966125488281,40.79691751000055],[-73.97317886352539,40.764486356930334],[-73.98210525512695,40.76786669510221],[-73.96004676818848,40.7980870753293]]});\nprint point = geo_line_interpolate_point(line, 0.9)\n| project lng = point.coordinates[0]\n\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95807266235352,40.800426144169315],[-73.94966125488281,40.79691751000055],[-73.97317886352539,40.764486356930334],[-73.98210525512695,40.76786669510221],[-73.96004676818848,40.7980870753293]]});\nprint point = geo_line_interpolate_point(line, 0.9)\n| render scatterchart with (kind = map)\n\nprint is_bad_line = isnull(geo_line_interpolate_point(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]}), 0.5))",
        "sourceLength": 6273
      }
    },
    {
      "name": "geo_line_length",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_line_length()",
        "description": "Calculates the total length of a line or a multiline on Earth.",
        "syntax": "`geo_line_length(`*lineString*`)`",
        "returnInfo": "The total length of a line or a multiline, in meters, on Earth. If the line or multiline is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n> * If input is a multiline and contains more than one line, the result will be total length of lines union.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A LineString or MultiLineString in the GeoJSON format.|",
        "example": "let line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95807266235352,40.800426144169315],[-73.94966125488281,40.79691751000055],[-73.97317886352539,40.764486356930334]]});\nprint length = geo_line_length(line)\n\nlet line = dynamic({\"type\":\"MultiLineString\",\"coordinates\":[[[-73.95798683166502,40.800556090021466],[-73.98193359375,40.76819171855746]],[[-73.94940376281738,40.79691751000055],[-73.97317886352539,40.76435634049001]]]});\nprint length = geo_line_length(line)\n\nprint is_bad_line = isnull(geo_line_length(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))",
        "sourceLength": 4627
      }
    },
    {
      "name": "geo_line_locate_point",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_line_locate_point()",
        "description": "Calculates fraction value as a ratio of a line length from line start till a point on a line which is closest to a given point and a whole line length on Earth.",
        "syntax": "`geo_line_locate_point(`*lineString*`, `*longitude*`,`*latitude*`,`[ *use_spheroid* ]`)`",
        "returnInfo": "Line fraction value between 0 and 1 (0 - 100%) as a ratio of a line from start till a point on a line which is closest to a given point and a whole line on Earth. If the line or coordinate value is invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * Line segments are geodesics on the sphere, if 'use_spheroid' = false. If 'use_spheroid' = true, line segments will be geodesics on spheroid. Most applications should measure distance using sphere which is more performant\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n> * The input shouldn't contain more than a single line string.\n> * If the input line string has more than single point on the line at equal distances from the input point, it isn't guaranteed which one is selected.\n> * In order to calculate a point at fraction on a line use geo_line_interpolate_point()\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices is chosen.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A line in the GeoJSON format.|\n| *longitude* | `real` |  *True* | The geospatial coordinate longitude value in degrees. A valid value is in the range [-180, +180].|\n| *latitude* | `real` |  *True* | The geospatial coordinate latitude value in degrees. A valid value is in the range [-90, +90].|\n| *use_spheroid* | `bool` | | If `false` will use a sphere as geodetic datum for measuring distance. If `true` will measure distance using spheroid. If unspecified, the default value `false` is used.",
        "example": "let line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95796, 40.80042], [-73.97317, 40.764486]]});\nprint fraction = geo_line_locate_point(line, -73.965, 40.792);\n\nprint is_bad_line = isnull(geo_line_locate_point(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]}), 1, 1))",
        "sourceLength": 4800
      }
    },
    {
      "name": "geo_line_simplify",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_line_simplify()",
        "description": "Simplifies a line or a multiline by replacing nearly straight chains of short edges with a single long edge on Earth.",
        "syntax": "`geo_line_simplify(`*lineString*`,` *tolerance*`)`",
        "returnInfo": "Simplified line or a multiline in the GeoJSON format and of a dynamic data type, with no two vertices with distance less than tolerance. If either the line or tolerance is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n> * If input is a multiline and contains more than one line, the result will be simplification of lines union.\n> * High tolerance may cause small line to disappear.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | A LineString or MultiLineString in the GeoJSON format.|\n| *tolerance* | int, long, or real | | Defines minimum distance in meters between any two vertices. Supported values are in the range [0, ~7,800,000 meters]. If unspecified, the default value `10` is used.|",
        "example": "let line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97033169865608,40.789063020152824],[-73.97039607167244,40.78897975920816],[-73.9704617857933,40.78888837512432],[-73.97052884101868,40.7887949601531],[-73.9706052839756,40.788698498903564],[-73.97065222263336,40.78862640672032],[-73.97072866559029,40.78852791445617],[-73.97079303860664,40.788434498977836]]});\nprint simplified = geo_line_simplify(line, 10)\n\nNY_Manhattan_Roads\n| project road = features.geometry\n| project road_simplified = geo_line_simplify(road, 100)\n| summarize roads_lst = make_list(road_simplified)\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", roads_lst), \"properties\", bag_pack(\"name\", \"roads\"))\n\nNY_Manhattan_Roads\n| project road = features.geometry\n| project road_simplified = geo_line_simplify(road, 100)\n| summarize roads_lst = make_list(road_simplified)\n| project roads = geo_union_lines_array(roads_lst)\n\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))\n\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2,2]]}), -1))\n\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1.1, 1.1],[1.2,1.2]]}), 100000))",
        "sourceLength": 6926
      }
    },
    {
      "name": "geo_line_to_s2cells",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_line_to_s2cells()",
        "description": "Calculates S2 cell tokens that cover a line or multiline on Earth. This function is a useful geospatial join tool.\n\nRead more about S2 cell hierarchy.",
        "syntax": "`geo_line_to_s2cells(`*lineString* [`,` *level*[ `,` *radius*]]`)`",
        "returnInfo": "Array of S2 cell token strings that cover a line or a multiline. If the radius is set to a positive value, then the covering will be of both input shape and all points within the radius of the input geometry.\n\nIf any of the following:  line, level, radius is invalid, or the cell count exceeds the limit, the query will produce a null result.\n\n> [!NOTE]\n>\n> * Covering the line with S2 cell tokens can be useful in matching coordinates to lines, thus finding points nearby lines.\n> * The line covering tokens are of the same S2 cell level.\n> * The maximum count of tokens per line is 65536.\n> * The geodetic datum used to measure distance on Earth is a sphere. Line edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n\n**Choosing the S2 cell level**\n\n* Ideally we would want to cover every line with one or just a few unique cells such that no two lines share the same cell. \n* In practice, try covering with just a few cells, no more than a dozen. Covering with more than 10,000 cells might not yield good performance.\n* Query run time and memory consumption might differ greatly because of different S2 cell level values.\n\n**Performance improvement suggestions**\n\n* If possible, reduce coordinates table size before join, by grouping coordinates that are very close to each other by using geospatial clustering or by filtering out unnecessary coordinates due to nature of the data or business needs.\n* If possible, reduce lines count due to nature of the data or business needs. Filter out unnecessary lines before join, scope to the area of interest or unify lines.\n* In case of very big lines, reduce their size using geo_line_simplify().\n* Changing S2 cell level may improve performance and memory consumption.\n* Changing join kind and hint may improve performance and memory consumption.\n* In case positive radius is set, reverting to radius 0 on buffered shape using geo_line_buffer() may improve performance.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineString* | `dynamic` |  *True* | Line or multiline in the GeoJSON format.|\n| *level* | `int` | | Defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.|\n| *radius* | `real` | | Buffer radius in meters. If unspecified, the default value `0` is used.|",
        "example": "let radius = 500;\nlet tube_stations = datatable(tube_station_name:string, lng:real, lat: real)\n[\n    \"St. James' Park\",        -0.13451078568013486, 51.49919145858172,\n     \"London Bridge station\", -0.08492752160134387, 51.504876316440914,\n     // more points\n];\nlet streets = datatable(street_name:string, line:dynamic)\n[\n    \"Buckingham Palace\", dynamic({\"type\":\"LineString\",\"coordinates\":[[-0.1399656708283601,51.50190802248855],[-0.14088438832752104,51.50012082761452]]}),\n    \"London Bridge\",    dynamic({\"type\":\"LineString\",\"coordinates\":[[-0.087152,51.509596],[-0.088340,51.506110]]}),\n    // more lines\n];\nlet join_level = 14;\nlet lines = materialize(streets | extend id = new_guid());\nlet res = \n    lines\n    | project id, covering = geo_line_to_s2cells(line, join_level, radius)\n    | mv-expand covering to typeof(string)\n    | join kind=inner hint.strategy=broadcast\n    (\n        tube_stations\n        | extend covering = geo_point_to_s2cell(lng, lat, join_level)\n    ) on covering;\nres | lookup lines on id\n| where geo_distance_point_to_line(lng, lat, line) <= radius\n| summarize count = count() by name = street_name\n\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[[0,0],[0,0]]]});\nprint isnull(geo_line_to_s2cells(line))",
        "sourceLength": 6625
      }
    },
    {
      "name": "geo_point_buffer",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_point_buffer()",
        "description": "Calculates polygon that contains all points within the given radius of the point on Earth.",
        "syntax": "`geo_point_buffer(`*longitude*`,` *latitude*`,` *radius*`,` *tolerance*`)`",
        "returnInfo": "Polygon around the input point. If the coordinates or radius or tolerance is invalid, the query produces a null result.\n\n> [!NOTE]\n>\n>* The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n>* The geodetic datum used to measure distance on Earth is a sphere.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | Geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *latitude* | `real` |  *True* | Geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *radius* | `real` |  *True* | Buffer radius in meters. Valid value must be positive.|\n| *tolerance* | `real` || Defines the tolerance in meters that determines how much a polygon can deviate from the ideal radius. If unspecified, the default value `10` is used. Tolerance should be no lower than 0.0001% of the radius. Specifying tolerance bigger than radius lowers the tolerance to biggest possible value below the radius.|",
        "example": "print buffer = geo_point_buffer(-115.1745008278, 36.1497251277, 20000)\n\ndatatable(longitude:real, latitude:real, radius:real)\n[\n    real(-80.3212217992616), 25.268683367546604, 5000,\n    real(-80.81717403605833), 24.82658441221962, 3000\n]\n| project buffer = geo_point_buffer(longitude, latitude, radius)\n| summarize polygons = make_list(buffer)\n| project result = geo_union_polygons_array(polygons)\n\nprint result = isnull(geo_point_buffer(200, 1,0.1))\n\nprint result = isnull(geo_point_buffer(10, 10, -1))",
        "sourceLength": 3106
      }
    },
    {
      "name": "geo_point_in_circle",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_point_in_circle()",
        "description": "Calculates whether the geospatial coordinates are inside a circle on Earth.",
        "syntax": "`geo_point_in_circle(`*p_longitude*`,` *p_latitude*`,` *pc_longitude*`,` *pc_latitude*`,` *c_radius*`)`",
        "returnInfo": "Indicates whether the geospatial coordinates are inside a circle. If the coordinates or circle is invalid, the query produces a null result.\n\n> [!NOTE]\n>\n>* The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n>* The geodetic datum used to measure distance on Earth is a sphere.\n>* A circle is a spherical cap on Earth. The radius of the cap is measured along the surface of the sphere.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *p_longitude* | `real` |  *True* | Geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *p_latitude* | `real` |  *True* | Geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *pc_longitude* | `real` |  *True* | Circle center geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *pc_latitude* | `real` |  *True* | circle center geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *c_radius* | `real` |  *True* | Circle radius in meters. Valid value must be positive.|",
        "example": "datatable(longitude:real, latitude:real, place:string)\n[\n    real(-122.317404), 47.609119, 'Seattle',                   // In circle \n    real(-123.497688), 47.458098, 'Olympic National Forest',   // In exterior of circle  \n    real(-122.201741), 47.677084, 'Kirkland',                  // In circle\n    real(-122.443663), 47.247092, 'Tacoma',                    // In exterior of circle\n    real(-122.121975), 47.671345, 'Redmond',                   // In circle\n]\n| where geo_point_in_circle(longitude, latitude, -122.317404, 47.609119, 18000)\n| project place\n\nStormEvents\n| project BeginLon, BeginLat, EventType\n| where geo_point_in_circle(BeginLon, BeginLat, real(-81.3891), 28.5346, 1000 * 100)\n| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat)\n| project geo_s2cell_to_central_point(hash), EventType, count_\n| render piechart with (kind=map) // map pie rendering available in Kusto Explorer desktop\n\nnyc_taxi\n| project pickup_longitude, pickup_latitude\n| where geo_point_in_circle( pickup_longitude, pickup_latitude, real(-73.9928), 40.7429, 10)\n| summarize by hash = geo_point_to_s2cell(pickup_longitude, pickup_latitude, 22)\n| project geo_s2cell_to_central_point(hash)\n| render scatterchart with (kind = map)\n\nprint in_circle = geo_point_in_circle(-122.143564, 47.535677, -122.100896, 47.527351, 3500)\n\nprint in_circle = geo_point_in_circle(-122.137575, 47.630683, -122.100896, 47.527351, 3500)\n\nprint in_circle = geo_point_in_circle(200, 1, 1, 1, 1)\n\nprint in_circle = geo_point_in_circle(1, 1, 1, 1, -1)",
        "sourceLength": 8206
      }
    },
    {
      "name": "geo_point_in_polygon",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_point_in_polygon()",
        "description": "Calculates whether the geospatial coordinates are inside a polygon or a multipolygon on Earth.",
        "syntax": "`geo_point_in_polygon(`*longitude*`,` *latitude*`,` *polygon*`)`",
        "returnInfo": "Indicates whether the geospatial coordinates are inside a polygon. If the coordinates or polygon is invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions, is chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices is chosen.\n* LinearRings must not cross and must not share edges. LinearRings might share vertices.\n* Polygon doesn't necessarily contain its vertices. Point containment in polygon is defined so that if the Earth is subdivided into polygons, every point is contained by exactly one polygon.\n\n> [!TIP]\n>\n> * Using literal Polygon or a MultiPolygon may result in better performance.\n> * If you want to know if any of the polygons contains a point, try the following steps: Fold the collection of polygons into one multipolygon. Then query this multipolygon. This may improve performance. See the following example.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *latitude* | `real` |  *True* | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|",
        "example": "datatable(longitude:real, latitude:real, description:string)\n[\n    real(-73.985654), 40.748487, 'Empire State Building',           // In Polygon \n    real(-73.963249), 40.779525, 'The Metropolitan Museum of Art',  // In exterior of polygon\n    real(-73.874367), 40.777356, 'LaGuardia Airport',               // In exterior of polygon\n]\n| where geo_point_in_polygon(longitude, latitude, dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.92597198486328,40.87821814104651],[-73.94691467285156,40.85069618625578],[-73.94691467285156,40.841865966890786],[-74.01008605957031,40.7519385984599],[-74.01866912841797,40.704586878965245],[-74.01214599609375,40.699901911003046],[-73.99772644042969,40.70875101828792],[-73.97747039794922,40.71083299030839],[-73.97026062011719,40.7290474687069],[-73.97506713867186,40.734510840309376],[-73.970947265625,40.74543623770158],[-73.94210815429688,40.77586181063573],[-73.9434814453125,40.78080140115127],[-73.92974853515625,40.79691751000055],[-73.93077850341797,40.804454347291006],[-73.93489837646484,40.80965166748853],[-73.93524169921875,40.837190668541105],[-73.92288208007812,40.85770758108904],[-73.9101791381836,40.871728144624974],[-73.92597198486328,40.87821814104651]],[[-73.95824432373047,40.80071852197889],[-73.98206233978271,40.76815921628347],[-73.97309303283691,40.76422632379533],[-73.94914627075195,40.796949998204596],[-73.95824432373047,40.80071852197889]]]}))\n\nlet multipolygon = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]],[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]],[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]]});\nlet coordinates = \n    datatable(longitude:real, latitude:real, description:string)\n    [\n        real(-73.9741), 40.7914, 'Upper West Side',    // In MultiPolygon\n        real(-73.9950), 40.7340, 'Greenwich Village',  // In MultiPolygon\n        real(-73.8743), 40.7773, 'LaGuardia Airport',  // In exterior of MultiPolygon\n    ];\ncoordinates\n| where geo_point_in_polygon(longitude, latitude, multipolygon)\n\nlet california = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-123.233256,42.006186],[-122.378853,42.011663],[-121.037003,41.995232],[-120.001861,41.995232],[-119.996384,40.264519],[-120.001861,38.999346],[-118.71478,38.101128],[-117.498899,37.21934],[-116.540435,36.501861],[-115.85034,35.970598],[-114.634459,35.00118],[-114.634459,34.87521],[-114.470151,34.710902],[-114.333228,34.448009],[-114.136058,34.305608],[-114.256551,34.174162],[-114.415382,34.108438],[-114.535874,33.933176],[-114.497536,33.697668],[-114.524921,33.54979],[-114.727567,33.40739],[-114.661844,33.034958],[-114.524921,33.029481],[-114.470151,32.843265],[-114.524921,32.755634],[-114.72209,32.717295],[-116.04751,32.624187],[-117.126467,32.536556],[-117.24696,32.668003],[-117.252437,32.876127],[-117.329114,33.122589],[-117.471515,33.297851],[-117.7837,33.538836],[-118.183517,33.763391],[-118.260194,33.703145],[-118.413548,33.741483],[-118.391641,33.840068],[-118.566903,34.042715],[-118.802411,33.998899],[-119.218659,34.146777],[-119.278905,34.26727],[-119.558229,34.415147],[-119.875891,34.40967],[-120.138784,34.475393],[-120.472878,34.448009],[-120.64814,34.579455],[-120.609801,34.858779],[-120.670048,34.902595],[-120.631709,35.099764],[-120.894602,35.247642],[-120.905556,35.450289],[-121.004141,35.461243],[-121.168449,35.636505],[-121.283465,35.674843],[-121.332757,35.784382],[-121.716143,36.195153],[-121.896882,36.315645],[-121.935221,36.638785],[-121.858544,36.6114],[-121.787344,36.803093],[-121.929744,36.978355],[-122.105006,36.956447],[-122.335038,37.115279],[-122.417192,37.241248],[-122.400761,37.361741],[-122.515777,37.520572],[-122.515777,37.783465],[-122.329561,37.783465],[-122.406238,38.15042],[-122.488392,38.112082],[-122.504823,37.931343],[-122.701993,37.893004],[-122.937501,38.029928],[-122.97584,38.265436],[-123.129194,38.451652],[-123.331841,38.566668],[-123.44138,38.698114],[-123.737134,38.95553],[-123.687842,39.032208],[-123.824765,39.366301],[-123.764519,39.552517],[-123.85215,39.831841],[-124.109566,40.105688],[-124.361506,40.259042],[-124.410798,40.439781],[-124.158859,40.877937],[-124.109566,41.025814],[-124.158859,41.14083],[-124.065751,41.442061],[-124.147905,41.715908],[-124.257444,41.781632],[-124.213628,42.000709],[-123.233256,42.006186]]]});\nStormEvents\n| project BeginLon, BeginLat, EventType\n| where geo_point_in_polygon(BeginLon, BeginLat, california)\n| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat, 7)\n| project geo_s2cell_to_central_point(hash), EventType, count_\n| render piechart with (kind=map) // map rendering available in Kusto Explorer desktop\n\nlet Polygons = datatable(description:string, polygon:dynamic)\n    [  \n      \"New York city area\", dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.85009765625,40.85744791303121],[-74.16046142578125,40.84290487729676],[-74.190673828125,40.59935608796518],[-73.83087158203125,40.61812224225511],[-73.85009765625,40.85744791303121]]]}),\n      \"Seattle area\",       dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-122.200927734375,47.68573021131587],[-122.4591064453125,47.68573021131587],[-122.4755859375,47.468949677672484],[-122.17620849609374,47.47266286861342],[-122.200927734375,47.68573021131587]]]}),\n      \"Las Vegas\",          dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-114.9,36.36],[-115.4498291015625,36.33282808737917],[-115.4498291015625,35.84453450421662],[-114.949951171875,35.902399875143615],[-114.9,36.36]]]}),\n    ];\nlet Locations = datatable(longitude:real, latitude:real)\n    [\n      real(-73.95),  real(40.75), // Somewhere in New York\n      real(-122.3),  real(47.6),  // Somewhere in Seattle\n      real(-115.18), real(36.16)  // Somewhere in Las Vegas\n    ];\nPolygons\n| project polygonPartition = tostring(pack(\"description\", description, \"polygon\", polygon))\n| partition hint.materialized=true hint.strategy=native by polygonPartition\n{   \n     Locations\n     | extend description = parse_json(toscalar(polygonPartition)).description\n     | extend polygon = parse_json(toscalar(polygonPartition)).polygon\n     | where geo_point_in_polygon(longitude, latitude, polygon)\n     | project-away polygon\n}\n\nlet Polygons = \n    datatable(polygon:dynamic)\n    [\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]]}),\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]]}),\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]}),\n    ];\nlet Coordinates = \n    datatable(longitude:real, latitude:real, description:string)\n    [\n        real(-73.9741), 40.7914, 'Upper West Side',\n        real(-73.9950), 40.7340, 'Greenwich Village',\n        real(-73.8743), 40.7773, 'LaGuardia Airport',\n    ];\nlet multipolygon = toscalar(\n    Polygons\n    | project individual_polygon = pack_array(polygon.coordinates)\n    | summarize multipolygon_coordinates = make_list(individual_polygon)\n    | project multipolygon = bag_pack(\"type\",\"MultiPolygon\", \"coordinates\", multipolygon_coordinates));\nCoordinates\n| where geo_point_in_polygon(longitude, latitude, multipolygon)\n\nprint in_polygon = geo_point_in_polygon(200,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,1],[0,0]]]}))\n\nprint in_polygon = geo_point_in_polygon(1,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]}))",
        "sourceLength": 42707
      }
    },
    {
      "name": "geo_point_to_geohash",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_point_to_geohash()",
        "description": "Calculates the geohash string value of a geographic location.\n\nRead more about geohash.",
        "syntax": "`geo_point_to_geohash(`*longitude*`,` *latitude*`,`[ *accuracy* ]`)`",
        "returnInfo": "The geohash string value of a given geographic location with requested accuracy length. If the coordinate or accuracy is invalid, the query produces an empty result.\n\n> [!NOTE]\n>\n> * Geohash can be a useful geospatial clustering tool.\n> * Geohash has 18 accuracy levels with area coverage ranging from 25 Million km² at the highest level 1 to 0.6 μ² at the lowest level 18.\n> * Common prefixes of geohash indicate proximity of points to each other. The longer a shared prefix is, the closer the two places are. Accuracy value translates to geohash length.\n> * Geohash is a rectangular area on a plane surface.\n> * Invoking the geo_geohash_to_central_point() function on a geohash string that was calculated on longitude x and latitude y won't necessarily return x and y.\n> * Due to the geohash definition, it's possible that two geographic locations are very close to each other but have different geohash codes.\n\n**Geohash rectangular area coverage per accuracy value:**\n\n| Accuracy | Width     | Height    |\n|:----------|:-----------|:-----------|\n| 1        | 5000 km   | 5000 km   |\n| 2        | 1250 km   | 625 km    |\n| 3        | 156.25 km | 156.25 km |\n| 4        | 39.06 km  | 19.53 km  |\n| 5        | 4.88 km   | 4.88 km   |\n| 6        | 1.22 km   | 0.61 km   |\n| 7        | 152.59 m  | 152.59 m  |\n| 8        | 38.15 m   | 19.07 m   |\n| 9        | 4.77 m    | 4.77 m    |\n| 10       | 1.19 m    | 0.59 m    |\n| 11       | 149.01 mm | 149.01 mm |\n| 12       | 37.25 mm  | 18.63 mm  |\n| 13       | 4.66 mm   | 4.66 mm   |\n| 14       | 1.16 mm   | 0.58 mm   |\n| 15       | 145.52 μ  | 145.52 μ  |\n| 16       | 36.28 μ   | 18.19 μ   |\n| 17       | 4.55 μ    | 4.55 μ    |\n| 18       | 1.14 μ    | 0.57 μ    |\n\nSee also geo_point_to_s2cell(), geo_point_to_h3cell().\n\nFor comparison with other available grid systems, see geospatial clustering with Kusto Query Language.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *latitude* | `real` |  *True* | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *accuracy* | `int` | | Defines the requested accuracy. Supported values are in the range [1, 18]. If unspecified, the default value `5` is used.|",
        "example": "StormEvents\n| project BeginLon, BeginLat\n| summarize by hash=geo_point_to_geohash(BeginLon, BeginLat, 3)\n| project geo_geohash_to_central_point(hash)\n| render scatterchart with (kind=map)\n\nprint geohash = geo_point_to_geohash(-80.195829, 25.802215, 8)\n\ndatatable(location_id:string, longitude:real, latitude:real)\n[\n  \"A\", double(-122.303404), 47.570482,\n  \"B\", double(-122.304745), 47.567052,\n  \"C\", double(-122.278156), 47.566936,\n]\n| summarize count = count(),                                          // items per group count\n            locations = make_list(location_id)                        // items in the group\n            by geohash = geo_point_to_geohash(longitude, latitude)    // geohash of the group\n\nprint geohash = geo_point_to_geohash(200,1,8)\n\nprint geohash = geo_point_to_geohash(1,1,int(null))",
        "sourceLength": 7071
      }
    },
    {
      "name": "geo_point_to_h3cell",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_point_to_h3cell()",
        "description": "Calculates the H3 Cell token string value of a geographic location.\n\nRead more about H3 Cell.",
        "syntax": "`geo_point_to_h3cell(`*longitude*`,` *latitude*`,` [ *resolution* ]`)`",
        "returnInfo": "The H3 Cell token string value of a given geographic location. If the coordinates or levels are invalid, the query will produce an empty result.\n\n> [!NOTE]\n>\n> * H3 Cell can be a useful geospatial clustering tool.\n> * H3 Cell has 16 levels of hierarchy with area coverage ranging from 4,250,547km² at the highest level 0 to 0.9m² at the lowest level 15.\n> * H3 Cell has a unique hexagon shape and this leads some unique properties:\n> * Hexagons have 6 neighbors\n> * Hexagons allow us to approximate radiuses easily and all neighbors are equidistant\n> * Hexagons are visually pleasant\n> * In some rare cases the shape is pentagon.\n> * H3 Cell has a rectangular area on a plane surface.\n> * Invoking the geo_h3cell_to_central_point() function on an H3 Cell token string that was calculated on longitude x and latitude y won't necessarily return x and y.\n> * It's possible that two geographic locations are very close to each other but have different H3 Cell tokens.\n\n**H3 Cell approximate area coverage per resolution value**\n\n|Level|Average Hexagon Edge Length|\n|:--|:--|\n|0|1108 km|\n|1|419 km|\n|2|158 km|\n|3|60 km|\n|4|23 km|\n|5|8 km|\n|6|3 km|\n|7|1 km|\n|8|460 m|\n|9|174 m|\n|10|66 m|\n|11|25 m|\n|12|9 m|\n|13|3 m|\n|14|1 m|\n|15|0.5 m|\n\nThe table source can be found in this H3 Cell statistical resource.\n\nSee also geo_point_to_s2cell(), geo_point_to_geohash().\n\nFor comparison with other available grid systems. see geospatial clustering with Kusto Query Language.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *latitude* | `real` |  *True* | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *resolution* | `int` | | Defines the requested cell resolution. Supported values are in the range [0, 15]. If unspecified, the default value `6` is used.|",
        "example": "print h3cell = geo_point_to_h3cell(-74.04450446039874, 40.689250859314974, 6)\n\ndatatable(location_id:string, longitude:real, latitude:real)\n[\n    \"A\", -73.956683, 40.807907,\n    \"B\", -73.916869, 40.818314,\n    \"C\", -73.989148, 40.743273,\n]\n| summarize count = count(),                                         // Items per group count\n            locations = make_list(location_id)                       // Items in the group\n            by h3cell = geo_point_to_h3cell(longitude, latitude, 5)  // H3 Cell of the group\n\nprint h3cell = geo_point_to_h3cell(300,1,8)\n\nprint h3cell = geo_point_to_h3cell(1,1,16)\n\nprint h3cell = geo_point_to_h3cell(1,1,int(null))",
        "sourceLength": 6310
      }
    },
    {
      "name": "geo_point_to_s2cell",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_point_to_s2cell()",
        "description": "Calculates the S2 cell token string value of a geographic location.\n\nRead more about S2 cell hierarchy.\nS2 cell can be a useful geospatial clustering tool. An S2 cell is a cell on a spherical surface and it has geodesic edges. S2 cells are part of a hierarchy dividing up the Earth's surface. They have a maximum of 31 levels, ranging from zero to 30, which define the number of times a cell is subdivided. Levels range from the largest coverage on level zero with area coverage of 85,011,012.19km², to the lowest coverage of 0.44 cm² at level 30. As S2 cells are subdivided at higher levels, the cell center is preserved well. Two geographic locations can be very close to each other but they have different S2 cell tokens.\n\n>[!NOTE]\n> If you invoke the geo_s2cell_to_central_point() function on an S2 cell token string that was calculated on longitude x and latitude y, the function won't necessarily return x and y.\n\nRead more about S2 cell hierarchy.",
        "syntax": "`geo_point_to_s2cell(`*longitude*`,` *latitude*`,` [ *level* ]`)`",
        "returnInfo": "The S2 cell token string value of a given geographic location. If the coordinates or levels are invalid, the query produces an empty result.\n\nFor every level, the size of the S2 cell is similar but not exactly equal. Nearby cell sizes tend to be more equal.\n\n|Level|Minimum random cell edge length (UK)|Maximum random cell edge length (US)|\n|:--|:--|:--|\n|0|7842 km|7842 km|\n|1|3921 km|5004 km|\n|2|1825 km|2489 km|\n|3|840 km|1310 km|\n|4|432 km|636 km|\n|5|210 km|315 km|\n|6|108 km|156 km|\n|7|54 km|78 km|\n|8|27 km|39 km|\n|9|14 km|20 km|\n|10|7 km|10 km|\n|11|3 km|5 km|\n|12|1699 m|2 km|\n|13|850 m|1225 m|\n|14|425 m|613 m|\n|15|212 m|306 m|\n|16|106 m|153 m|\n|17|53 m|77 m|\n|18|27 m|38 m|\n|19|13 m|19 m|\n|20|7 m|10 m|\n|21|3 m|5 m|\n|22|166 cm|2 m|\n|23|83 cm|120 cm|\n|24|41 cm|60 cm|\n|25|21 cm|30 cm|\n|26|10 cm|15 cm|\n|27|5 cm|7 cm|\n|28|2 cm|4 cm|\n|29|12 mm|18 mm|\n|30|6 mm|9 mm|\n\nThe table source can be found in this S2 Cell statistical resource.\n\nFor comparison with other available grid systems, see geospatial clustering with Kusto Query Language.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *longitude* | `real` |  *True* | Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].|\n| *latitude* | `real` |  *True* | Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].|\n| *level* | `int` | | Defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.|",
        "example": "StormEvents\n| project BeginLon, BeginLat\n| summarize by hash=geo_point_to_s2cell(BeginLon, BeginLat, 5)\n| project geo_s2cell_to_central_point(hash)\n| render scatterchart with (kind=map)\n\nprint s2cell = geo_point_to_s2cell(-80.195829, 25.802215, 8)\n\ndatatable(location_id:string, longitude:real, latitude:real)\n[\n  \"A\", 10.1234, 53,\n  \"B\", 10.3579, 53,\n  \"C\", 10.6842, 53,\n]\n| summarize count = count(),                                        // items per group count\n            locations = make_list(location_id)                      // items in the group\n            by s2cell = geo_point_to_s2cell(longitude, latitude, 8) // s2 cell of the group\n\nprint s2cell = geo_point_to_s2cell(300,1,8)\n\nprint s2cell = geo_point_to_s2cell(1,1,35)\n\nprint s2cell = geo_point_to_s2cell(1,1,int(null))",
        "sourceLength": 7698
      }
    },
    {
      "name": "geo_polygon_area",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_polygon_area()",
        "description": "Calculates the area of a polygon or a multipolygon on Earth.",
        "syntax": "`geo_polygon_area(`*polygon*`)`",
        "returnInfo": "The area of a polygon or a multipolygon, in square meters, on Earth. If the polygon or the multipolygon is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|",
        "example": "let central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nprint area = geo_polygon_area(central_park)\n\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\nprint polygons_union_area = geo_polygon_area(polygons)\n\nUS_States\n| project name = features.properties.NAME, polygon = geo_polygon_densify(features.geometry)\n| project name, area = geo_polygon_area(polygon)\n| top 5 by area desc\n\nprint isnull(geo_polygon_area(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))",
        "sourceLength": 6712
      }
    },
    {
      "name": "geo_polygon_buffer",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_polygon_buffer()",
        "description": "Calculates polygon or multipolygon that contains all points within the given radius of the input polygon or multipolygon on Earth.",
        "syntax": "`geo_polygon_buffer(`*polygon*`,` *radius*`,` *tolerance*`)`",
        "returnInfo": "Polygon or MultiPolygon around the input Polygon or multipolygon. If the coordinates or radius or tolerance is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1], ..., [lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1], ...,[lng_i,lat_i], ...,[lng_j,lat_j], ...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\n* Polygon contains its vertices.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|\n| *radius* | `real` |  *True* | Buffer radius in meters. Valid value must be positive.|\n| *tolerance* | `real` || Defines the tolerance in meters that determines how much a polygon can deviate from the ideal radius. If unspecified, the default value `10` is used. Tolerance should be no lower than 0.0001% of the radius. Specifying tolerance bigger than radius will lower the tolerance to biggest possible value below the radius.|",
        "example": "let polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[139.813757,35.719666],[139.72558,35.71813],[139.727471,35.653231],[139.818721,35.657264],[139.813757,35.719666]]]});\nprint buffer = geo_polygon_buffer(polygon, 10000)\n\ndatatable(polygon:dynamic, radius:real )\n[\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[12.451218693639277,41.906457003556625],[12.445753852969375,41.90160968881543],[12.453514425793855,41.90361551885886],[12.451218693639277,41.906457003556625]]]}), 100,\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[12.4566086734784,41.905119850039995],[12.453913683559591,41.903652663265234],[12.455485761012113,41.90146110630562],[12.4566086734784,41.905119850039995]]]}), 20\n]\n| project buffer = geo_polygon_buffer(polygon, radius)\n| summarize polygons = make_list(buffer)\n| project result = geo_union_polygons_array(polygons)\n\nprint buffer = isnull(geo_polygon_buffer(dynamic({\"type\":\"p\"}), 1))\n\nprint buffer = isnull(geo_polygon_buffer(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,10],[0,10],[0,0],[10,10]]]}), 0))",
        "sourceLength": 5208
      }
    },
    {
      "name": "geo_polygon_centroid",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_polygon_centroid()",
        "description": "Calculates the centroid of a polygon or a multipolygon on Earth.",
        "syntax": "`geo_polygon_centroid(`*polygon*`)`",
        "returnInfo": "The centroid coordinate values in GeoJSON Format and of a dynamic data type. If polygon or multipolygon are invalid, the query produces a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n> * If input is a multipolygon and contains more than one polygon, the result will be the centroid of polygons union.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions and chooses the smaller of the two regions.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices is chosen.\n* LinearRings must not cross and must not share edges. LinearRings might share vertices.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|",
        "example": "let central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nprint centroid = geo_polygon_centroid(central_park)\n\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nprint \ncentroid = geo_polygon_centroid(central_park)\n| project lng = centroid.coordinates[0]\n\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\nprint polygons_union_centroid = geo_polygon_centroid(polygons)\n\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nprint \ncentroid = geo_polygon_centroid(central_park)\n| render scatterchart with (kind = map)\n\nprint isnull(geo_polygon_centroid(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))",
        "sourceLength": 8213
      }
    },
    {
      "name": "geo_polygon_densify",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_polygon_densify()",
        "description": "Converts polygon or multipolygon planar edges to geodesics by adding intermediate points.",
        "syntax": "`geo_polygon_densify(`*polygon*`,` *tolerance*`,` [ *preserve_crossing* ]`)`",
        "returnInfo": "Densified polygon in the GeoJSON format and of a dynamic data type. If either the polygon or tolerance is invalid, the query produces a null result.\n\n> [!NOTE]\n> The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|\n| *tolerance* | int, long, or real | | Defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value is  `10`.|\n| *preserve_crossing* | `bool` | | If `true`, preserves edge crossing over antimeridian. If unspecified, the default value `false` is used.|\n\n### Polygon definition\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* `LinearRingShell` is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* `LinearRingHole` is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* `LinearRing` vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* `LinearRingShell` encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* `LinearRing` edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n\n### Constraints\n\n* The maximum number of points in the densified polygon is limited to 10485760.\n* Storing polygons in dynamic format has size limits.\n* Densifying a valid polygon may invalidate the polygon. The algorithm adds points in a non-uniform manner, and as such may cause edges to intertwine with each other.\n\n### Motivation\n\n* GeoJSON format defines an edge between two points as a straight cartesian line while `geo_polygon_densify()` uses geodesic.\n* The decision to use geodesic or planar edges might depend on the dataset and is especially relevant in long edges.",
        "example": "print densified_polygon = tostring(geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958244,40.800719],[-73.949146,40.79695],[-73.973093,40.764226],[-73.982062,40.768159],[-73.958244,40.800719]]]})))\n\nprint densified_polygon = tostring(geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,10],[11,10],[11,11],[10,11],[10,10]]]})))\n\nprint densified_polygon = geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,900],[11,10],[11,11],[10,11],[10,10]]]}))\n\nprint densified_polygon = geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,10],[11,10],[11,11],[10,11],[10,10]]]}), 0)",
        "sourceLength": 7048
      }
    },
    {
      "name": "geo_polygon_perimeter",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_polygon_perimeter()",
        "description": "Calculates the length of the boundary of a polygon or a multipolygon on Earth.",
        "syntax": "`geo_polygon_perimeter(`*polygon*`)`",
        "returnInfo": "The length of the boundary of polygon or a multipolygon, in meters, on Earth. If polygon or multipolygon are invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n> * If input is a multipolygon and contains more than one polygon, the result will be the length of the boundary of polygons union.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|",
        "example": "let central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\nprint perimeter = geo_polygon_perimeter(central_park)\n\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\nprint perimeter = geo_polygon_perimeter(polygons)\n\nprint is_invalid = isnull(geo_polygon_perimeter(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))",
        "sourceLength": 6048
      }
    },
    {
      "name": "geo_polygon_simplify",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_polygon_simplify()",
        "description": "Simplifies a polygon or a multipolygon by replacing nearly straight chains of short edges with a single long edge on Earth.",
        "syntax": "`geo_polygon_simplify(`*polygon*`,` *tolerance*`)`",
        "returnInfo": "Simplified polygon or a multipolygon in the GeoJSON format and of a dynamic data type, with no two vertices with distance less than tolerance. If either the polygon or tolerance is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * If input has more than one polygon, with mutual borders, please see geo_simplify_polygons_array().\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\n> * High tolerance may cause small polygon to disappear.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|\n| *tolerance* | int, long, or real | | Defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value is  `10`.|",
        "example": "let polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94885122776031,40.79673476355657],[-73.94885927438736,40.79692258628347],[-73.94887939095497,40.79692055577034],[-73.9488673210144,40.79693476936093],[-73.94888743758202,40.79693476936093],[-73.9488834142685,40.796959135509105],[-73.94890084862709,40.79695304397289],[-73.94906312227248,40.79710736271788],[-73.94923612475395,40.7968708081794],[-73.94885122776031,40.79673476355657]]]});\nprint simplified = geo_polygon_simplify(polygon)\n\nPolygons\n| project polygon = features.geometry\n| project simplified = geo_polygon_simplify(polygon, 1000)\n| summarize lst = make_list(simplified)\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", lst), \"properties\", bag_pack(\"name\", \"polygons\"))\n\nUS_States\n| project polygon = features.geometry\n| project simplified = geo_polygon_simplify(polygon, 1000)\n| summarize lst = make_list(simplified)\n| project polygons = geo_union_polygons_array(lst)\n\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[5,48]]]});\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon))\n\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[0,50],[0,47],[4,47],[5,48]]]});\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon, -0.1))\n\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[0,50],[0,47],[4,47],[5,48]]]});\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon, 1000000))",
        "sourceLength": 8696
      }
    },
    {
      "name": "geo_polygon_to_h3cells",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_polygon_to_h3cells()",
        "description": "Converts polygon to H3 cells. This function is a useful geospatial join and visualization tool.",
        "syntax": "`geo_polygon_to_h3cells(`*polygon* [`,` *resolution*[`,` *radius*]]`)`",
        "returnInfo": "Array of H3 cell token strings of the same resolution that represet a polygon or a multipolygon. If radius is set to a positive value, then the polygon will be enlarged such that all points within the given radius of the input polygon or multipolygon will be contained inside and the newly calculated polygon that will be converted to H3 cells. If polygon, resolution, radius is invalid, or the cell count exceeds the limit, the query will produce a null result.\n\n> [!NOTE]\n>\n> * Converting polygon to H3 cell tokens can be useful in matching coordinates to polygons that might include these coordinates and matching polygons to polygons.\n> * The maximum count of tokens per polygon is 61680.\n> * Polygon edges are straight lines.\n> * A polygon is represented by the cells whose centroids are inside the polygon. This means that the cells are not exactly the same as the polygon, but they get closer as the resolution increases. To make sure that every point in the polygon is covered by a cell, the polygon can be buffered. This also ensures that neighboring polygons that touch each other will have separate cells, so no cell will belong to more than one polygon.\n\nSeel also geo_polygon_to_s2cells().",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|\n| *resolution* | `int` | | Defines the requested cell resolution. Supported values are in the range [0, 15]. If unspecified, the default value `6` is used.|\n| *radius* | `real` | | Buffer radius in meters. If unspecified, the default value `0` is used.|",
        "example": "let polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-3.659,40.553],[-3.913,40.409],[-3.729,40.273],[-3.524,40.440],[-3.659,40.553]]]});\nprint h3_cells = geo_polygon_to_h3cells(polygon)\n\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-3.659,40.553],[-3.913,40.409],[-3.729,40.273],[-3.524,40.440],[-3.659,40.553]]]});\nprint h3_cells = geo_polygon_to_h3cells(polygon)\n| mv-expand cell = h3_cells to typeof(string) // extract cell to a separate row\n| project polygon_cell = geo_h3cell_to_polygon(cell) // convert each cell to a polygon\n| project individual_polygon_coordinates = pack_array(polygon_cell.coordinates)\n| summarize multipolygon_coordinates = make_list(individual_polygon_coordinates)\n| project multipolygon = bag_pack(\"type\",\"MultiPolygon\", \"coordinates\", multipolygon_coordinates)\n\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[1,1]]]});\nprint is_null = isnull(geo_polygon_to_h3cells(polygon))",
        "sourceLength": 5714
      }
    },
    {
      "name": "geo_polygon_to_s2cells",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_polygon_to_s2cells()",
        "description": "Calculates S2 cell tokens that cover a polygon or multipolygon on Earth. This function is a useful geospatial join tool.\n\nRead more about S2 cell hierarchy.",
        "syntax": "`geo_polygon_to_s2cells(`*polygon* [`,` *level*[`,` *radius*]]`)`",
        "returnInfo": "Array of S2 cell token strings that cover a polygon or a multipolygon. If radius is set to a positive value, then the covering will be, in addition to input shape, of all points within the radius of the input geometry. If polygon, level, radius is invalid, or the cell count exceeds the limit, the query will produce a null result.\n\n> [!NOTE]\n>\n> * Covering the polygon with S2 cell tokens can be useful in matching coordinates to polygons that might include these coordinates and matching polygons to polygons.\n> * The polygon covering tokens are of the same S2 cell level.\n> * The maximum count of tokens per polygon is 65536.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are Geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() in order to convert planar edges to geodesics.\n\n**Motivation for covering polygons with S2 cell tokens**\n\nWithout this function, here's one approach we could take in order to classify coordinates into polygons containing these coordinates.\n\n```kusto\nlet Polygons = \n    datatable(description:string, polygon:dynamic)\n    [  \n      \"New York\",  dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.85009765625,40.85744791303121],[-74.16046142578125,40.84290487729676],[-74.190673828125,40.59935608796518],[-73.83087158203125,40.61812224225511],[-73.85009765625,40.85744791303121]]]}),\n      \"Seattle\",   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-122.200927734375,47.68573021131587],[-122.4591064453125,47.68573021131587],[-122.4755859375,47.468949677672484],[-122.17620849609374,47.47266286861342],[-122.200927734375,47.68573021131587]]]}),\n      \"Las Vegas\", dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-114.9,36.36],[-115.4498291015625,36.33282808737917],[-115.4498291015625,35.84453450421662],[-114.949951171875,35.902399875143615],[-114.9,36.36]]]}),\n    ];\nlet Coordinates = \n    datatable(longitude:real, latitude:real)\n    [\n      real(-73.95),  real(40.75), // New York\n      real(-122.3),  real(47.6),  // Seattle\n      real(-115.18), real(36.16)  // Las Vegas\n    ];\nPolygons | extend dummy=1\n| join kind=inner (Coordinates | extend dummy=1) on dummy\n| where geo_point_in_polygon(longitude, latitude, polygon)\n| project longitude, latitude, description\n```\n\n**Output**\n\n|longitude|latitude|description|\n|:---|:---|:---|\n|-73.95|40.75|New York city|\n|-122.3|47.6|Seattle|\n|-115.18|36.16|Las Vegas|\n\nWhile this method works in some cases, it's inefficient. This method does a cross-join, meaning that it tries to match every polygon to every point. This process consumes a large amount of memory and compute resources.\nInstead, we would like to match every polygon to a point with a high probability of containment success, and filter out other points.\n\nThis match can be achieved by the following process:\n\n1. Converting polygons to S2 cells of level k,\n1. Converting points to the same S2 cells level k,\n1. Joining on S2 cells,\n1. Filtering by geo_point_in_polygon(). This phase can be omitted if some amount of false positives is ok. The maximum error will be the area of s2 cells at level k beyond the boundary of the polygon.\n\n**Choosing the S2 cell level**\n\n* Ideally we would want to cover every polygon with one or just a few unique cells such that no two polygons share the same cell.\n* If the polygons are close to each other, choose the S2 cell level such that its cell edge will be smaller (4, 8, 12 times smaller) than the edge of the average polygon.\n* If the polygons are far from each other, choose the S2 cell level such that its cell edge will be similar or bigger than the edge of the average polygon.\n* In practice, covering a polygon with more than 10,000 cells might not yield good performance.\n* Sample use cases:\n* S2 cell level 5 might prove to be good for covering countries/regions.\n* S2 cell level 16 can cover dense and relatively small Manhattan (New York) neighborhoods.\n* S2 cell level 11 can be used for covering suburbs of Australia.\n* Query run time and memory consumption might differ greatly because of different S2 cell level values.\n\n> [!WARNING]\n> Covering a large-area polygon with small-area cells can lead to a huge amount of covering cells. As a result, the query might return null.\n\n> [!NOTE]\n> Performance improvement suggestions:\n> * If possible, reduce coordinates table size before join, by grouping coordinates that are very close to each other by using geospatial clustering or by filtering out unnesessary coordinates due to nature of the data or business needs.\n> * If possible, reduce polygons count due to nature of the data or business needs. Filter out unnecessary polygons before join, scope to the area of interest or unify polygons.\n> * In case of very big polygons, reduce their size using geo_polygon_simplify().\n> * Changing S2 cell level may improve performance and memory consumption.\n> * Changing join kind and hint may improve performance and memory consumption.\n> * If a positive radius is set, you can try to improve performance by reverting to radius 0 on buffered shape using geo_polygon_buffer().",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|\n| *level* | `int` | | Defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.|\n| *radius* | `real` | | Buffer radius in meters. If unspecified, the default value `0` is used.|",
        "example": "let Polygons = \n    datatable(description:string, polygon:dynamic)\n    [\n        'Greenwich Village', dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]]}),\n        'Upper West Side',   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]]}),\n        'Upper East Side',   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]}),\n    ];\nlet Coordinates = \n    datatable(longitude:real, latitude:real)\n    [\n        real(-73.9741), 40.7914, // Upper West Side\n        real(-73.9950), 40.7340, // Greenwich Village\n        real(-73.9584), 40.7688, // Upper East Side\n    ];\nlet Level = 16;\nPolygons\n| extend covering = geo_polygon_to_s2cells(polygon, Level) // cover every polygon with s2 cell token array\n| mv-expand covering to typeof(string)                     // expand cells array such that every row will have one cell mapped to its polygon\n| join kind=inner hint.strategy=broadcast                  // assume that Polygons count is small (In some specific case)\n(\n    Coordinates\n    | extend covering = geo_point_to_s2cell(longitude, latitude, Level) // cover point with cell\n) on covering // join on the cell, this filters out rows of point and polygons where the point definitely does not belong to the polygon\n| where geo_point_in_polygon(longitude, latitude, polygon) // final filtering for exact result\n| project longitude, latitude, description\n\nlet Level = 6;\nlet polygons = materialize(\n    US_States\n    | project StateName = tostring(features.properties.NAME), polygon = features.geometry, id = new_guid());\nlet tmp = \n    polygons\n    | project id, covering = geo_polygon_to_s2cells(polygon, Level) \n    | mv-expand covering to typeof(string)\n    | join kind=inner hint.strategy=broadcast\n            (\n                StormEvents\n                | project lng = BeginLon, lat = BeginLat\n                | project lng, lat, covering = geo_point_to_s2cell(lng, lat, Level)\n            ) on covering\n    | project-away covering, covering1;\ntmp | lookup polygons on id\n| project-away id\n| where geo_point_in_polygon(lng, lat, polygon)\n| summarize StormEventsCountByState = count() by StateName\n\nlet intersection_level_hint = 7;\nlet area_of_interest = dynamic({\"type\": \"Polygon\",\"coordinates\": [[[-73.94966125488281,40.79698248639272],[-73.95841598510742,40.800426144169315],[-73.98124694824219,40.76806170936614],[-73.97283554077148,40.7645513650551],[-73.94966125488281,40.79698248639272]]]});\nlet area_of_interest_covering = geo_polygon_to_s2cells(area_of_interest, intersection_level_hint);\nEarthAtNight\n| project value = features.properties.DN, polygon = features.geometry\n| extend covering = geo_polygon_to_s2cells(polygon, intersection_level_hint)\n| mv-apply c = covering to typeof(string) on\n(\n    summarize is_intersects = take_anyif(1, array_index_of(area_of_interest_covering, c) != -1)\n)\n| where is_intersects == 1\n| count\n\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\nprint s2_cell_token_count = array_length(geo_polygon_to_s2cells(polygon, 5));\n\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\nprint geo_polygon_to_s2cells(polygon, 30);\n\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\nprint isnull(geo_polygon_to_s2cells(polygon, 30));",
        "sourceLength": 25876
      }
    },
    {
      "name": "geo_s2cell_neighbors",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_s2cell_neighbors()",
        "description": "Calculates S2 cell neighbors.\n\nRead more about S2 cell hierarchy.",
        "syntax": "`geo_s2cell_neighbors(`*s2cell*`)`",
        "returnInfo": "An array of S2 cell neighbors. If the S2 Cell is invalid, the query produces a null result.\n\n> [!NOTE]\n> S2 Cell edges are spherical geodesics.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *s2cell* | `string` |  *True* | S2 cell token value as it was calculated by geo_point_to_s2cell(). The S2 cell token maximum string length is 16 characters.|",
        "example": "print neighbors = geo_s2cell_neighbors('89c259')\n\nlet s2cell = '89c259';\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\n\nlet s2cell = '89c259';\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\n| mv-expand cells to typeof(string)\n| project polygons = geo_s2cell_to_polygon(cells)\n| summarize arr = make_list(polygons)\n| project geojson = bag_pack(\"type\", \"Feature\",\"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", bag_pack(\"name\", \"polygons\"))\n\nlet s2cell = '89c259';\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\n| mv-expand cells to typeof(string)\n| project polygons = geo_s2cell_to_polygon(cells)\n| summarize arr = make_list(polygons)\n| project polygon = geo_union_polygons_array(arr)\n\nprint invalid = isnull(geo_s2cell_neighbors('a'))",
        "sourceLength": 7858
      }
    },
    {
      "name": "geo_s2cell_to_central_point",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_s2cell_to_central_point()",
        "description": "Calculates the geospatial coordinates that represent the center of an S2 cell.\n\nRead more about S2 cell hierarchy.",
        "syntax": "`geo_s2cell_to_central_point(`*s2cell*`)`",
        "returnInfo": "The geospatial coordinate values in GeoJSON Format and of a dynamic data type. If the S2 cell token is invalid, the query will produce a null result.\n\n> [!NOTE]\n> The GeoJSON format specifies longitude first and latitude second.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *s2cell* | `string` |  *True* | S2 cell token value as it was calculated by geo_point_to_s2cell(). The S2 cell token maximum string length is 16 characters.|",
        "example": "print point = geo_s2cell_to_central_point(\"1234567\")\n| extend coordinates = point.coordinates\n| extend longitude = coordinates[0], latitude = coordinates[1]\n\nprint point = geo_s2cell_to_central_point(\"a\")",
        "sourceLength": 2909
      }
    },
    {
      "name": "geo_s2cell_to_polygon",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_s2cell_to_polygon()",
        "description": "Calculates the polygon that represents the S2 Cell rectangular area.\n\nRead more about S2 Cells.",
        "syntax": "`geo_s2cell_to_polygon(`*s2cell*`)`",
        "returnInfo": "Polygon in GeoJSON Format and of a dynamic data type. If the s2cell is invalid, the query produces a null result.\n\n> [!NOTE]\n> S2 Cell edges are spherical geodesics.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *s2cell* | `string` |  *True* | S2 cell token value as it was calculated by geo_point_to_s2cell(). The S2 cell token maximum string length is 16 characters.|",
        "example": "print s2cellPolygon = geo_s2cell_to_polygon(\"89c259\")\n\ndatatable(lng:real, lat:real)\n[\n    -73.956683, 40.807907,\n    -73.916869, 40.818314,\n    -73.989148, 40.743273,\n]\n| project s2_hash = geo_point_to_s2cell(lng, lat, 10)\n| project s2_hash_polygon = geo_s2cell_to_polygon(s2_hash)\n| summarize s2_hash_polygon_lst = make_list(s2_hash_polygon)\n| project bag_pack(\n    \"type\", \"Feature\",\n    \"geometry\", bag_pack(\"type\", \"GeometryCollection\", \"geometries\", s2_hash_polygon_lst),\n    \"properties\", bag_pack(\"name\", \"S2 Cell polygons collection\"))\n\nprint s2cellPolygon = geo_s2cell_to_polygon(\"a\")",
        "sourceLength": 4758
      }
    },
    {
      "name": "geo_simplify_polygons_array",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_simplify_polygons_array()",
        "description": "Simplifies polygons by replacing nearly straight chains of short edges with a single long edge on Earth.",
        "syntax": "`geo_simplify_polygons_array(`*polygons*`,` *tolerance*`)`",
        "returnInfo": "Simplified polygon or a multipolygon in the GeoJSON format and of a dynamic data type, with no two vertices with distance less than tolerance. If either the polygon or tolerance is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * If input is a single polygon, please see geo_polygon_simplify().\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\n> * High tolerance may cause small polygon to disappear.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygon* | `dynamic` |  *True* | Polygon or multipolygon in the GeoJSON format.|\n| *tolerance* | int, long, or real | | Defines minimum distance in meters between any two vertices. Supported values are in the range [0, ~7,800,000 meters]. If unspecified, the default value `10` is used.|",
        "example": "US_States\n| project polygon = features.geometry\n| summarize lst = make_list(polygon)\n| project polygons = geo_simplify_polygons_array(lst, 100)\n\ndatatable(polygons:dynamic)\n[\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\n]\n| summarize arr = make_list(polygons)\n| project is_invalid_polygon = isnull(geo_simplify_polygons_array(arr))\n\ndatatable(polygons:dynamic)\n[\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\n]\n| summarize arr = make_list(polygons)\n| project is_null = isnull(geo_simplify_polygons_array(arr, -1))\n\ndatatable(polygons:dynamic)\n[\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\n]\n| summarize arr = make_list(polygons)\n| project is_null = isnull(geo_simplify_polygons_array(arr, 10000))",
        "sourceLength": 8342
      }
    },
    {
      "name": "geo_union_lines_array",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_union_lines_array()",
        "description": "Calculates the union of lines or multilines on Earth.",
        "syntax": "`geo_union_lines_array(`*lineStrings*`)`",
        "returnInfo": "A line or a multiline in GeoJSON Format and of a dynamic data type. If any of the provided lines or multilines is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input line edges are straight cartesian lines, consider using geo_line_densify() in order to convert planar edges to geodesics.\n\n**LineString definition and constraints**\n\ndynamic({\"type\": \"LineString\",\"coordinates\": [[lng_1,lat_1], [lng_2,lat_2], ..., [lng_N,lat_N]]})\n\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [[line_1, line_2, ..., line_N]]})\n\n* LineString coordinates array must contain at least two entries.\n* Coordinates [longitude, latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *lineStrings* | `dynamic` |  *True* | An array of lines or multilines in the GeoJSON format.|",
        "example": "datatable(lines:dynamic)\n[\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}),\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311],[-73.95537436008453,40.804413741624515]]}),\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]})\n]\n| summarize lines_arr = make_list(lines)\n| project lines_union = geo_union_lines_array(lines_arr)\n\ndatatable(line1:dynamic, line2:dynamic)\n[\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}), dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311],[-73.95537436008453,40.804413741624515]]})\n]\n| project lines_arr = pack_array(line1, line2)\n| project lines_union = geo_union_lines_array(lines_arr)\n\ndatatable(lines:dynamic)\n[\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}),\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})\n]\n| summarize lines_arr = make_list(lines)\n| project invalid_union = isnull(geo_union_lines_array(lines_arr))",
        "sourceLength": 6195
      }
    },
    {
      "name": "geo_union_polygons_array",
      "category": "KQL Function",
      "documentation": {
        "title": "geo_union_polygons_array()",
        "description": "Calculates the union of polygons or multipolygons on Earth.",
        "syntax": "`geo_union_polygons_array(`*polygons*`)`",
        "returnInfo": "A polygon or a multipolygon in GeoJSON Format and of a dynamic data type. If any of the provided polygons or multipolygons is invalid, the query will produce a null result.\n\n> [!NOTE]\n>\n> * The geospatial coordinates are interpreted as represented by the WGS-84 coordinate reference system.\n> * The geodetic datum used for measurements on Earth is a sphere. Polygon edges are geodesics on the sphere.\n> * If input polygon edges are straight cartesian lines, consider using geo_polygon_densify() to convert planar edges to geodesics.\n\n**Polygon definition and constraints**\n\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N ]})\n\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1, ..., LinearRingHole_N], ..., [LinearRingShell, LinearRingHole_1, ..., LinearRingHole_M]]})\n\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\n* Coordinates [longitude, latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *polygons* | `dynamic` |  *True* | An array of polygons or multipolygons in the GeoJSON format.|",
        "example": "datatable(polygons:dynamic)\n[\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\n]\n| summarize polygons_arr = make_list(polygons)\n| project polygons_union = geo_union_polygons_array(polygons_arr)\n\ndatatable(polygon1:dynamic, polygon2:dynamic)\n[\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}), dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]})\n]\n| project polygons_arr = pack_array(polygon1, polygon2)\n| project polygons_union = geo_union_polygons_array(polygons_arr)\n\ndatatable(polygons:dynamic)\n[\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249]]]})\n]\n| summarize polygons_arr = make_list(polygons)\n| project invalid_union = isnull(geo_union_polygons_array(polygons_arr))",
        "sourceLength": 7416
      }
    },
    {
      "name": "gettype",
      "category": "KQL Function",
      "documentation": {
        "title": "gettype()",
        "description": "Returns the runtime type of its single argument.\n\nThe runtime type may be different than the nominal (static) type for expressions whose nominal type is `dynamic`; in such cases `gettype()` can be useful to reveal the type of the actual value (how the value is encoded in memory).",
        "syntax": "`gettype(`*value*`)`",
        "returnInfo": "A string representing the runtime type of *value*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | scalar |  *True* | The value for which to find the type. |",
        "example": "",
        "sourceLength": 2018
      }
    },
    {
      "name": "getyear",
      "category": "KQL Function",
      "documentation": {
        "title": "getyear()",
        "description": "Returns the year part of the `datetime` argument.",
        "syntax": "`getyear(`*date*`)`",
        "returnInfo": "The year that contains the given *date*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True* | The date for which to get the year. |",
        "example": "print year = getyear(datetime(2015-10-12))",
        "sourceLength": 1347
      }
    },
    {
      "name": "graph",
      "category": "KQL Function",
      "documentation": {
        "title": "graph function (preview)",
        "description": "> [!NOTE]\n> This feature is currently in public preview. Functionality and syntax are subject to change before General Availability.\n\nThe `graph` function is an intrinsic function that enables querying of a persisted graph entity, similar to the `cluster()`, `database()`, `external_table()`, and `table()` functions. It supports retrieving either the most recent snapshot of the graph, a specific snapshot, or creating a transient graph from the model.",
        "syntax": "`graph(` *GraphName* `)`\n\n`graph(` *GraphName* `,` *SnapshotName* `)`\n\n`graph(` *GraphName* `,` `snapshot=` *SnapshotName* `)`\n\n`graph(` *GraphName* `,` *Transient* `)`",
        "returnInfo": "The `graph` function returns a graph and must be followed by a graph operator. The function retrieves the specified graph model name, either as:\n\n- The latest snapshot (default or when `false` is specified)\n- A specific named snapshot\n- A transient graph from the model (when `true` is specified)",
        "parametersTable": "| Name           | Type     | Required           | Description                                                                 |\n|:----------------|:----------|:--------------------|:-----------------------------------------------------------------------------|\n| *GraphName*    | `string` | *True* | The name of the graph model to query. |\n| *SnapshotName* | `string` |                    | The name of a specific snapshot to retrieve. If not specified, the most recent snapshot is used. |\n| *Transient*    | `bool`   |                    | If `true`, creates a transient graph from the model (no snapshot is used). If `false`, uses the latest snapshot (same as omitting this parameter). |",
        "example": "",
        "sourceLength": 4534
      }
    },
    {
      "name": "has_any_index",
      "category": "KQL Function",
      "documentation": {
        "title": "has_any_index()",
        "description": "Searches the string for items specified in the array and returns the position in the array of the first item found in the string.",
        "syntax": "`has_any_index` `(`*source*`,` *values*`)`",
        "returnInfo": "Zero-based index position of the first item in *values* that is found in *source*.\nReturns -1 if none of the array items were found in the string or if *values* is empty.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source*| `string` |  *True*| The value to search.|\n| *values*| `dynamic` |  *True*| An array of scalar or literal expressions to look up. |",
        "example": "print\n idx1 = has_any_index(\"this is an example\", dynamic(['this', 'example']))  // first lookup found in input string\n , idx2 = has_any_index(\"this is an example\", dynamic(['not', 'example'])) // last lookup found in input string\n , idx3 = has_any_index(\"this is an example\", dynamic(['not', 'found'])) // no lookup found in input string\n , idx4 = has_any_index(\"Example number 2\", range(1, 3, 1)) // Lookup array of integers\n , idx5 = has_any_index(\"this is an example\", dynamic([]))  // Empty lookup array",
        "sourceLength": 2484
      }
    },
    {
      "name": "has_any_ipv4",
      "category": "KQL Function",
      "documentation": {
        "title": "has_any_ipv4()",
        "description": "Returns a value indicating whether one of specified IPv4 addresses appears in a text.\n\nIP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\n\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\n* \"05:04:54 127.0.0.1 GET /favicon.ico 404\"",
        "syntax": "`has_any_ipv4(`*source* `,` *ip_address* [`,` *ip_address_2*`,` ...] `)`",
        "returnInfo": "`true` if one of specified IP addresses is a valid IPv4 address, and it was found in *source*. Otherwise, the function returns `false`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source*| `string` |  *True* | The value to search.|\n| *ip_address*| string or dynamic |  *True* | An IP address, or an array of IP addresses, for which to search.|",
        "example": "print result=has_any_ipv4('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0.0.1', '127.0.0.2')\n\nprint result=has_any_ipv4('05:04:54 127.0.0.1 GET /favicon.ico 404', dynamic(['127.0.0.1', '127.0.0.2']))\n\nprint result=has_any_ipv4('05:04:54 127.0.0.256 GET /favicon.ico 404', dynamic([\"127.0.0.256\", \"192.168.1.1\"]))\n\nprint result=has_any_ipv4('05:04:54127.0.0.1 GET /favicon.ico 404', '127.0.0.1', '192.168.1.1') // false, improperly delimited IP address",
        "sourceLength": 4411
      }
    },
    {
      "name": "has_any_ipv4_prefix",
      "category": "KQL Function",
      "documentation": {
        "title": "has_any_ipv4_prefix()",
        "description": "Returns a boolean value indicating whether one of specified IPv4 address prefixes appears in a text.\n\nIP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\n\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\n* \"05:04:54 127.0.0.1 GET /favicon.ico 404\"",
        "syntax": "`has_any_ipv4_prefix(`*source* `,` *ip_address_prefix* [`,` *ip_address_prefix_2*`,` ...] `)`",
        "returnInfo": "`true` if the one of specified IP address prefixes is a valid IPv4 address prefix, and it was found in *source*. Otherwise, the function returns `false`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source*| `string` |  *True* | The value to search.|\n| *ip_address_prefix*| string or dynamic |  *True* | An IP address prefix, or an array of IP address prefixes, for which to search. A valid IP address prefix is either a complete IPv4 address, such as `192.168.1.11`, or its prefix ending with a dot, such as `192.`, `192.168.` or `192.168.1.`.|",
        "example": "print result=has_any_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0.', '192.168.') // true\n\nprint result=has_any_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', dynamic([\"127.0.\", \"192.168.\"]))\n\nprint result=has_any_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0')\n\nprint result=has_any_ipv4_prefix('05:04:54127.0.0.1 GET /favicon.ico 404', '127.0.', '192.')",
        "sourceLength": 4617
      }
    },
    {
      "name": "has_ipv4",
      "category": "KQL Function",
      "documentation": {
        "title": "has_ipv4()",
        "description": "Returns a value indicating whether a specified IPv4 address appears in a text.\n\nIP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\n\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\n* \"05:04:54 127.0.0.1 GET /favicon.ico 404\"",
        "syntax": "`has_ipv4(`*source* `,` *ip_address* `)`",
        "returnInfo": "`true` if the *ip_address* is a valid IPv4 address, and it was found in *source*. Otherwise, the function returns `false`.\n\n> [!TIP]\n>\n> * To search for many IPv4 addresses at once, use has_any_ipv4() function.\n> * To search for IPv4 addresses prefix, use has_ipv4_prefix() function.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | `string` |  *True* | The text to search.|\n| *ip_address* | `string` |  *True* | The value containing the IP address for which to search.|",
        "example": "print result=has_ipv4('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0.0.1')\n\nprint result=has_ipv4('05:04:54 127.0.0.256 GET /favicon.ico 404', '127.0.0.256')\n\nprint result=has_ipv4('05:04:54127.0.0.1 GET /favicon.ico 404', '127.0.0.1')",
        "sourceLength": 3560
      }
    },
    {
      "name": "has_ipv4_prefix",
      "category": "KQL Function",
      "documentation": {
        "title": "has_ipv4_prefix()",
        "description": "Returns a value indicating whether a specified IPv4 address prefix appears in a text.\n\nA valid IP address prefix is either a complete IPv4 address (`192.168.1.11`) or its prefix ending with a dot (`192.`, `192.168.` or `192.168.1.`).\n\nIP address entrances in a text must be properly delimited with nonalphanumeric characters. For example, properly delimited IP addresses are:\n\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\n* \"05:04:54 127.0.0.1 GET /favicon.ico 404\"",
        "syntax": "`has_ipv4_prefix(`*source* `,` *ip_address_prefix* `)`",
        "returnInfo": "`true` if the *ip_address_prefix* is a valid IPv4 address prefix, and it was found in *source*. Otherwise, the function returns `false`.\n\n> [!TIP]\n> To search for many IPv4 prefixes at once, use the has_any_ipv4_prefix() function.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source*| `string` |  *True*| The text to search.|\n| *ip_address_prefix*| `string` |  *True*| The IP address prefix for which to search.|",
        "example": "print result=has_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0.')\n\nprint result=has_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0')\n\nprint result=has_ipv4_prefix('05:04:54 127.0.0.256 GET /favicon.ico 404', '127.0.')\n\nprint result=has_ipv4_prefix('05:04:54127.0.0.1 GET /favicon.ico 404', '127.0.')",
        "sourceLength": 4205
      }
    },
    {
      "name": "hash",
      "category": "KQL Function",
      "documentation": {
        "title": "hash()",
        "description": "Returns a hash value for the input value.\n\n> [!NOTE]\n>\n> * The function calculates hashes using the xxhash64 algorithm, but this may change. It's recommended to only use this function within a single query.\n> * If you need to persist a combined hash, it's recommended to use hash_sha256(), hash_sha1(), or hash_md5() and combine the hashes with a bitwise operator. These functions are more complex to calculate than `hash()`.",
        "syntax": "`hash(`*source* [`,` *mod*]`)`",
        "returnInfo": "The hash value of *source*. If *mod* is specified, the function returns the hash value modulo the value of *mod*, meaning that the output of the function will be the remainder of the hash value divided by *mod*. The output will be a value between `0` and `mod - 1`, inclusive.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | scalar |  *True* | The value to be hashed.|\n| *mod* | `int` | | A modulo value to be applied to the hash result, so that the output value is between `0` and `mod - 1`. This parameter is useful for limiting the range of possible output values or for compressing the output of the hash function into a smaller range.|",
        "example": "",
        "sourceLength": 3841
      }
    },
    {
      "name": "hash_combine",
      "category": "KQL Function",
      "documentation": {
        "title": "hash_combine()",
        "description": "Combines hash values of two or more hashes.",
        "syntax": "`hash_combine(`*h1* `,` *h2* [`,` *h3* ...]`)`",
        "returnInfo": "The combined hash value of the given scalars.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *h1*, *h2*, ... *hN* | `long` |  *True* | The hash values to combine.|",
        "example": "print value1 = \"Hello\", value2 = \"World\"\n| extend h1 = hash(value1), h2=hash(value2)\n| extend combined = hash_combine(h1, h2)",
        "sourceLength": 1594
      }
    },
    {
      "name": "hash_many",
      "category": "KQL Function",
      "documentation": {
        "title": "hash_many()",
        "description": "Returns a combined hash value of multiple values.",
        "syntax": "`hash_many(`*s1* `,` *s2* [`,` *s3* ...]`)`",
        "returnInfo": "The hash() function is applied to each of the specified scalars. The resulting hashes are combined into a single hash and returned.\n\n> [!WARNING]\n> The function uses the *xxhash64* algorithm to calculate the hash for each scalar, but this may change. We therefore only recommend using this function within a single query where all invocations of the function will use the same algorithm.\n>\n> If you need to persist a combined hash, we recommend using hash_sha256(), hash_sha1(), or hash_md5() and combining the hashes into a single hash with a bitwise operator. Note that these functions are more complex to calculate than `hash()`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *s1*, *s2*, ..., *sN* | scalar |  *True* | The values to hash together.|",
        "example": "print value1 = \"Hello\", value2 = \"World\"\n| extend combined = hash_many(value1, value2)",
        "sourceLength": 2187
      }
    },
    {
      "name": "hash_md5",
      "category": "KQL Function",
      "documentation": {
        "title": "hash_md5()",
        "description": "Returns an MD5 hash value of the input.",
        "syntax": "`hash_md5(`*source*`)`",
        "returnInfo": "The MD5 hash value of the given scalar, encoded as a hex string (a string\nof characters, each two of which represent a single Hex number between 0\nand 255).\n\n> [!WARNING]\n> The algorithm used by this function (MD5) is guaranteed\n> to not be modified in the future, but is very complex to calculate. Users that\n> need a \"lightweight\" hash function for the duration of a single query are advised\n> to use the function hash() instead.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | scalar |  *True* | The value to be hashed.|",
        "example": "print \nh1=hash_md5(\"World\"),\nh2=hash_md5(datetime(2020-01-01))\n\nStormEvents\n| summarize StormCount = count() by State, StateHash=hash_md5(State)\n| top 5 by StormCount",
        "sourceLength": 2646
      }
    },
    {
      "name": "hash_sha1",
      "category": "KQL Function",
      "documentation": {
        "title": "hash_sha1()",
        "description": "Returns a sha1 hash value of the source input.",
        "syntax": "`hash_sha1(`*source*`)`",
        "returnInfo": "The sha1 hash value of the given scalar, encoded as a hex string (a string\nof characters, each two of which represent a single Hex number between 0\nand 255).\n\n> [!WARNING]\n> The algorithm used by this function (SHA1) is guaranteed\n> to not be modified in the future, but is very complex to calculate. If you\n> need a \"lightweight\" hash function for the duration of a single query, consider using hash().",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | scalar |  *True* | The value to be hashed.|",
        "example": "print \n    h1=hash_sha1(\"World\"),\n    h2=hash_sha1(datetime(2020-01-01))\n\nStormEvents \n| summarize StormCount = count() by State, StateHash=hash_sha1(State)\n| top 5 by StormCount desc",
        "sourceLength": 2730
      }
    },
    {
      "name": "hash_sha256",
      "category": "KQL Function",
      "documentation": {
        "title": "hash_sha256()",
        "description": "Returns a sha256 hash value of the source input.",
        "syntax": "`hash_sha256(`*source*`)`",
        "returnInfo": "The sha256 hash value of the given scalar, encoded as a hex string (a string\nof characters, each two of which represent a single Hex number between 0\nand 255).\n\n> [!WARNING]\n> The algorithm used by this function (SHA256) is guaranteed\n> to not be modified in the future, but is very complex to calculate. Users that\n> need a \"lightweight\" hash function for the duration of a single query are advised\n> to use the function hash() instead.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | scalar |  *True* | The value to be hashed.|",
        "example": "print \n    h1=hash_sha256(\"World\"),\n    h2=hash_sha256(datetime(2020-01-01))\n\nStormEvents \n| summarize StormCount = count() by State, StateHash=hash_sha256(State)\n| top 5 by StormCount desc",
        "sourceLength": 2954
      }
    },
    {
      "name": "hash_xxhash64",
      "category": "KQL Function",
      "documentation": {
        "title": "hash_xxhash64()",
        "description": "Returns an xxhash64 value for the input value.",
        "syntax": "`hash_xxhash64(`*source* [`,` *mod*]`)`",
        "returnInfo": "The hash value of *source*. If *mod* is specified, the function returns the hash value modulo the value of *mod*, meaning that the output of the function will be the remainder of the hash value divided by *mod*. The output will be a value between `0` and `mod - 1`, inclusive.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | scalar |  *True* | The value to be hashed.|\n| *mod* | `int` | | A modulo value to be applied to the hash result, so that the output value is between `0` and `mod - 1`. This parameter is useful for limiting the range of possible output values or for compressing the output of the hash function into a smaller range.|",
        "example": "",
        "sourceLength": 2631
      }
    },
    {
      "name": "hll_merge",
      "category": "KQL Function",
      "documentation": {
        "title": "hll_merge()",
        "description": "Merges HLL results. This is the scalar version of the aggregate version `hll_merge()`.\n\nRead about the underlying algorithm (*H*yper*L*og*L*og) and estimation accuracy.\n\n> [!IMPORTANT]\n> The results of hll(), hll_if(), and hll_merge() can be stored and later retrieved. For example, you might want to create a daily unique users summary, which can then be used to calculate weekly counts.\n> However, the precise binary representation of these results can change over time. There's no guarantee that these functions produce identical results for identical inputs, and therefore we don't advise relying on them.",
        "syntax": "`hll_merge(` *hll*`,` *hll2*`,` [ *hll3*`,` ... ]`)`",
        "returnInfo": "Returns one HLL value. The value is the result of merging the columns *hll*, *hll2*, ... *hllN*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*hll*, *hll2*, ... | `string` | *True*|The column names containing HLL values to merge. The function expects between 2-64 arguments.|",
        "example": "range x from 1 to 10 step 1 \n| extend y = x + 10\n| summarize hll_x = hll(x), hll_y = hll(y)\n| project merged = hll_merge(hll_x, hll_y)\n| project dcount_hll(merged)",
        "sourceLength": 2729
      }
    },
    {
      "name": "iff",
      "category": "KQL Function",
      "documentation": {
        "title": "iff()",
        "description": "Returns the *:::no-loc text=\"then\":::* value when the *:::no-loc text=\"if\":::* condition evaluates to `true`, otherwise it returns the *:::no-loc text=\"else\":::* value.\n\n> The `iff()` and `iif()` functions are equivalent.",
        "syntax": "`iff(`*:::no-loc text=\"if\":::*`,` *:::no-loc text=\"then\":::*`,` *:::no-loc text=\"else\":::*`)`",
        "returnInfo": "This function returns the  *:::no-loc text=\"then\":::* value when the *:::no-loc text=\"if\":::* condition evaluates to `true`, otherwise it returns the *:::no-loc text=\"else\":::* value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*:::no-loc text=\"if\":::*| `string` |  *True* | An expression that evaluates to a boolean value.|\n|*:::no-loc text=\"then\":::*| scalar |  *True* | An expression that returns its value when the *:::no-loc text=\"if\":::* condition evaluates to `true`.|\n|*:::no-loc text=\"else\":::*| scalar |  *True* | An expression that returns its value when the *:::no-loc text=\"if\":::* condition evaluates to `false`.|",
        "example": "",
        "sourceLength": 4241
      }
    },
    {
      "name": "indexof",
      "category": "KQL Function",
      "documentation": {
        "title": "indexof()",
        "description": "Reports the zero-based index of the first occurrence of a specified string within the input string. The `indexof()` function is case-sensitive. To perform a case-insensitive search, consider using `tolower()` or `toupper()` on both inputs.\n\nFor more information, see `indexof_regex()`.",
        "syntax": "`indexof(`*string*`,`*match*`[,`*start*`[,`*length*`[,`*occurrence*`]]])`",
        "returnInfo": "The zero-based index position of *match*.\n\n* Returns -1 if *match* isn't found in *string*.\n* Returns `null` if:\n  * *start* is less than 0.\n  * *occurrence* is less than 0.\n  * *length* is less than -1.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*string*| `string` |  *True* | The source string to search.|  \n|*match*| `string` |  *True* | The string for which to search.|\n|*start*| `int` | | The search start position. A negative value will offset the starting search position from the end of the *string* by this many steps: `abs(`*start*`)`. |\n|*length*| `int` | | The number of character positions to examine. A value of -1 means unlimited length.|\n|*occurrence*| `int` | | The number of the occurrence. The default is 1.|\n\n> [!NOTE]\n> If *string* or *match* isn't of type `string`, the function forcibly casts their value to `string`.",
        "example": "print\n idx1 = indexof(\"abcdefg\",\"cde\")    // lookup found in input string\n , idx2 = indexof(\"abcdefg\",\"cde\",1,4) // lookup found in researched range \n , idx3 = indexof(\"abcdefg\",\"cde\",1,2) // search starts from index 1, but stops after 2 chars, so full lookup can't be found\n , idx4 = indexof(\"abcdefg\",\"cde\",3,4) // search starts after occurrence of lookup\n , idx5 = indexof(\"abcdefg\",\"cde\",-5)  // negative start index\n , idx6 = indexof(1234567,5,1,4)       // two first parameters were forcibly casted to strings \"12345\" and \"5\"\n , idx7 = indexof(\"abcdefg\",\"cde\",2,-1)  // lookup found in input string\n , idx8 = indexof(\"abcdefgabcdefg\", \"cde\", 1, 10, 2)   // lookup found in input range\n , idx9 = indexof(\"abcdefgabcdefg\", \"cde\", 1, -1, 3)   // the third occurrence of lookup is not in researched range",
        "sourceLength": 3572
      }
    },
    {
      "name": "indexof_regex",
      "category": "KQL Function",
      "documentation": {
        "title": "indexof_regex()",
        "description": "Returns the zero-based index of the first occurrence of a specified lookup regular expression within the input string.\n\nSee `indexof()`.",
        "syntax": "`indexof_regex(`*string*`,`*match*`[,`*start*`[,`*length*`[,`*occurrence*`]]])`",
        "returnInfo": "The zero-based index position of *match*.\n\n* Returns -1 if *match* isn't found in *string*.\n* Returns `null` if:\n  * *start* is less than 0.\n  * *occurrence* is less than 0.\n  * *length* is less than -1.\n\n> [!NOTE]\n>\n> * Overlapping matches lookup aren't supported.\n> * Regular expression strings may contain characters that require either escaping or using @'' string-literals.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*string*| `string` |  *True* | The source string to search.|  \n|*match*| `string` |  *True* | The regular expression lookup string.|\n|*start*| `int` | | The search start position. A negative value will offset the starting search position from the end of the *string* by this many steps: `abs(`*start*`)`. |\n|*length*| `int` | | The number of character positions to examine. A value of -1 means unlimited length.|\n|*occurrence*| `int` | | The number of the occurrence. The default is 1.|",
        "example": "print\n    idx1 = indexof_regex(\"abcabc\", @\"a.c\"), // lookup found in input string\n    idx2 = indexof_regex(\"abcabcdefg\", @\"a.c\", 0, 9, 2),  // lookup found in input string\n    idx3 = indexof_regex(\"abcabc\", @\"a.c\", 1, -1, 2),  // there's no second occurrence in the search range\n    idx4 = indexof_regex(\"ababaa\", @\"a.a\", 0, -1, 2), // Matches don't overlap so full lookup can't be found \n    idx5 = indexof_regex(\"abcabc\", @\"a|ab\", -1)  // invalid start argument",
        "sourceLength": 3016
      }
    },
    {
      "name": "ingestion_time",
      "category": "KQL Function",
      "documentation": {
        "title": "ingestion_time()",
        "description": "::: moniker range=\"microsoft-fabric  || azure-data-explorer\"\n\nReturns the approximate datetime in UTC format indicating when the current record was ingested. \n\nThis function must be used in the context of a table or a materialized view. Otherwise, this function produces null values.\n\nIf IngestionTime policy was not enabled when the data was ingested, the function returns null values.\n\n::: moniker-end\n\n::: moniker range=\"azure-monitor || microsoft-sentinel\"\n\nRetrieves the `datetime` when the record was ingested and ready for query.\n\n::: moniker-end\n\n> [!NOTE]\n> The value returned by this function is only approximate, as the ingestion process may take several minutes to complete and multiple ingestion activities may take place concurrently. To process all records of a table with exactly-once guarantees, use database cursors.\n\n> [!TIP]\n> The ingestion_time() function returns values according to the service clock as measured when ingestion was completed. As a result, this value cannot be used to \"order\" ingestion operations, as two operations that overlap in time might have any ordering of these values. If ordering records is important for application semantics, one should ensure that the table has a timestamp column as measured by the source of the data instead of relying on the ingestion_time() value.",
        "syntax": "`ingestion_time()`",
        "returnInfo": "A `datetime` value specifying the approximate time of ingestion into a table.",
        "parametersTable": "",
        "example": "T\n| extend ingestionTime = ingestion_time() | top 10 by ingestionTime",
        "sourceLength": 2537
      }
    },
    {
      "name": "ipv4_compare",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv4_compare()",
        "description": "Compares two IPv4 strings. The two IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.",
        "syntax": "`ipv4_compare(`*Expr1*`,`*Expr2*`[ ,`*PrefixMask*`])`",
        "returnInfo": "* `0`: If the long representation of the first IPv4 string argument is equal to the second IPv4 string argument\n* `1`: If the long representation of the first IPv4 string argument is greater than the second IPv4 string argument\n* `-1`: If the long representation of the first IPv4 string argument is less than the second IPv4 string argument\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*Expr1*, *Expr2*| `string` |  *True* | A string expression representing an IPv4 address. IPv4 strings can be masked using IP-prefix notation.\n|*PrefixMask*| `int` | | An integer from 0 to 32 representing the number of most-significant bits that are taken into account.",
        "example": "",
        "sourceLength": 4210
      }
    },
    {
      "name": "ipv4_is_in_any_range",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv4_is_in_any_range()",
        "description": "Checks whether IPv4 string address is in any of the specified IPv4 address ranges.",
        "syntax": "`ipv4_is_in_any_range(`*Ipv4Address* `,` *Ipv4Range* [ `,` *Ipv4Range* ...] `)`\n\n`ipv4_is_in_any_range(`*Ipv4Address* `,` *Ipv4Ranges* `)`",
        "returnInfo": "* `true`: If the IPv4 address is in the range of any of the specified IPv4 networks.\n* `false`: Otherwise.\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *Ipv4Address*| `string` |  *True* | An expression representing an IPv4 address.|\n| *Ipv4Range*| `string` |  *True* | An IPv4 range or list of IPv4 ranges written with IP-prefix notation.|\n| *Ipv4Ranges*| `dynamic` |  *True* | A dynamic array containing IPv4 ranges written with IP-prefix notation.|\n\n> [!NOTE]\n> Either one or more *IPv4Range* strings or an *IPv4Ranges* dynamic array is required.",
        "example": "",
        "sourceLength": 3917
      }
    },
    {
      "name": "ipv4_is_in_range",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv4_is_in_range()",
        "description": "Checks if IPv4 string address is in IPv4-prefix notation range.",
        "syntax": "`ipv4_is_in_range(`*Ipv4Address*`,`*Ipv4Range*`)`",
        "returnInfo": "* `true`: If the long representation of the first IPv4 string argument is in range of the second IPv4 string argument.\n* `false`: Otherwise.\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *Ipv4Address*| `string` |  *True* | An expression representing an IPv4 address.|\n| *Ipv4Range*| `string` |  *True* | An IPv4 range or list of IPv4 ranges written with IP-prefix notation.|",
        "example": "datatable(ip_address:string, ip_range:string)\n[\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\n]\n| extend result = ipv4_is_in_range(ip_address, ip_range)",
        "sourceLength": 2424
      }
    },
    {
      "name": "ipv4_is_match",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv4_is_match()",
        "description": "Matches two IPv4 strings. The two IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `prefix` argument.",
        "syntax": "`ipv4_is_match(`*ip1*`,`*ip2*`[ ,`*prefix*`])`",
        "returnInfo": "* `true`: If the long representation of the first IPv4 string argument is equal to the second IPv4 string argument.\n* `false`: Otherwise.\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\n\n>[!NOTE]\n> When matching against an IPv4 address that's not a range, we recommend using the equals operator (`==`), for better performance.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip1*, *ip2*| `string` |  *True* | An expression representing an IPv4 address. IPv4 strings can be masked using IP-prefix notation.|\n| *prefix*| `int` | | An integer from 0 to 32 representing the number of most-significant bits that are taken into account.|",
        "example": "",
        "sourceLength": 4839
      }
    },
    {
      "name": "ipv4_is_private",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv4_is_private()",
        "description": "Checks if the IPv4 string address belongs to a set of private network IPs.\n\nPrivate network addresses were originally defined to help delay IPv4 address exhaustion. IP packets originating from or addressed to a private IP address can't be routed through the public internet.",
        "syntax": "`ipv4_is_private(`*ip*`)`",
        "returnInfo": "* `true`: If the IPv4 address belongs to any of the private network ranges.\n* `false`: Otherwise.\n* `null`: If parsing of the input as IPv4 address string wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*ip*| `string` |  *True* | An expression representing an IPv4 address. IPv4 strings can be masked using IP-prefix notation.|",
        "example": "datatable(ip_string:string)\n[\n '10.1.2.3',\n '192.168.1.1/24',\n '127.0.0.1',\n]\n| extend result = ipv4_is_private(ip_string)",
        "sourceLength": 3074
      }
    },
    {
      "name": "ipv4_netmask_suffix",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv4_netmask_suffix()",
        "description": "Returns the value of the IPv4 netmask suffix from an IPv4 string address.",
        "syntax": "`ipv4_netmask_suffix(`*ip*`)`",
        "returnInfo": "* The value of the netmask suffix the IPv4 address. If the suffix isn't present in the input, a value of `32` (full netmask suffix) is returned.\n* `null`: If parsing the input as an IPv4 address string wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*ip*| `string` |  *True*| An expression representing an IPv4 address. IPv4 strings can be masked using IP-prefix notation.|",
        "example": "datatable(ip_string:string)\n[\n '10.1.2.3',\n '192.168.1.1/24',\n '127.0.0.1/16',\n]\n| extend cidr_suffix = ipv4_netmask_suffix(ip_string)",
        "sourceLength": 2183
      }
    },
    {
      "name": "ipv4_range_to_cidr_list",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv4_range_to_cidr_list()",
        "description": "Converts a IPv4 address range denoted by starting and ending IPv4 addresses to a list of IPv4 ranges in CIDR notation.",
        "syntax": "`ipv4_range_to_cidr_list(`*StartAddress* `,` *EndAddress* `)`",
        "returnInfo": "A dynamic array object containing the list of ranges in CIDR notation.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *StartAddress*| `string` |  *True* | An expression representing a starting IPv4 address of the range.|\n| *EndAddress*| `string` |  *True* | An expression representing an ending IPv4 address of the range.|",
        "example": "print start_IP=\"1.1.128.0\", end_IP=\"1.1.140.255\"\n | project ipv4_range_list = ipv4_range_to_cidr_list(start_IP, end_IP)",
        "sourceLength": 1746
      }
    },
    {
      "name": "ipv6_compare",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv6_compare()",
        "description": "Compares two IPv6 or IPv4 network address strings. The two IPv6 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `prefix` argument.\n\n>[!Note]\n> The function can accept and compare arguments representing both IPv6 and IPv4 network addresses. However, if the caller knows that arguments are in IPv4 format, use ipv4_is_compare() function. This function will result in better runtime performance.",
        "syntax": "`ipv6_compare(`*ip1*`,`*ip2*`[ ,`*prefix*`])`",
        "returnInfo": "* `0`: If the long representation of the first IPv6 string argument is equal to the second IPv6 string argument.\n* `1`: If the long representation of the first IPv6 string argument is greater than the second IPv6 string argument.\n* `-1`: If the long representation of the first IPv6 string argument is less than the second IPv6 string argument.\n* `null`: If conversion for one of the two IPv6 strings wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip1*, *ip2*| `string` |  *True* | An expression representing an IPv6 or IPv4 address. IPv6 and IPv4 strings can be masked using IP-prefix notation.|\n| *prefix*| `int` | | An integer from 0 to 128 representing the number of most significant bits that are taken into account.|",
        "example": "",
        "sourceLength": 7135
      }
    },
    {
      "name": "ipv6_is_in_any_range",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv6_is_in_any_range()",
        "description": "Checks whether an IPv6 string address is in any of the specified IPv6 address ranges.",
        "syntax": "`ipv6_is_in_any_range(`*Ipv6Address* `,` *Ipv6Range* [ `,` *Ipv6Range* ...] `)`\n\n`ipv6_is_in_any_range(`*Ipv6Address* `,` *Ipv6Ranges* `)`",
        "returnInfo": "* `true`: If the IPv6 address is in the range of any of the specified IPv6 networks.\n* `false`: Otherwise.\n* `null`: If conversion for one of the two IPv6 strings wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *Ipv6Address* | `string` |  *True* | An expression representing an IPv6 address.|\n| *Ipv6Range* | `string` |  *True* | An expression representing an IPv6 range using IP-prefix notation.|\n| *Ipv6Ranges* | `dynamic` |  *True* | An array containing IPv6 ranges using IP-prefix notation.|\n\n> [!NOTE]\n> Either one or more *IPv6Range* strings or an *IPv6Ranges* dynamic array is required.",
        "example": "let LocalNetworks=dynamic([\n    \"a5e:f127:8a9d:146d:e102:b5d3:c755:f6cd/112\",\n    \"0:0:0:0:0:ffff:c0a8:ac/60\"\n]);\nlet IPs=datatable(IP:string) [\n    \"a5e:f127:8a9d:146d:e102:b5d3:c755:abcd\",\n    \"a5e:f127:8a9d:146d:e102:b5d3:c755:abce\",\n    \"a5e:f127:8a9d:146d:e102:b5d3:c755:abcf\",\n    \"a5e:f127:8a9d:146d:e102:b5d3:c756:abd1\",\n];\nIPs\n| extend IsLocal=ipv6_is_in_any_range(IP, LocalNetworks)",
        "sourceLength": 3054
      }
    },
    {
      "name": "ipv6_is_in_range",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv6_is_in_range()",
        "description": "Checks if an IPv6 string address is in the IPv6-prefix notation range.",
        "syntax": "`ipv6_is_in_range(`*Ipv6Address*`,`*Ipv6Range*`)`",
        "returnInfo": "* `true`: If the long representation of the first IPv6 string argument is in range of the second IPv6 string argument.\n* `false`: Otherwise.\n* `null`: If conversion for one of the two IPv6 strings wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *Ipv6Address* | `string` |  *True* | An expression representing an IPv6 address.|\n| *Ipv6Range*| `string` |  *True* | An expression representing an IPv6 range using IP-prefix notation.|",
        "example": "datatable(ip_address:string, ip_range:string)\n[\n 'a5e:f127:8a9d:146d:e102:b5d3:c755:abcd',    'a5e:f127:8a9d:146d:e102:b5d3:c755:0000/112',\n 'a5e:f127:8a9d:146d:e102:b5d3:c755:abcd',    'a5e:f127:8a9d:146d:e102:b5d3:c755:abcd',\n 'a5e:f127:8a9d:146d:e102:b5d3:c755:abcd',    '0:0:0:0:0:ffff:c0a8:ac/60',\n]\n| extend result = ipv6_is_in_range(ip_address, ip_range)",
        "sourceLength": 2634
      }
    },
    {
      "name": "ipv6_is_match",
      "category": "KQL Function",
      "documentation": {
        "title": "ipv6_is_match()",
        "description": "Matches two IPv6 or IPv4 network address strings. The two IPv6/IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `prefix` argument.\n\n> [!NOTE]\n> The function can accept and compare arguments representing both IPv6 and IPv4 network addresses. If the caller knows that arguments are in IPv4 format, use the ipv4_is_match() function. This function will result in better runtime performance.",
        "syntax": "`ipv6_is_match(`*ip1*`,`*ip2*`[ ,`*prefix*`])`",
        "returnInfo": "* `true`: If the long representation of the first IPv6/IPv4 string argument is equal to the second IPv6/IPv4 string argument.\n* `false`: Otherwise.\n* `null`: If conversion for one of the two IPv6/IPv4 strings wasn't successful.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip1*, *ip2*| `string` |  *True* | An expression representing an IPv6 or IPv4 address. IPv6 and IPv4 strings can be masked using IP-prefix notation.|\n| *prefix*| `int` | | An integer from 0 to 128 representing the number of most-significant bits that are taken into account.|",
        "example": "",
        "sourceLength": 6959
      }
    },
    {
      "name": "isempty",
      "category": "KQL Function",
      "documentation": {
        "title": "isempty()",
        "description": "Returns `true` if the argument is an empty string or is null.",
        "syntax": "`isempty(`*value*`)`",
        "returnInfo": "A boolean value indicating whether *value* is an empty string or is null.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n|*value*| `string` | *True*| The value to check if empty or null.|",
        "example": "",
        "sourceLength": 1097
      }
    },
    {
      "name": "isfinite",
      "category": "KQL Function",
      "documentation": {
        "title": "isfinite()",
        "description": "Returns whether the input is a finite value, meaning it's not infinite or NaN.",
        "syntax": "`isfinite(`*number*`)`",
        "returnInfo": "`true` if x is finite and `false` otherwise.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*number*| `real` | *True*| The value to check if finite.|",
        "example": "range x from -1 to 1 step 1\n| extend y = 0.0\n| extend div = 1.0*x/y\n| extend isfinite=isfinite(div)",
        "sourceLength": 1714
      }
    },
    {
      "name": "isinf",
      "category": "KQL Function",
      "documentation": {
        "title": "isinf()",
        "description": "Returns whether the input is an infinite (positive or negative) value.",
        "syntax": "`isinf(`*number*`)`",
        "returnInfo": "`true` if x is a positive or negative infinite and `false` otherwise.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n|*number*| `real` | *True*| The value to check if infinite.|",
        "example": "range x from -1 to 1 step 1\n| extend y = 0.0\n| extend div = 1.0*x/y\n| extend isinf=isinf(div)",
        "sourceLength": 1735
      }
    },
    {
      "name": "isnan",
      "category": "KQL Function",
      "documentation": {
        "title": "isnan()",
        "description": "Returns whether the input is a Not-a-Number (NaN) value.",
        "syntax": "`isnan(`*number*`)`",
        "returnInfo": "`true` if x is NaN and `false` otherwise.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n|*number*|scalar| *True*| The value to check if NaN.|",
        "example": "range x from -1 to 1 step 1\n| extend y = (-1*x) \n| extend div = 1.0*x/y\n| extend isnan=isnan(div)",
        "sourceLength": 1696
      }
    },
    {
      "name": "isnotempty",
      "category": "KQL Function",
      "documentation": {
        "title": "isnotempty()",
        "description": "Returns `true` if the argument isn't an empty string, and it isn't null.\n\n> **Deprecated aliases:** notempty()",
        "syntax": "`isnotempty(`*value*`)`",
        "returnInfo": "`true` if *value* isn't null and `false` otherwise.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*value*|scalar| *True*| The value to check if not empty or null.|",
        "example": "StormEvents\n| where isnotempty(BeginLat) and isnotempty(BeginLon)",
        "sourceLength": 1448
      }
    },
    {
      "name": "isnotnull",
      "category": "KQL Function",
      "documentation": {
        "title": "isnotnull()",
        "description": "Returns `true` if the argument isn't null.\n\n> **Deprecated aliases:** notnull()",
        "syntax": "`isnotnull(`*value*`)`",
        "returnInfo": "`true` if *value* isn't null and `false` otherwise.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*value*|scalar| *True*| The value to check if not null.|",
        "example": "StormEvents\n| where isnotnull(BeginLat) and isnotnull(BeginLon)",
        "sourceLength": 1387
      }
    },
    {
      "name": "isnull",
      "category": "KQL Function",
      "documentation": {
        "title": "isnull()",
        "description": "Evaluates an expression and returns a Boolean result indicating whether the value is null.\n\n> [!NOTE]\n> String values can't be null. Use isempty to determine if a value of type `string` is empty or not.",
        "syntax": "`isnull(`*Expr*`)`",
        "returnInfo": "Returns `true` if the value is null and `false` otherwise. Empty strings, arrays, property bags, and objects always return `false`.\n\nThe following table lists return values for different expressions (*x*):\n\n|x                |`isnull(x)`|\n|:-----------------|:-----------|\n|`\"\"`             |`false`    |\n|`\"x\"`            |`false`    |\n|`parse_json(\"\")`  |`true`     |\n|`parse_json(\"[]\")`|`false`    |\n|`parse_json(\"{}\")`|`false`    |",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*Expr*|scalar| *True*| The expression to evaluate whether the value is null. The expression can be any scalar value other than strings, arrays, or objects that always return `false`. For more information, see The dynamic data type.|",
        "example": "StormEvents\n| where isnull(BeginLat) and isnull(BeginLon)\n| project StartTime, EndTime, EpisodeId, EventId, State, EventType, BeginLat, BeginLon",
        "sourceLength": 3583
      }
    },
    {
      "name": "isutf8",
      "category": "KQL Function",
      "documentation": {
        "title": "isutf8()",
        "description": "Returns `true` if the argument is a valid UTF8 string.",
        "syntax": "`isutf8(`*value*`)`",
        "returnInfo": "A boolean value indicating whether *value* is a valid UTF8 string.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n|*value*| `string` | *True*| The value to check if a valid UTF8 string.|",
        "example": "print result=isutf8(\"some string\")",
        "sourceLength": 1292
      }
    },
    {
      "name": "jaccard_index",
      "category": "KQL Function",
      "documentation": {
        "title": "jaccard_index()",
        "description": "Calculates the Jaccard index of two input sets.",
        "syntax": "`jaccard_index`(*set1*, *set2*)",
        "returnInfo": "The Jaccard index of the two input sets. The Jaccard index formula is |*set1* ∩ *set2*| / |*set1* ∪ *set2*|.",
        "parametersTable": "| Name | Type | Required | Description |\n| -- | -- | -- | -- |\n| *set1*| `dynamic` |  *True* | The array representing the first set for the calculation.|\n| *set2*| `dynamic` |  *True* | The array representing the second set for the calculation.|\n\n> [!NOTE]\n> Duplicate values in the input arrays are ignored.",
        "example": "print set1=dynamic([1,2,3]), set2=dynamic([1,2,3,4])\n| extend jaccard=jaccard_index(set1, set2)",
        "sourceLength": 1828
      }
    },
    {
      "name": "log",
      "category": "KQL Function",
      "documentation": {
        "title": "log()",
        "description": "The natural logarithm is the base-e logarithm: the inverse of the natural exponential function (exp).",
        "syntax": "`log(`*number*`)`",
        "returnInfo": "* `log()` returns the natural logarithm of the input.\n* `null` if the argument is negative or null or can't be converted to a `real` value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*number*| `real` |  *True* | The number for which to calculate the logarithm.|",
        "example": "print result=log(5)",
        "sourceLength": 1559
      }
    },
    {
      "name": "log10",
      "category": "KQL Function",
      "documentation": {
        "title": "log10()",
        "description": "`log10()` returns the common (base-10) logarithm of the input.",
        "syntax": "`log10(`*number*`)`",
        "returnInfo": "* The common logarithm is the base-10 logarithm: the inverse of the exponential function (exp) with base 10.\n* `null` if the argument is negative or null or can't be converted to a `real` value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*number*| `real` |  *True* | The number for which to calculate the base-10 logarithm.|",
        "example": "print result=log10(5)",
        "sourceLength": 1599
      }
    },
    {
      "name": "log2",
      "category": "KQL Function",
      "documentation": {
        "title": "log2()",
        "description": "The logarithm is the base-2 logarithm: the inverse of the exponential function (exp) with base 2.",
        "syntax": "`log2(`*number*`)`",
        "returnInfo": "* The logarithm is the base-2 logarithm: the inverse of the exponential function (exp) with base 2.\n* `null` if the argument is negative or null or can't be converted to a `real` value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*number*| `real` |  *True* | The number for which to calculate the base-2 logarithm.|",
        "example": "print result=log2(5)",
        "sourceLength": 1623
      }
    },
    {
      "name": "loggamma",
      "category": "KQL Function",
      "documentation": {
        "title": "loggamma()",
        "description": "Computes log of the absolute value of the gamma function",
        "syntax": "`loggamma(`*number*`)`",
        "returnInfo": "* Returns the natural logarithm of the absolute value of the gamma function of x.\n* For computing gamma function, see gamma().",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*number*| `real` |  *True* | The number for which to calculate the gamma.|",
        "example": "print result=loggamma(5)",
        "sourceLength": 1468
      }
    },
    {
      "name": "make_datetime",
      "category": "KQL Function",
      "documentation": {
        "title": "make_datetime()",
        "description": "Creates a datetime scalar value between the specified date and time.",
        "syntax": "`make_datetime(`*year*, *month*, *day*`)`\n\n`make_datetime(`*year*, *month*, *day*, *hour*, *minute*`)`\n\n`make_datetime(`*year*, *month*, *day*, *hour*, *minute*, *second*`)`",
        "returnInfo": "If successful, the result will be a datetime value, otherwise, the result will be null.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*year*| `int` |  *True* | The year value between 0 to 9999.|\n|*month*| `int` |  *True* | The month value between 1 to 12. |\n|*day*| `int` |  *True* | The day value between 1 to 28-31, depending on the month.|\n|*hour*| `int` | | The hour value between 0 to 23.|\n|*minute*| `int` | | The minute value between 0 to 59.|\n|*second*| double | | The second value between 0 to 59.9999999.|",
        "example": "print year_month_day = make_datetime(2017,10,01)\n\nprint year_month_day_hour_minute = make_datetime(2017,10,01,12,10)\n\nprint year_month_day_hour_minute_second = make_datetime(2017,10,01,12,11,0.1234567)",
        "sourceLength": 3074
      }
    },
    {
      "name": "make_timespan",
      "category": "KQL Function",
      "documentation": {
        "title": "make_timespan()",
        "description": "Creates a timespan scalar value from the specified time period.",
        "syntax": "`make_timespan(`*hour*, *minute*`)`\n\n`make_timespan(`*hour*, *minute*, *second*`)`\n\n`make_timespan(`*day*, *hour*, *minute*, *second*`)`",
        "returnInfo": "If the creation is successful, the result will be a timespan value. Otherwise, the result will be null.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*day*| `int` |  *True*| The day.|\n|*hour*| `int` |  *True*| The hour. A value from 0-23.|\n|*minute*| `int` || The minute. A value from 0-59.|\n|*second*| `real` || The second. A value from 0 to 59.9999999.|",
        "example": "print ['timespan'] = make_timespan(1,12,30,55.123)",
        "sourceLength": 1905
      }
    },
    {
      "name": "materialized_view",
      "category": "KQL Function",
      "documentation": {
        "title": "materialized_view()",
        "description": "References the materialized part of a materialized view.\n\nThe `materialized_view()` function supports a way of querying the *materialized* part only of the view, while specifying the max latency the user is willing to tolerate. This option isn't guaranteed to return the most up-to-date records, but should always be more performant than querying the entire view. This function is useful for scenarios in which you're willing to sacrifice some freshness for performance, for example in telemetry dashboards.",
        "syntax": "`materialized_view(`*ViewName*`,` [ *max_age* ] `)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ViewName*| `string` |  *True*| The name of the materialized view.|\n| *max_age*| `timespan` || If not provided, only the *materialized* part of the view is returned. If provided, the function will return the _materialized_ part of the view if last materialization time is greater than `@now -  max_age`. Otherwise, the entire view is returned, which is identical to querying *ViewName* directly.|",
        "example": "materialized_view(\"ViewName\")\n\nmaterialized_view(\"ViewName\", 10m)",
        "sourceLength": 2956
      }
    },
    {
      "name": "max_of",
      "category": "KQL Function",
      "documentation": {
        "title": "max_of()",
        "description": "Returns the maximum value of all argument expressions.",
        "syntax": "`max_of(`*arg*`,` *arg_2*`,` [ *arg_3*`,` ... ]`)`",
        "returnInfo": "The maximum value of all argument expressions.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*arg_i* | scalar |  *True* | The values to compare.|\n\n* All arguments must be of the same type.\n* Maximum of 64 arguments is supported.\n* Non-null values take precedence to null values.",
        "example": "",
        "sourceLength": 3163
      }
    },
    {
      "name": "merge_tdigest",
      "category": "KQL Function",
      "documentation": {
        "title": "merge_tdigest()",
        "description": "Merges `tdigest` results (scalar version of the aggregate version `tdigest_merge()`).\n\nRead more about the underlying algorithm (T-Digest) and the estimated error here.\n\n> The `merge_tdigest()` and `tdigest_merge()` functions are equivalent\n\n> [!IMPORTANT]\n>The results of tdigest() and tdigest_merge() can be stored and later retrieved. For example, you may want to create daily percentiles summary, which can then be used to calculate weekly percentiles.\n> However, the precise binary representation of these results may change over time. There's no guarantee that these functions will produce identical results for identical inputs, and therefore we don't advise relying on them.",
        "syntax": "`merge_tdigest(`*exprs*`)`",
        "returnInfo": "The result for merging the columns `*Expr1*`, `*Expr2*`, ... `*ExprN*` to one `tdigest`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *exprs* | `dynamic` |  *True* | One or more comma-separated column references that have the `tdigest` values to be merged. |",
        "example": "range x from 1 to 10 step 1 \n| extend y = x + 10\n| summarize tdigestX = tdigest(x), tdigestY = tdigest(y)\n| project merged = merge_tdigest(tdigestX, tdigestY)\n| project percentile_tdigest(merged, 100, typeof(long))",
        "sourceLength": 2457
      }
    },
    {
      "name": "min_of",
      "category": "KQL Function",
      "documentation": {
        "title": "min_of()",
        "description": "Returns the minimum value of several evaluated scalar expressions.",
        "syntax": "`min_of` `(`*arg*`,` *arg_2*`,` [ *arg_3*, ... ]`)`",
        "returnInfo": "The minimum value of all argument expressions.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *arg*, *arg_2*, ... | scalar |  *True* | A comma separated list of 2-64 scalar expressions to compare. The function returns the minimum value among these expressions.|\n\n* All arguments must be of the same type.\n* Maximum of 64 arguments is supported.\n* Non-null values take precedence to null values.",
        "example": "print result=min_of(10, 1, -3, 17) \n\ndatatable (A: int, B: int)\n[\n    5, 2,\n    10, 1,\n    int(null), 3,\n    1, int(null),\n    int(null), int(null)\n]\n| project min_of(A, B)",
        "sourceLength": 2256
      }
    },
    {
      "name": "monthofyear",
      "category": "KQL Function",
      "documentation": {
        "title": "monthofyear()",
        "description": "Returns the integer number from 1-12 representing the month number of the given year.\n\n> The `monthofyear()` and `getmonth()` functions are equivalent",
        "syntax": "`monthofyear(`*date*`)`",
        "returnInfo": "An integer from 1-12 representing the month number of the given year.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True* | The date for which to find the month number. |",
        "example": "print result=monthofyear(datetime(\"2015-12-14\"))",
        "sourceLength": 1475
      }
    },
    {
      "name": "new_guid",
      "category": "KQL Function",
      "documentation": {
        "title": "new_guid()",
        "description": "Returns a random GUID (Globally Unique Identifier).",
        "syntax": "`new_guid()`",
        "returnInfo": "A new value of type `guid`.",
        "parametersTable": "",
        "example": "print guid=new_guid()",
        "sourceLength": 1150
      }
    },
    {
      "name": "next",
      "category": "KQL Function",
      "documentation": {
        "title": "next()",
        "description": "Returns the value of a column in a row that is at some offset following the\ncurrent row in a serialized row set.",
        "syntax": "`next(`*column*`,` [ *offset*`,` *default_value* ]`)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *column*| `string` |   *True* | The column from which to get the values.|\n| *offset*| `int` | | The amount of rows to move from the current row. Default is 1. |\n| *default_value*| scalar | | The default value when there's no value in the next row. When no default value is specified, `null` is used.|",
        "example": "",
        "sourceLength": 5098
      }
    },
    {
      "name": "not",
      "category": "KQL Function",
      "documentation": {
        "title": "not()",
        "description": "Reverses the value of its `bool` argument.",
        "syntax": "`not(`*expr*`)`",
        "returnInfo": "Returns the reversed logical value of its `bool` argument.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*expr*|scalar| *True*|An expression that evaluates to a boolean value. The result of this expression is reversed.|",
        "example": "StormEvents \n| where not(EventType == \"Tornado\") \n| summarize count() by State\n\nStormEvents\n| where not(EventType == \"Hail\" or State == \"Alaska\")\n\nStormEvents\n| where not(EventType == \"Hail\" and State == \"Alaska\")",
        "sourceLength": 3242
      }
    },
    {
      "name": "now",
      "category": "KQL Function",
      "documentation": {
        "title": "now()",
        "description": "Returns the current UTC time, optionally offset by a given timespan.\n\nThe current UTC time will stay the same across all uses of `now()` in a single query statement, even if there's technically a small time difference between when each `now()` runs.",
        "syntax": "`now(`[ *offset* ]`)`",
        "returnInfo": "The current UTC clock time, plus the *offset* time if provided, as a `datetime`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *offset* | `timespan` | | A timespan to add to the current UTC clock time. The default value is 0.|",
        "example": "",
        "sourceLength": 3432
      }
    },
    {
      "name": "pack",
      "category": "KQL Function",
      "documentation": {
        "title": "bag_pack()",
        "description": "Creates a dynamic property bag object from a list of keys and values.\n\n> **Deprecated aliases**: pack(), pack_dictionary()",
        "syntax": "`bag_pack(`*key1*`,` *value1*`,` *key2*`,` *value2*`,... )`",
        "returnInfo": "Returns a `dynamic` property bag object from the listed *key* and *value* inputs.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*key*| `string` |  *True* | The key name.|\n|*value*| any scalar data type |  *True* | The key value.|\n\n> [!NOTE]\n> The *key* and *value* strings are an alternating list the total length of the list must be even.",
        "example": "print bag_pack(\"Level\", \"Information\", \"ProcessID\", 1234, \"Data\", bag_pack(\"url\", \"www.bing.com\"))\n\ndatatable (\n    Source: int,\n    Destination: int,\n    Message: string\n) [\n    1234, 100, \"AA\", \n    4567, 200, \"BB\",\n    1212, 300, \"CC\" \n]\n| extend MyBag=bag_pack(\"Dest\", Destination, \"Mesg\", Message)\n| project-away Source, Destination, Message\n| extend MyBag_Dest=MyBag.Dest, MyBag_Mesg=MyBag.Mesg\n\nlet SmsMessages = datatable (\n    SourceNumber: string,\n    TargetNumber: string,\n    CharsCount: string\n) [\n    \"555-555-1234\", \"555-555-1212\", \"46\", \n    \"555-555-1234\", \"555-555-1213\", \"50\",\n    \"555-555-1212\", \"555-555-1234\", \"32\" \n];\nlet MmsMessages = datatable (\n    SourceNumber: string,\n    TargetNumber: string,\n    AttachmentSize: string,\n    AttachmentType: string,\n    AttachmentName: string\n) [\n    \"555-555-1212\", \"555-555-1213\", \"200\", \"jpeg\", \"Pic1\",\n    \"555-555-1234\", \"555-555-1212\", \"250\", \"jpeg\", \"Pic2\",\n    \"555-555-1234\", \"555-555-1213\", \"300\", \"png\", \"Pic3\"\n];\nSmsMessages \n| join kind=inner MmsMessages on SourceNumber\n| extend Packed=bag_pack(\"CharsCount\", CharsCount, \"AttachmentSize\", AttachmentSize, \"AttachmentType\", AttachmentType, \"AttachmentName\", AttachmentName) \n| where SourceNumber == \"555-555-1234\"\n| project SourceNumber, TargetNumber, Packed",
        "sourceLength": 5802
      }
    },
    {
      "name": "pack_all",
      "category": "KQL Function",
      "documentation": {
        "title": "pack_all()",
        "description": "Creates a dynamic property bag object from all the columns of the tabular expression.\n\n> [!NOTE]\n> The representation of the returned object isn't guaranteed to be byte-level-compatible between runs. For example, properties that appear in the bag may appear in a different order.",
        "syntax": "`pack_all(`[ *ignore_null_empty* ]`)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ignore_null_empty* | `bool` | | Indicates whether to ignore null/empty columns and exclude them from the resulting property bag. The default value is `false`.|",
        "example": "datatable(SourceNumber:string,TargetNumber:string,CharsCount:long)\n[\n'555-555-1234','555-555-1212',46,\n'555-555-1234','555-555-1213',50,\n'555-555-1313','',42, \n'','555-555-3456',74 \n]\n| extend Packed=pack_all(), PackedIgnoreNullEmpty=pack_all(true)",
        "sourceLength": 3221
      }
    },
    {
      "name": "pack_array",
      "category": "KQL Function",
      "documentation": {
        "title": "pack_array()",
        "description": "Packs all input values into a dynamic array.",
        "syntax": "`pack_array(`*value1*`,` [ *value2*, ... ]`)`\n\n`pack_array(*)`",
        "returnInfo": "A dynamic array that includes the values of *value1*, *value2*, ... *valueN*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value1...valueN* | `string` |  *True* | Input expressions to be packed into a dynamic array.|\n| *The wildcard `*`*| `string` | | Providing the wildcard `*` packs all input columns into a dynamic array.|",
        "example": "range x from 1 to 3 step 1\n| extend y = x * 2\n| extend z = y * 2\n| project pack_array(x, y, z)\n\nrange x from 1 to 3 step 1\n| extend y = tostring(x * 2)\n| extend z = (x * 2) * 1s\n| project pack_array(x, y, z)",
        "sourceLength": 2249
      }
    },
    {
      "name": "parse_command_line",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_command_line()",
        "description": "Parses a Unicode command-line string and returns a dynamic array of the command-line arguments.",
        "syntax": "`parse_command_line(`*command_line*, *parser_type*`)`",
        "returnInfo": "A dynamic array of the command-line arguments.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *command_line*| `string` |  *True* | The command line value to parse.|\n| *parser_type*| `string` |  *True* | The only value that is currently supported is `\"windows\"`, which parses the command line the same way as CommandLineToArgvW.|",
        "example": "print parse_command_line(\"echo \\\"hello world!\\\"\", \"windows\")",
        "sourceLength": 1749
      }
    },
    {
      "name": "parse_csv",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_csv()",
        "description": "Splits a given string representing a single record of comma-separated values and returns a string array with these values.",
        "syntax": "`parse_csv(`*csv_text*`)`",
        "returnInfo": "A string array that contains the split values.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *csv_text* | `string` |  *True* | A single record of comma-separated values. |\n\n> [!NOTE]\n>\n> * Embedded line feeds, commas, and quotes may be escaped using the double quotation mark ('\"').\n> * This function doesn't support multiple records per row (only the first record is taken).",
        "example": "",
        "sourceLength": 3187
      }
    },
    {
      "name": "parse_ipv4",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_ipv4()",
        "description": "Converts IPv4 string to a signed 64-bit wide long number representation in big-endian order.",
        "syntax": "`parse_ipv4(`*ip*`)`",
        "returnInfo": "If conversion is successful, the result is a long number.\nIf conversion isn't successful, the result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip* | `string` |  *True* | The IPv4 that is converted to long. The value may include net-mask using IP-prefix notation.|",
        "example": "datatable(ip_string: string)\n[\n    '192.168.1.1', '192.168.1.1/24', '255.255.255.255/31'\n]\n| extend ip_long = parse_ipv4(ip_string)",
        "sourceLength": 1842
      }
    },
    {
      "name": "parse_ipv4_mask",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_ipv4_mask()",
        "description": "Converts the input string of IPv4 and netmask to a signed, 64-bit wide, long number representation in big-endian order.",
        "syntax": "`parse_ipv4_mask(`*ip* `,` *prefix*`)`",
        "returnInfo": "If conversion is successful, the result is a long number.\nIf conversion isn't successful, the result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip*| `string` |  *True* | The IPv4 address to convert to a long number.|\n| *prefix*| `int` |  *True* | An integer from 0 to 32 representing the number of most-significant bits that are taken into account.|",
        "example": "print parse_ipv4_mask(\"127.0.0.1\", 24)",
        "sourceLength": 1670
      }
    },
    {
      "name": "parse_ipv6",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_ipv6()",
        "description": "Converts IPv6 or IPv4 string to a canonical IPv6 string representation.",
        "syntax": "`parse_ipv6(`*ip*`)`",
        "returnInfo": "If conversion is successful, the result is a string representing a canonical IPv6 network address.\nIf conversion isn't successful, the result is an empty string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip* | `string` |  *True* | The IPv6/IPv4 network address that is converted to canonical IPv6 representation. The value may include net-mask using IP-prefix notation.|",
        "example": "datatable(ipv4: string)\n[\n    '192.168.255.255', '192.168.255.255/24', '255.255.255.255'\n]\n| extend ipv6 = parse_ipv6(ipv4)",
        "sourceLength": 2115
      }
    },
    {
      "name": "parse_ipv6_mask",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_ipv6_mask()",
        "description": "Converts IPv6/IPv4 string and netmask to a canonical IPv6 string representation.",
        "syntax": "`parse_ipv6_mask(`*ip*`,` *prefix*`)`",
        "returnInfo": "If conversion is successful, the result is a string representing a canonical IPv6 network address.\nIf conversion isn't successful, the result is an empty string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *ip*| `string` | | The IPv6/IPv4 network address to convert to canonical IPv6 representation. The value may include net-mask using IP-prefix notation.|\n| *prefix*| `int` | | An integer from 0 to 128 representing the number of most-significant bits that are taken into account.|",
        "example": "datatable(ip_string: string, netmask: long)\n[\n    // IPv4 addresses\n    '192.168.255.255', 120,  // 120-bit netmask is used\n    '192.168.255.255/24', 124,  // 120-bit netmask is used, as IPv4 address doesn't use upper 8 bits\n    '255.255.255.255', 128,  // 128-bit netmask is used\n    // IPv6 addresses\n    'fe80::85d:e82c:9446:7994', 128,     // 128-bit netmask is used\n    'fe80::85d:e82c:9446:7994/120', 124, // 120-bit netmask is used\n    // IPv6 with IPv4 notation\n    '::192.168.255.255', 128,  // 128-bit netmask is used\n    '::192.168.255.255/24', 128,  // 120-bit netmask is used, as IPv4 address doesn't use upper 8 bits\n]\n| extend ip6_canonical = parse_ipv6_mask(ip_string, netmask)",
        "sourceLength": 3256
      }
    },
    {
      "name": "parse_json",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_json()",
        "description": "Interprets a `string` as a JSON value and returns the value as `dynamic`. If possible, the value is converted into relevant data types.  For strict parsing with no data type conversion, use extract() or extract_json() functions.\n\nIt's better to use the parse_json() function over the extract_json() function when you need to extract more than one element of a JSON compound object. Use dynamic() when possible.\n\n> **Deprecated aliases:** parsejson(), toobject(), todynamic()",
        "syntax": "`parse_json(`*json*`)`",
        "returnInfo": "An object of type `dynamic` that is determined by the value of *json*:\n\n* If *json* is of type `dynamic`, its value is used as-is.\n* If *json* is of type `string`, and is a properly formatted JSON string, then the string is parsed, and the value produced is returned.\n* If *json* is of type `string`, but it isn't a properly formatted JSON string, then the returned value is an object of type `dynamic` that holds the original `string` value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *json* | `string` |  *True* | The string in the form of a JSON-formatted value or a dynamic property bag to parse as JSON.|",
        "example": "",
        "sourceLength": 5243
      }
    },
    {
      "name": "parse_path",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_path()",
        "description": "Parses a file path `string` and returns a `dynamic` object that contains the following parts of the path:\n\n* Scheme\n* RootPath\n* DirectoryPath\n* DirectoryName\n* Filename\n* Extension\n* AlternateDataStreamName\n\nIn addition to the simple paths with both types of slashes, the function supports paths with:\n\n* Schemas. For example, \"file://...\"\n* Shared paths. For example, \"\\\\shareddrive\\users...\"\n* Long paths. For example, \"\\\\?\\C:...\"\"\n* Alternate data streams. For example, \"file1.exe:file2.exe\"",
        "syntax": "`parse_path(`*path*`)`",
        "returnInfo": "An object of type `dynamic` that included the path components as listed above.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *path* | `string` |  *True* | The file path.|",
        "example": "datatable(p:string) \n[\n    @\"C:\\temp\\file.txt\",\n    @\"temp\\file.txt\",\n    \"file://C:/temp/file.txt:some.exe\",\n    @\"\\\\shared\\users\\temp\\file.txt.gz\",\n    \"/usr/lib/temp/file.txt\"\n]\n| extend path_parts = parse_path(p)",
        "sourceLength": 2982
      }
    },
    {
      "name": "parse_url",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_url()",
        "description": "Parses an absolute URL `string` and returns a `dynamic` object contains URL parts.\n\n> **Deprecated aliases:** parseurl()",
        "syntax": "`parse_url(`*url*`)`",
        "returnInfo": "An object of type dynamic that included the URL components: Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *url* | `string` |  *True* | An absolute URL, including its scheme, or the query part of the URL. For example, use the absolute `https://bing.com` instead of `bing.com`.|",
        "example": "print Result=parse_url(\"scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment\")",
        "sourceLength": 1891
      }
    },
    {
      "name": "parse_user_agent",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_user_agent()",
        "description": "Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as `dynamic`.",
        "syntax": "`parse_user_agent(`*user-agent-string*, *look-for*`)`",
        "returnInfo": "An object of type `dynamic` that contains the information about the requested parsing targets.\n\n**Browser**: **Family**, **MajorVersion**, **MinorVersion**, **Patch**\n\n**OperatingSystem**: **Family**, **MajorVersion**, **MinorVersion**, **Patch**, **PatchMinor**\n\n**Device**: **Family**, **Brand**, **Model**\n\n> [!WARNING]\n> The function implementation is built on regex checks of the input string against a huge number of predefined patterns. Therefore the expected time and CPU consumption is high.\nWhen the function is used in a query, make sure it runs in a distributed manner on multiple machines.\nIf queries with this function are frequently used, you may want to pre-create the results via update policy, but you need to take into account that using this function inside the update policy will increase the ingestion latency.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *user-agent-string*| `string` |  *True* | The user-agent string to parse.|\n| *look-for*| string or dynamic |  *True* | The value to search for in *user-agent-string*. The possible options are \"browser\", \"os\", or \"device\". If only a single parsing target is required, it can be passed a `string` parameter. If two or three targets are required, they can be passed as a `dynamic` array.|",
        "example": "",
        "sourceLength": 4353
      }
    },
    {
      "name": "parse_version",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_version()",
        "description": "Converts the input string representation of a version number into a decimal number that can be compared.",
        "syntax": "`parse_version` `(`*version*`)`",
        "returnInfo": "If conversion is successful, the result is a decimal; otherwise, the result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *version* | `string` |  *True* | The version to be parsed.|\n\n> [!NOTE]\n>\n> * *version* must contain from one to four version parts, represented as numbers and separated with dots ('.').\n> * Each part of *version* may contain up to eight digits, with the max value at 99999999.\n> * If the number of parts is less than four, all the missing parts are considered as trailing. For example, `1.0` == `1.0.0.0`.",
        "example": "",
        "sourceLength": 3711
      }
    },
    {
      "name": "parse_xml",
      "category": "KQL Function",
      "documentation": {
        "title": "parse_xml()",
        "description": "Interprets a `string` as an XML value, converts the value to a JSON, and returns the value as `dynamic`.",
        "syntax": "`parse_xml(`*xml*`)`",
        "returnInfo": "An object of type dynamic that is determined by the value of *xml*, or null, if the XML format is invalid.\n\nThe conversion is done as follows:\n\nXML                                |JSON                                            |Access\n-----------------------------------|:------------------------------------------------|:--------------\n`<e/>`                             | { \"e\": null }                                  | o.e\n`<e>text</e>`\t                   | { \"e\": \"text\" }\t                            | o.e\n`<e name=\"value\" />`               | { \"e\":{\"@name\": \"value\"} }\t                    | o.e[\"@name\"]\n`<e name=\"value\">text</e>`         | { \"e\": { \"@name\": \"value\", \"#text\": \"text\" } } | o.e[\"@name\"] o.e[\"#text\"]\n`<e> <a>text</a> <b>text</b> </e>` | { \"e\": { \"a\": \"text\", \"b\": \"text\" } }\t        | o.e.a o.e.b\n`<e> <a>text</a> <a>text</a> </e>` | { \"e\": { \"a\": [\"text\", \"text\"] } }\t            | o.e.a[0] o.e.a[1]\n`<e> text <a>text</a> </e>`        | { \"e\": { \"#text\": \"text\", \"a\": \"text\" } }\t    | 1`o.e[\"#text\"] o.e.a\n\n> [!NOTE]\n>\n> * Maximal input `string` length for `parse_xml` is 1 MB (1,048,576 bytes). Longer strings interpretation will result in a null object.\n> * Only element nodes, attributes and text nodes will be translated. Everything else will be skipped.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *xml*| `string` |  *True* | The XML-formatted string value to parse.|",
        "example": "T\n| extend d=parse_xml(context_custom_metrics) \n| extend duration_value=d.duration.value, duration_min=d[\"duration\"][\"min\"]",
        "sourceLength": 3219
      }
    },
    {
      "name": "percentile_tdigest",
      "category": "KQL Function",
      "documentation": {
        "title": "percentile_tdigest()",
        "description": "Calculates the percentile result from the `tdigest` results (which was generated by tdigest() or tdigest_merge())",
        "syntax": "`percentile_tdigest(`*expr*`,` *percentile1* `,` *typeLiteral*`)`",
        "returnInfo": "The percentile value of each value in *expr*.\n\n>[!TIP]\n>\n>* If the type was provided, the result will be a column of the same type provided with the results of the percentile. In this case, all `tdigest` functions must be of that type.\n>* If *expr* includes `tdigest` functions of different types, don't provide the type. The result will be of type dynamic. See below examples.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*expr*| `string` | *True*|An expression that was generated by `tdigest` or tdigest_merge().|\n|*percentile*| `real` | *True*|The value that specifies the percentile.|\n|*typeLiteral*| `string` ||A type literal. If provided, the result set will be of this type. For example, `typeof(long)` will cast all results to type `long`.",
        "example": "",
        "sourceLength": 3558
      }
    },
    {
      "name": "percentrank_tdigest",
      "category": "KQL Function",
      "documentation": {
        "title": "percentrank_tdigest()",
        "description": "Calculates the approximate rank of the value in a set, where rank is expressed as a percentage of the set's size.\nThis function can be viewed as the inverse of the percentile.",
        "syntax": "`percentrank_tdigest(`*digest*`,` *value*`)`",
        "returnInfo": "The percentage rank of value in a dataset.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*digest*| `string` | *True*| An expression that was generated by tdigest() or tdigest_merge().|\n|*value*|scalar| *True*|An expression representing a value to be used for percentage ranking calculation.|\n\n> [!NOTE]\n> The type of *value* and the type of the elements in *digest* should be the same.",
        "example": "StormEvents\n| summarize tdigestRes = tdigest(DamageProperty)\n| project percentrank_tdigest(tdigestRes, 4490)\n\nStormEvents\n| summarize tdigestRes = tdigest(DamageProperty)\n| project percentile_tdigest(tdigestRes, 85, typeof(long))",
        "sourceLength": 2651
      }
    },
    {
      "name": "pi",
      "category": "KQL Function",
      "documentation": {
        "title": "pi()",
        "description": "Returns the constant value of Pi.",
        "syntax": "`pi()`",
        "returnInfo": "The double value of Pi (3.1415926...)",
        "parametersTable": "",
        "example": "",
        "sourceLength": 703
      }
    },
    {
      "name": "pow",
      "category": "KQL Function",
      "documentation": {
        "title": "pow()",
        "description": "Returns a result of raising to power",
        "syntax": "`pow(`*base*`,` *exponent* `)`",
        "returnInfo": "Returns base raised to the power exponent: base ^ exponent.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *base*| int, real, or long |  *True* | The base value.|\n| *exponent*| int, real, or long |  *True* | The exponent value.|",
        "example": "print result=pow(2, 3)",
        "sourceLength": 1337
      }
    },
    {
      "name": "prev",
      "category": "KQL Function",
      "documentation": {
        "title": "prev()",
        "description": "Returns the value of a specific column in a specified row.\nThe specified row is at a specified offset from the current row in a serialized row set.",
        "syntax": "`prev(`*column*`,` [ *offset* ]`,` [ *default_value* ] `)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *column*| `string` |  *True* | The column from which to get the values.|\n| *offset*| `int` | | The offset to go back in rows. The default is 1.|\n| *default_value*| scalar | | The default value to be used when there are no previous rows from which to take the value. The default is `null`.|",
        "example": "",
        "sourceLength": 5245
      }
    },
    {
      "name": "punycode_domain_from_string",
      "category": "KQL Function",
      "documentation": {
        "title": "punycode_domain_from_string()",
        "description": "Decodes input string from encoded Internationalized Domain Name in Applications (IDNA) punycode form.",
        "syntax": "`punycode_domain_from_string(`*encoded_string*`)`",
        "returnInfo": "* Returns a `string` that represents the original Internationalized Domain Name.\n* Returns an empty result if decoding failed.",
        "parametersTable": "| Name | Type | Required | Description |\n|:---|:---|:---|:---|\n| *encoded_string* | `string` |  *True* | An IDNA string to be decoded from punycode form. The function accepts one string argument.",
        "example": "datatable(encoded:string)\n[\n    \"xn--Ge-mia.Bulg.edu\", \n    \"xn--Lin-8na.Celtchair.org\", \n    \"xn--Ry-lja8c.xn--Jng-uta63a.xn--Bng-9ka.com\", \n] \n| extend domain=punycode_domain_from_string(encoded)",
        "sourceLength": 2159
      }
    },
    {
      "name": "punycode_domain_to_string",
      "category": "KQL Function",
      "documentation": {
        "title": "punycode_domain_to_string()",
        "description": "Encodes Internationalized Domain Name in Applications (IDNA) string to Punycode form.",
        "syntax": "`punycode_domain_to_string(`*domain*`)`",
        "returnInfo": "* Returns a `string` that represents punycode-encoded original string.\n* Returns an empty result if encoding failed.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *domain* |  `string` |  *True* | A string to be encoded to punycode form. The function accepts one string argument.",
        "example": "datatable(domain:string )['Lê Lợi。Thuận Thiên。com', 'Riðill｡Skáldskaparmál｡org', \"Kaledvoulc'h.Artorījos.edu\"]\n| extend str=punycode_domain_to_string(domain)",
        "sourceLength": 2047
      }
    },
    {
      "name": "punycode_from_string",
      "category": "KQL Function",
      "documentation": {
        "title": "punycode_from_string()",
        "description": "Encodes input string to Punycode form.\nThe result string contains only ASCII characters. The result string doesn't start with \"xn--\".",
        "syntax": "`punycode_from_string('input_string')`",
        "returnInfo": "* Returns a `string` that represents punycode-encoded original string.\n* Returns an empty result if encoding failed.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *input_string* |  `string` |  *True* | A string to be encoded to punycode form. The function accepts one string argument.",
        "example": "print encoded = punycode_from_string('académie-française')\n\n print domain='艺术.com'\n| extend domain_vec = split(domain, '.')\n| extend encoded_host = punycode_from_string(tostring(domain_vec[0]))\n| extend encoded_domain = strcat('xn--', encoded_host, '.', domain_vec[1])",
        "sourceLength": 2484
      }
    },
    {
      "name": "punycode_to_string",
      "category": "KQL Function",
      "documentation": {
        "title": "punycode_to_string()",
        "description": "Decodes input string from punycode form. The string shouldn't contain the initial xn--, and must contain only ASCII characters.",
        "syntax": "`punycode_to_string('input_string')`",
        "returnInfo": "* Returns a `string` that represents the original, decoded string.\n* Returns an empty result if decoding failed.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *input_string* | `string` |  *True* | A string to be decoded from punycode form. The function accepts one string argument.",
        "example": "print decoded = punycode_to_string('acadmie-franaise-npb1a')",
        "sourceLength": 1707
      }
    },
    {
      "name": "radians",
      "category": "KQL Function",
      "documentation": {
        "title": "radians()",
        "description": "Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`",
        "syntax": "`radians(`*degrees*`)`",
        "returnInfo": "The corresponding angle in radians for an angle specified in degrees.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *degrees* | `real` |  *True* | The angle in degrees.|",
        "example": "print radians0 = radians(90), radians1 = radians(180), radians2 = radians(360)",
        "sourceLength": 1494
      }
    },
    {
      "name": "rand",
      "category": "KQL Function",
      "documentation": {
        "title": "rand()",
        "description": "Returns a random number.\n\n```kusto\nrand()\nrand(1000)\n```",
        "syntax": "* `rand()` - returns a value of type `real`\n  with a uniform distribution in the range 0.0, 1.0).\n* `rand(` *N* `)` - returns a value of type `real`\n  chosen with a uniform distribution from the set {0.0, 1.0, ..., *N* - 1}.\n\n[",
        "returnInfo": "",
        "parametersTable": "",
        "example": "",
        "sourceLength": 891
      }
    },
    {
      "name": "range",
      "category": "KQL Function",
      "documentation": {
        "title": "range()",
        "description": "Generates a dynamic array holding a series of equally spaced values.",
        "syntax": "`range(`*start*`,` *stop* [`,` *step*]`)`",
        "returnInfo": "A dynamic array whose values are: *start*, *start* + *step*, ... up to and including *stop*. The array is truncated if the maximum number of results allowed is reached.  \n\n> [!NOTE]\n> The range function supports a maximum of 1,048,576 (2^20) results.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*start*|scalar| *True*| The value of the first element in the resulting array. |\n|*stop*|scalar| *True*| The maximum value of the last element in the resulting array, such that the last value in the series is less than or equal to the stop value. |\n|*step*|scalar||The difference between two consecutive elements of the array. The default value for *step* is `1` for numeric and `1h` for `timespan` or `datetime`.|",
        "example": "print r = range(1, 8, 3)\n\nprint r = range(datetime(2007-01-01), datetime(2007-12-31), 1d)\n\nprint range(1, 3)\n\nprint range(1h, 5h)\n\nprint r = range(1,1000000000) \n| mv-expand r \n| count",
        "sourceLength": 4169
      }
    },
    {
      "name": "rank_tdigest",
      "category": "KQL Function",
      "documentation": {
        "title": "rank_tdigest()",
        "description": "Calculates the approximate rank of the value in a set.\nRank of value `v` in a set `S` is defined as count of members of `S` that are smaller or equal to `v`, `S` is represented by its `tdigest`.",
        "syntax": "`rank_tdigest(`*digest*`,` *value*`)`",
        "returnInfo": "The rank foreach value in a dataset.\n\n>[!TIP]\n>The values that you want to get its rank must be of the same type as the `tdigest`.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*digest*| `string` |An expression that was generated by tdigest() or tdigest_merge().|\n|*value*|scalar|An expression representing a value to be used for ranking calculation.|",
        "example": "range x from 1 to 1000 step 1\n| summarize t_x=tdigest(x)\n| project rank_of_685=rank_tdigest(t_x, 685)\n\nStormEvents\n| summarize tdigestRes = tdigest(DamageProperty)\n| project rank_of_4490=rank_tdigest(tdigestRes, 4490) \n\nStormEvents\n| summarize tdigestRes = tdigest(DamageProperty), count()\n| project rank_tdigest(tdigestRes, 4490) * 100.0 / count_\n\nStormEvents\n| summarize tdigestRes = tdigest(DamageProperty)\n| project percentile_tdigest(tdigestRes, 85, typeof(long))",
        "sourceLength": 3905
      }
    },
    {
      "name": "regex_quote",
      "category": "KQL Function",
      "documentation": {
        "title": "regex_quote()",
        "description": "Returns a string that escapes all regular expression characters.",
        "syntax": "`regex_quote(`*string*`)`",
        "returnInfo": "Returns *string* where all regex expression characters are escaped.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *string* | `string` |  *True* | The string to escape.|",
        "example": "print result = regex_quote('(so$me.Te^xt)')",
        "sourceLength": 1411
      }
    },
    {
      "name": "repeat",
      "category": "KQL Function",
      "documentation": {
        "title": "repeat()",
        "description": "Generates a dynamic array containing a series comprised of repeated numbers.",
        "syntax": "`repeat(`*value*`,` *count*`)`",
        "returnInfo": "If *count* is equal to zero, an empty array is returned.\nIf *count* is less than zero, a null value is returned.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `bool`, `int`, `long`, `real`, `datetime`, `string` or `timespan` |  *True* | The value of the element in the resulting array.|  \n| *count* | `int` |  *True* | The count of the elements in the resulting array.|",
        "example": "T | extend r = repeat(1, 3)",
        "sourceLength": 1317
      }
    },
    {
      "name": "replace_regex",
      "category": "KQL Function",
      "documentation": {
        "title": "replace_regex()",
        "description": "Replaces all regular expression matches with a specified pattern.\n\n> **Deprecated aliases:** replace()",
        "syntax": "`replace_regex(`*source*`,`*lookup_regex*`,` *rewrite_pattern*`)`",
        "returnInfo": "Returns the *source* after replacing all matches of *lookup_regex* with evaluations of *rewrite_pattern*. Matches do not overlap.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source*| `string` |  *True* | The text to search and replace.|\n| *lookup_regex*| `string` |  *True* | The regular expression to search for in *text*. The expression can contain capture groups in parentheses. To match over multiple lines, use the `m` or `s` flags. For more information on flags, see Grouping and flags. |\n| *rewrite_pattern*| `string` |  *True* | The replacement regex for any match made by *matchingRegex*. Use `\\0` to refer to the whole match, `\\1` for the first capture group, `\\2` and so on for subsequent capture groups.|",
        "example": "range x from 1 to 5 step 1\n| extend str=strcat('Number is ', tostring(x))\n| extend replaced=replace_regex(str, @'is (\\d+)', @'was: \\1')",
        "sourceLength": 2798
      }
    },
    {
      "name": "replace_string",
      "category": "KQL Function",
      "documentation": {
        "title": "replace_string()",
        "description": "Replaces all string matches with a specified string.\n\n> **Deprecated aliases:** replace()\n\nTo replace multiple strings, see replace_strings().",
        "syntax": "`replace_string(`*text*`,` *lookup*`,` *rewrite*`)`",
        "returnInfo": "Returns the *text* after replacing all matches of *lookup* with evaluations of *rewrite*. Matches don't overlap.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*text*| `string` | *True*|The source string.|\n|*lookup*| `string` | *True*|The string to be replaced.|\n|*rewrite*| `string` | *True*|The replacement string.|",
        "example": "",
        "sourceLength": 3635
      }
    },
    {
      "name": "replace_strings",
      "category": "KQL Function",
      "documentation": {
        "title": "replace_strings()",
        "description": "Replaces all strings matches with specified strings.\n\nTo replace an individual string, see replace_string().",
        "syntax": "`replace_strings(`*text*`,` *lookups*`,` *rewrites*`)`",
        "returnInfo": "Returns *text* after replacing all matches of *lookups* with evaluations of *rewrites*. Matches don't overlap.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*text*| `string` | *True*|The source string.|\n|*lookups*| `dynamic` | *True*|The array that includes lookup strings. Array element that isn't a string is ignored.|\n|*rewrites*| `dynamic` | *True*|The array that includes rewrites. Array element that isn't a string is ignored (no replacement made).|",
        "example": "",
        "sourceLength": 5667
      }
    },
    {
      "name": "reverse",
      "category": "KQL Function",
      "documentation": {
        "title": "reverse()",
        "description": "Function reverses the order of the input string.\nIf the input value isn't of type `string`, then the function forcibly casts the value to type `string`.",
        "syntax": "`reverse(`*value*`)`",
        "returnInfo": "The reverse order of a string value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `string` |  *True* | input value.|",
        "example": "print str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n| extend rstr = reverse(str)\n\nprint ['int'] = 12345, ['double'] = 123.45, \n['datetime'] = datetime(2017-10-15 12:00), ['timespan'] = 3h\n| project rint = reverse(['int']), rdouble = reverse(['double']), \nrdatetime = reverse(['datetime']), rtimespan = reverse(['timespan'])",
        "sourceLength": 2270
      }
    },
    {
      "name": "round",
      "category": "KQL Function",
      "documentation": {
        "title": "round()",
        "description": "Returns the rounded number to the specified precision.",
        "syntax": "`round(`*number* [`,` *precision*]`)`",
        "returnInfo": "The rounded number to the specified precision.\n\nRound is different from the `bin()` function in\nthat the `round()` function rounds a number to a specific number of digits while the `bin()` function rounds the value to an integer multiple of a given bin size. For example, `round(2.15, 1)` returns 2.2 while `bin(2.15, 1)` returns 2.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *number*| long or real |  *True* | The number to calculate the round on.|\n| *precision*| `int` | | The number of digits to round to. The default is 0.|",
        "example": "round(2.98765, 3)   // 2.988\nround(2.15, 1)      // 2.2\nround(2.15)         // 2 // equivalent to round(2.15, 0)\nround(-50.55, -2)   // -100\nround(21.5, -1)     // 20",
        "sourceLength": 1521
      }
    },
    {
      "name": "row_cumsum",
      "category": "KQL Function",
      "documentation": {
        "title": "row_cumsum()",
        "description": "Calculates the cumulative sum of a column in a serialized row set.",
        "syntax": "`row_cumsum(` *term* [`,` *restart*] `)`",
        "returnInfo": "The function returns the cumulative sum of its argument.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *term*| int, long, or real |  *True* | The expression indicating the value to be summed.|\n| *restart*| `bool` | | Indicates when the accumulation operation should be restarted, or set back to 0. It can be used to indicate partitions in the data.|",
        "example": "datatable (a:long) [\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n]\n| where a%2==0\n| serialize cs=row_cumsum(a)\n\ndatatable (name:string, month:int, salary:long)\n[\n    \"Alice\", 1, 1000,\n    \"Bob\",   1, 1000,\n    \"Alice\", 2, 2000,\n    \"Bob\",   2, 1950,\n    \"Alice\", 3, 1400,\n    \"Bob\",   3, 1450,\n]\n| order by name asc, month asc\n| extend total=row_cumsum(salary, name != prev(name))",
        "sourceLength": 2994
      }
    },
    {
      "name": "row_number",
      "category": "KQL Function",
      "documentation": {
        "title": "row_number()",
        "description": "Returns the current row's index in a serialized row set.\n\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\nOptionally, the row index can start at a different value than `1`.\nAdditionally, the row index may be reset according to some provided predicate.",
        "syntax": "`row_number(` [*StartingIndex* [`,` *Restart*]] `)`",
        "returnInfo": "The function returns the row index of the current row as a value of type `long`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *StartingIndex*| `long` | | The value of the row index to start at or restart to. The default value is 1.|\n| *restart*| `bool` | | Indicates when the numbering is to be restarted to the *StartingIndex* value. The default is `false`.|",
        "example": "range a from 1 to 10 step 1\n| sort by a desc\n| extend rn=row_number()\n\nrange a from 1 to 10 step 1\n| sort by a desc\n| extend rn=row_number(7)\n\ndatatable (Airport:string, Airline:string, Departures:long)\n[\n  \"TLV\", \"LH\", 1,\n  \"TLV\", \"LY\", 100,\n  \"SEA\", \"LH\", 1,\n  \"SEA\", \"BA\", 2,\n  \"SEA\", \"LY\", 0\n]\n| sort by Airport asc, Departures desc\n| extend Rank=row_number(1, prev(Airport) != Airport)",
        "sourceLength": 3719
      }
    },
    {
      "name": "row_rank_dense",
      "category": "KQL Function",
      "documentation": {
        "title": "row_rank_dense()",
        "description": "Returns the current row's dense rank in a serialized row set.\n\nThe row rank starts by default at `1` for the first row, and is incremented by `1` whenever the provided *Term* is different than the previous row's *Term*.",
        "syntax": "`row_rank_dense` `(` *Term* `)`",
        "returnInfo": "Returns the row rank of the current row as a value of type `long`.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*Term*| `string` | *True*|An expression indicating the value to consider for the rank. The rank is increased whenever the *Term* changes.|\n| *restart*| `bool` | | Indicates when the numbering is to be restarted to the *StartingIndex* value. The default is `false`.|",
        "example": "datatable (Airport:string, Airline:string, Departures:long)\n[\n  \"SEA\", \"LH\", 3,\n  \"SEA\", \"LY\", 100,\n  \"SEA\", \"UA\", 3,\n  \"SEA\", \"BA\", 2,\n  \"SEA\", \"EL\", 3\n]\n| sort by Departures asc\n| extend Rank=row_rank_dense(Departures)\n\ndatatable (Airport:string, Airline:string, Departures:long)\n[\n  \"SEA\", \"LH\", 3,\n  \"SEA\", \"LY\", 100,\n  \"SEA\", \"UA\", 3,\n  \"SEA\", \"BA\", 2,\n  \"SEA\", \"EL\", 3,\n  \"AMS\", \"EL\", 1,\n  \"AMS\", \"BA\", 1\n]\n| sort by Airport desc, Departures asc\n| extend Rank=row_rank_dense(Departures, prev(Airport) != Airport)",
        "sourceLength": 3752
      }
    },
    {
      "name": "row_rank_min",
      "category": "KQL Function",
      "documentation": {
        "title": "row_rank_min()",
        "description": "Returns the current row's minimal rank in a serialized row set.\n\nThe rank is the minimal row number that the current row's *Term* appears in.",
        "syntax": "`row_rank_min` `(` *Term* `)`",
        "returnInfo": "Returns the row rank of the current row as a value of type `long`.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*Term*| `string` | *True*|An expression indicating the value to consider for the rank. The rank is the minimal row number for *Term*.|\n| *restart*| `bool` | | Indicates when the numbering is to be restarted to the *StartingIndex* value. The default is `false`.|",
        "example": "datatable (Airport:string, Airline:string, Departures:long)\n[\n  \"SEA\", \"LH\", 3,\n  \"SEA\", \"LY\", 100,\n  \"SEA\", \"UA\", 3,\n  \"SEA\", \"BA\", 2,\n  \"SEA\", \"EL\", 3\n]\n| sort by Departures asc\n| extend Rank=row_rank_min(Departures)",
        "sourceLength": 2358
      }
    },
    {
      "name": "row_window_session",
      "category": "KQL Function",
      "documentation": {
        "title": "row_window_session()",
        "description": "Calculates session start values of a column in a serialized row set.",
        "syntax": "`row_window_session` `(` *Expr* `,` *MaxDistanceFromFirst* `,` *MaxDistanceBetweenNeighbors* [`,` *Restart*] `)`",
        "returnInfo": "The function returns the values at the beginning of each session. It uses the following conceptual calculation model:\n\n1. Iterates over the input sequence of *Expr* values in order.\n\n1. For each value, it decides whether to create a new session.\n\n1. If a new session is created, the function returns the current value of *Expr*. Otherwise, it returns the previous value of *Expr*.\n\n>[!NOTE]\n>The value represents a new session if it meets the following conditions using the logical OR operation:\n>\n>* If there was no previous session value, or the previous session value was null.\n>* If the value of *Expr* equals or exceeds the previous session value plus\n  *MaxDistanceFromFirst*.\n>* If the value of *Expr* equals or exceeds the previous value of *Expr*\n  plus *MaxDistanceBetweenNeighbors*.\n>* If *`Restart`* condition is specified and evaluates to `true`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*Expr* | `datetime` | *True* | An expression whose values are grouped together in sessions. When *Expr* results in a null value, the next value starts a new session. |\n|*MaxDistanceFromFirst* | `timespan` | *True* | Determines when a new session starts using the maximum distance between the current *Expr* value and its value at the beginning of the session. |\n|*MaxDistanceBetweenNeighbors*| `timespan` | *True* | Another criterion for starting a new session using the maximum distance from one value of *Expr* to the next. |\n| *Restart* |`boolean` | | If specified, every value that evaluates to `true` immediately restarts the session. |",
        "example": "datatable (ID:string, Timestamp:datetime) [\n    \"1\", datetime(2024-04-11 10:00:00),\n    \"2\", datetime(2024-04-11 10:18:00),\n    \"1\", datetime(2024-04-11 11:00:00),\n    \"3\", datetime(2024-04-11 11:30:00),\n    \"2\", datetime(2024-04-11 13:30:00),\n    \"2\", datetime(2024-04-11 10:16:00)\n]\n| sort by ID asc, Timestamp asc\n| extend SessionStarted = row_window_session(Timestamp, 1h, 5m, ID != prev(ID))",
        "sourceLength": 4443
      }
    },
    {
      "name": "series_abs",
      "category": "KQL Function",
      "documentation": {
        "title": "series_abs()",
        "description": "Calculates the element-wise absolute value of the numeric series input.",
        "syntax": "`series_abs(`*series*`)`",
        "returnInfo": "Dynamic array of calculated absolute value. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values over which the absolute value function is applied. |",
        "example": "print arr = dynamic([-6.5,0,8.2])\n| extend arr_abs = series_abs(arr)",
        "sourceLength": 1551
      }
    },
    {
      "name": "series_acos",
      "category": "KQL Function",
      "documentation": {
        "title": "series_acos()",
        "description": "Calculates the element-wise arccosine function of the numeric series input.",
        "syntax": "`series_acos(`*series*`)`",
        "returnInfo": "Dynamic array of calculated arccosine function values. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values over which the arccosine function is applied. |",
        "example": "print arr = dynamic([-1,0,1])\n| extend arr_acos = series_acos(arr)",
        "sourceLength": 1596
      }
    },
    {
      "name": "series_add",
      "category": "KQL Function",
      "documentation": {
        "title": "series_add()",
        "description": "Calculates the element-wise addition of two numeric series inputs.",
        "syntax": "`series_add(`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of calculated element-wise add operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1, series2* | `dynamic` |  *True* | The numeric arrays to be element-wise added into a dynamic array result. |",
        "example": "range x from 1 to 3 step 1\n| extend y = x * 2\n| extend z = y * 2\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\n| extend s1_add_s2 = series_add(s1, s2)",
        "sourceLength": 1876
      }
    },
    {
      "name": "series_asin",
      "category": "KQL Function",
      "documentation": {
        "title": "series_asin()",
        "description": "Calculates the element-wise arcsine function of the numeric series input.",
        "syntax": "`series_asin(`*series*`)`",
        "returnInfo": "Dynamic array of calculated arcsine function values. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values over which the arcsine function is applied. |",
        "example": "print arr = dynamic([-1,0,1])\n| extend arr_asin = series_asin(arr)",
        "sourceLength": 1805
      }
    },
    {
      "name": "series_atan",
      "category": "KQL Function",
      "documentation": {
        "title": "series_atan()",
        "description": "Calculates the element-wise arctangent function of the numeric series input.",
        "syntax": "`series_atan(`*series*`)`",
        "returnInfo": "Dynamic array of calculated arctangent function values. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values over which the arctangent function is applied. |",
        "example": "print arr = dynamic([-1,0,1])\n| extend arr_atan = series_atan(arr)",
        "sourceLength": 1594
      }
    },
    {
      "name": "series_ceiling",
      "category": "KQL Function",
      "documentation": {
        "title": "series_ceiling()",
        "description": "Calculates the element-wise ceiling function of the numeric series input.",
        "syntax": "`series_ceiling(`*series*`)`",
        "returnInfo": "Dynamic array of the calculated ceiling function. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values over which the ceiling function is applied. |",
        "example": "print s = dynamic([-1.5,1,2.5])\n| extend s_ceiling = series_ceiling(s)",
        "sourceLength": 1579
      }
    },
    {
      "name": "series_cos",
      "category": "KQL Function",
      "documentation": {
        "title": "series_cos()",
        "description": "Calculates the element-wise cosine function of the numeric series input.",
        "syntax": "`series_cos(`*series*`)`",
        "returnInfo": "Dynamic array of calculated cosine function values. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values over which the cosine function is applied. |",
        "example": "print arr = dynamic([-1,0,1])\n| extend arr_cos = series_cos(arr)",
        "sourceLength": 1579
      }
    },
    {
      "name": "series_cosine_similarity",
      "category": "KQL Function",
      "documentation": {
        "title": "series_cosine_similarity()",
        "description": "Calculate the cosine similarity of two numerical vectors.\n\nThe function `series_cosine_similarity()` takes two numeric series as input, and calculates their cosine similarity.",
        "syntax": "`series_cosine_similarity(`*series1*`, `*series2*`, [`*magnitude1`, [`*magnitude2`]])`",
        "returnInfo": "Returns a value of type `real` whose value is the cosine similarity of *series1* with *series2*.\nIn case both series length isn't equal, the longer series will be truncated to the length of the shorter one.\nAny non-numeric element of the input series will be ignored.\n\n> [!NOTE]\n> If one or both input arrays are empty, the result will be `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1, series2* | `dynamic` |   *True* | Input arrays with numeric data. |\n| *magnitude1, magnitude2* | `real` |  | Optional magnitude of the first and the second vectors respectively. The magnitude is the square root of the dot product of the vector with itself. If the magnitude isn't provided, it will be calculated. |",
        "example": "datatable(s1:dynamic, s2:dynamic)\n[\n    dynamic([0.1,0.2,0.1,0.2]), dynamic([0.11,0.2,0.11,0.21]),\n    dynamic([0.1,0.2,0.1,0.2]), dynamic([1,2,3,4]),\n]\n| extend cosine_similarity=series_cosine_similarity(s1, s2)",
        "sourceLength": 2595
      }
    },
    {
      "name": "series_decompose",
      "category": "KQL Function",
      "documentation": {
        "title": "series_decompose()",
        "description": "Applies a decomposition transformation on a series.  \n\nTakes an expression containing a series (dynamic numerical array) as input and decomposes it to seasonal, trend, and residual components.",
        "syntax": "`series_decompose(`*Series* `,` [ *Seasonality*`,` *Trend*`,` *Test_points*`,` *Seasonality_threshold* ]`)`",
        "returnInfo": "The function returns the following respective series:\n\n* `baseline`: the predicted value of the series (sum of seasonal and trend components, see below).\n* `seasonal`: the series of the seasonal component:\n  * if the period isn't detected or is explicitly set to 0: constant 0.\n  * if detected or set to positive integer: median of the series points in the same phase\n* `trend`: the series of the trend component.\n* `residual`: the series of the residual component (that is, x - baseline).\n  \n>[!NOTE]\n> * Component execution order:\n>\n> 1. Extract the seasonal series\n> 1. Subtract it from x, generating the deseasonal series\n> 1. Extract the trend component from the deseasonal series\n> 1. Create the baseline = seasonal + trend\n> 1. Create the residual = x - baseline\n>\n> * Either seasonality and, or trend should be enabled. Otherwise, the function is redundant, and just returns baseline = 0 and residual = x.\n\n**More about series decomposition**\n\nThis method is usually applied to time series of metrics expected to manifest periodic and/or trend behavior. You can use the method to  forecast future metric values and/or detect anomalous values. The implicit assumption of this regression process is that apart from seasonal and trend behavior, the time series is stochastic and randomly distributed. Forecast future metric values from the seasonal and trend components while ignoring the residual part. Detect anomalous values based on outlier detection only on the residual part only. Further details can be found in the Time Series Decomposition chapter.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*Series*| `dynamic` |  *True* | An array of numeric values, typically the resulting output of make-series or make_list operators.|\n|*Seasonality*| `int` || Controls the seasonal analysis. The possible values are:<br/><br/>- `-1`: Autodetect seasonality using series_periods_detect. This is the default value.<br/>- Period: A positive integer specifying the expected period in number of bins. For example, if the series is in `1 - h` bins, a weekly period is 168 bins.<br/>- `0`: No seasonality, so skip extracting this component.|\n|*Trend*| `string` || Controls the trend analysis. The possible values are:<br/><br/>- `avg`: Define trend component as `average(x)`. This is the default.<br/>- `linefit`: Extract trend component using linear regression.<br/>- `none`: No trend, so skip extracting this component.<br/>\n|*Test_points*| `int` || A positive integer specifying the number of points at the end of the series to exclude from the learning, or regression, process. This parameter should be set for forecasting purposes. The default value is 0.|\n|*Seasonality_threshold*| `real` || The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is 0.6.<br/><br/>For more information, see series_periods_detect.|",
        "example": "",
        "sourceLength": 9164
      }
    },
    {
      "name": "series_decompose_anomalies",
      "category": "KQL Function",
      "documentation": {
        "title": "series_decompose_anomalies()",
        "description": "Anomaly Detection is based on series decomposition.\nFor more information, see series_decompose().\n\nThe function takes an expression containing a series (dynamic numerical array) as input, and extracts anomalous points with scores.",
        "syntax": "`series_decompose_anomalies (`*Series*`,` [ *Threshold*`,` *Seasonality*`,` *Trend*`,` *Test_points*`,` *AD_method*`,` *Seasonality_threshold* ]`)`",
        "returnInfo": "The function returns the following respective series:\n\n* `ad_flag`: A ternary series containing (+1, -1, 0) marking up/down/no anomaly respectively\n* `ad_score`: Anomaly score\n* `baseline`: The predicted value of the series, according to the decomposition\n\nThis function follows these steps:\n\n1. Calls series_decompose() with the respective parameters, to create the baseline and residuals series.\n1. Calculates ad_score series by applying series_outliers() with the chosen anomaly detection method on the residuals series.\n1. Calculates the ad_flag series by applying the threshold on the ad_score to mark up/down/no anomaly respectively.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*Series*| `dynamic` |  *True* | An array of numeric values, typically the resulting output of make-series or make_list operators.|\n|*Threshold*| `real` ||The anomaly threshold. The default is 1.5, k value, for detecting mild or stronger anomalies.|\n|*Seasonality*| `int` || Controls the seasonal analysis. The possible values are:<br/><br/>- `-1`: Autodetect seasonality using series_periods_detect. This is the default value.<br/>- Integer time period: A positive integer specifying the expected period in number of bins. For example, if the series is in `1h` bins, a weekly period is 168 bins.<br/>- `0`: No seasonality, so skip extracting this component.|\n|*Trend*| `string` || Controls the trend analysis. The possible values are:<br/><br/>- `avg`: Define trend component as `average(x)`. This is the default.<br/>- `linefit`: Extract trend component using linear regression.<br/>- `none`: No trend, so skip extracting this component.<br/>\n|*Test_points*| `int` || A positive integer specifying the number of points at the end of the series to exclude from the learning, or regression, process. This parameter should be set for forecasting purposes. The default value is 0.|\n|*AD_method*| `string` ||Controls the anomaly detection method on the residual time series, containing one of the following values:<br/><br/>- `ctukey`: Tukey’s fence test with custom 10th-90th percentile range. This is the default.<br/>- `tukey`: Tukey’s fence test with standard 25th-75th percentile range.<br/><br/>For more information on residual time series, see series_outliers.\n|*Seasonality_threshold*| `real` || The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is 0.6.<br/><br/>For more information, see series_periods_detect.|",
        "example": "",
        "sourceLength": 11753
      }
    },
    {
      "name": "series_decompose_forecast",
      "category": "KQL Function",
      "documentation": {
        "title": "series_decompose_forecast()",
        "description": "Forecast based on series decomposition.\n\nTakes an expression containing a series (dynamic numerical array) as input, and predicts the values of the last trailing points. For more information, see series_decompose.",
        "syntax": "`series_decompose_forecast(`*Series*`,` *Points*`,` [ *Seasonality*`,` *Trend*`,` *Seasonality_threshold* ]`)`",
        "returnInfo": "A dynamic array with the forecasted series.\n\n> [!NOTE]\n>\n> * The dynamic array of the original input series should include a number of *points* slots to be forecasted. The forecast is typically done by using make-series and specifying the end time in the range that includes the timeframe to forecast.\n> * Either seasonality or trend should be enabled, otherwise the function is redundant, and just returns a series filled with zeroes.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*Series*| `dynamic` |  *True* | An array of numeric values, typically the resulting output of make-series or make_list operators.|\n|*Points*| `int` | *True*| Specifies the number of points at the end of the series to predict, or forecast. These points are excluded from the learning, or regression, process.|\n|*Seasonality*| `int` || Controls the seasonal analysis. The possible values are:<br/><br/>- `-1`: Autodetect seasonality using series_periods_detect. This is the default value.<br/>- Period: A positive integer specifying the expected period in number of bins. For example, if the series is in `1 - h` bins, a weekly period is 168 bins.<br/>- `0`: No seasonality, so skip extracting this component.|\n|*Trend*| `string` || Controls the trend analysis. The possible values are:<br/><br/>- `avg`: Define trend component as `average(x)`. This is the default.<br/>- `linefit`: Extract trend component using linear regression.<br/>- `none`: No trend, so skip extracting this component.<br/>\n|*Seasonality_threshold*| `real` || The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is 0.6.<br/><br/>For more information, see series_periods_detect.|",
        "example": "let ts=range t from 1 to 24*7*4 step 1 // generate 4 weeks of hourly data\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\n| make-series y=max(y) on Timestamp from datetime(2018-03-01 05:00) to datetime(2018-03-01 05:00)+24*7*5h step 1h; // create a time series of 5 weeks (last week is empty)\nts \n| extend y_forcasted = series_decompose_forecast(y, 24*7)  // forecast a week forward\n| render timechart",
        "sourceLength": 4968
      }
    },
    {
      "name": "series_divide",
      "category": "KQL Function",
      "documentation": {
        "title": "series_divide()",
        "description": "Calculates the element-wise division of two numeric series inputs.",
        "syntax": "`series_divide(`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of calculated element-wise divide operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\n\nNote: the result series is of double type, even if the inputs are integers. Division by zero follows the double division by zero (e.g. 2/0 yields double(+inf)).",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1, series2* | `dynamic` |  *True* | The numeric arrays over which to calculate the element-wise division. The first array is to be divided by the second. |",
        "example": "range x from 1 to 3 step 1\n| extend y = x * 2\n| extend z = y * 2\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\n| extend s1_divide_s2 = series_divide(s1, s2)",
        "sourceLength": 2143
      }
    },
    {
      "name": "series_dot_product",
      "category": "KQL Function",
      "documentation": {
        "title": "series_dot_product()",
        "description": "Calculates the dot product of two numeric series.\n\nThe function `series_dot_product()` takes two numeric series as input, and calculates their dot product.",
        "syntax": "`series_dot_product(`*series*`, `*numeric*`)`\n\n`series_dot_product(`*numeric*`, `*series*`)`\n\n> [!NOTE]\n> The alternate syntax shows that one of the two function arguments can be a numerical scalar.\n>\n> This numerical scalar will be broadcasted to a vector whose length equals the length of the corresponding numeric series.\n>\n> For example, `series_dot_product([1, 2, 3], 10)` will be treated as `series_dot_product([1, 2, 3], [10, 10, 10])`.",
        "returnInfo": "Returns a value of type `real` whose value is the sum over the product of each element of *series1* with the corresponding element of *series2*.\nIn case both series length isn't equal, the longer series will be truncated to the length of the shorter one.\nAny non-numeric element of the input series will be ignored.\n\n> [!NOTE]\n> If one or both input arrays are empty, the result will be `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1, series2* | `dynamic` |   *True* | Input arrays with numeric data, to be element-wise multiplied and then summed into a value of type `real`.",
        "example": "range x from 1 to 3 step 1 \n| extend y = x * 2\n| extend z = y * 2\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\n| extend s1_dot_product_s2 = series_dot_product(s1, s2)\n\nrange x from 1 to 3 step 1 \n| extend y = x * 2\n| extend z = y * 2\n| project s1 = pack_array(x,y,z), s2 = x\n| extend s1_dot_product_s2 = series_dot_product(s1, s2)",
        "sourceLength": 3395
      }
    },
    {
      "name": "series_equals",
      "category": "KQL Function",
      "documentation": {
        "title": "series_equals()",
        "description": "Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.",
        "syntax": "`series_equals (`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of booleans containing the calculated element-wise equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1, series2* | `dynamic` |  *True* | The numeric arrays to be element-wise compared. |",
        "example": "print s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\n| extend s1_equals_s2 = series_equals(s1, s2)",
        "sourceLength": 1949
      }
    },
    {
      "name": "series_exp",
      "category": "KQL Function",
      "documentation": {
        "title": "series_exp()",
        "description": "Calculates the element-wise base-e exponential function (e^x) of the numeric series input.",
        "syntax": "`series_exp(`*series*`)`",
        "returnInfo": "Dynamic array of calculated exponential function. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values whose elements are applied as the exponent in the exponential function. |",
        "example": "print s = dynamic([1,2,3])\n| extend s_exp = series_exp(s)",
        "sourceLength": 1629
      }
    },
    {
      "name": "series_fft",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fft()",
        "description": "Applies the Fast Fourier Transform (FFT) on a series.  \n\nThe series_fft() function takes a series of complex numbers in the time/spatial domain and transforms it to the frequency domain using the Fast Fourier Transform. The transformed complex series represents the magnitude and phase of the frequencies appearing in the original series. Use the complementary function series_ifft to transform from the frequency domain back to the time/spatial domain.",
        "syntax": "`series_fft(`*x_real* [`,` *x_imaginary*]`)`",
        "returnInfo": "The function returns the complex inverse fft in two series. The first series for the real component and the second one for the imaginary component.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x_real* | `dynamic` |  *True* | A numeric array representing the real component of the series to transform.|\n| *x_imaginary* | `dynamic` | | A similar array representing the imaginary component of the series. This parameter should only be specified if the input series contains complex numbers.|",
        "example": "let sinewave=(x:double, period:double, gain:double=1.0, phase:double=0.0)\n    {\n        gain*sin(2*pi()/period*(x+phase))\n    }\n    ;\n    let n=128;      //  signal length\n    range x from 0 to n-1 step 1 | extend yr=sinewave(x, 8), yi=sinewave(x, 32)\n    | summarize x=make_list(x), y_real=make_list(yr), y_imag=make_list(yi)\n    | extend (fft_y_real, fft_y_imag) = series_fft(y_real, y_imag)\n    | render linechart with(ysplit=panels)\n\n    let sinewave=(x:double, period:double, gain:double=1.0, phase:double=0.0)\n    {\n        gain*sin(2*pi()/period*(x+phase))\n    }\n    ;\n    let n=128;      //  signal length\n    range x from 0 to n-1 step 1 | extend yr=sinewave(x, 8), yi=sinewave(x, 32)\n    | summarize x=make_list(x), y_real=make_list(yr), y_imag=make_list(yi)\n    | extend (fft_y_real, fft_y_imag) = series_fft(y_real, y_imag)\n    | extend (y_real2, y_image2) = series_ifft(fft_y_real, fft_y_imag)\n    | project-away fft_y_real, fft_y_imag   //  too many series for linechart with panels\n    | render linechart with(ysplit=panels)",
        "sourceLength": 4633
      }
    },
    {
      "name": "series_fill_backward",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fill_backward()",
        "description": "Performs a backward fill interpolation of missing values in a series.\n\nAn expression containing dynamic numerical array is the input. The function replaces all instances of missing_value_placeholder with the nearest value from its right side (other than missing_value_placeholder), and returns the resulting array. The rightmost instances of missing_value_placeholder are preserved.",
        "syntax": "`series_fill_backward(`*series*`[,`*missing_value_placeholder*`])`",
        "returnInfo": "*series* with all instances of *missing_value_placeholder* filled backwards.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *missing_value_placeholder* | scalar | | Specifies a placeholder for missing values. The default value is `double(`*null*`)`. The value can be of any type that converts to actual element types. `double`(*null*), `long`(*null*), and `int`(*null*) have the same meaning.|\n\n> [!NOTE]\n>\n> * If you create *series* using the make-series operator, specify *null* as the default value to use interpolation functions like `series_fill_backward()` afterwards. See explanation.\n> * If *missing_value_placeholder* is `double`(*null*), or omitted, then a result can contain *null* values. To fill these *null* values, use other interpolation functions. Only series_outliers() supports *null* values in input arrays.\n> * `series_fill_backward()` preserves the original type of the array elements.",
        "example": "let data = datatable(arr: dynamic)\n    [\n    dynamic([111, null, 36, 41, null, null, 16, 61, 33, null, null])   \n];\ndata \n| project\n    arr, \n    fill_backward = series_fill_backward(arr)",
        "sourceLength": 3595
      }
    },
    {
      "name": "series_fill_const",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fill_const()",
        "description": "Replaces missing values in a series with a specified constant value.\n\nTakes an expression containing dynamic numerical array as input, replaces all instances of missing_value_placeholder with the specified constant_value and returns the resulting array.",
        "syntax": "`series_fill_const(`*series*`,` *constant_value*`,` [ *missing_value_placeholder* ]`)`",
        "returnInfo": "*series* with all instances of *missing_value_placeholder* replaced with *constant_value*.\n\n> [!NOTE]\n>\n> * If you create *series* using the make-series operator, specify *null* as the default value to use interpolation functions like `series_fill_const()` afterwards. See explanation.\n> * If *missing_value_placeholder* is `double`(*null*), or omitted, then a result contains *null* values. To fill these *null* values, use other interpolation functions. Only series_outliers() supports *null* values in input arrays.\n> * `series_fill_const()` preserves the original type of the array elements.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *constant_value* | scalar |  *True* | The value used to replace the missing values.|\n| *missing_value_placeholder* | scalar | | Specifies a placeholder for missing values. The default value is `double(`*null*`)`. The value can be of any type that is converted to actual element types. `double`(*null*), `long`(*null*), and `int`(*null*) have the same meaning.|",
        "example": "let data = datatable(arr: dynamic)\n    [\n    dynamic([111, null, 36, 41, 23, null, 16, 61, 33, null, null])   \n];\ndata \n| project\n    arr, \n    fill_const1 = series_fill_const(arr, 0.0),\n    fill_const2 = series_fill_const(arr, -1)",
        "sourceLength": 3650
      }
    },
    {
      "name": "series_fill_forward",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fill_forward()",
        "description": "Performs a forward fill interpolation of missing values in a series.\n\nAn expression containing dynamic numerical array is the input. The function replaces all instances of missing_value_placeholder with the nearest value from its left side other than missing_value_placeholder, and returns the resulting array. The leftmost instances of missing_value_placeholder are preserved.",
        "syntax": "`series_fill_forward(`*series*`,` [ *missing_value_placeholder* ]`)`",
        "returnInfo": "*series* with all instances of *missing_value_placeholder* filled forwards.\n\n> [!NOTE]\n>\n> * If you create *series* using the make-series operator, specify *null* as the default value to use interpolation functions like `series_fill_forward()` afterwards. See explanation.\n> * If *missing_value_placeholder* is `double`(*null*), or omitted, then a result can contain *null* values. To fill these *null* values, use other interpolation functions. Only series_outliers() supports *null* values in input arrays.\n> * `series_fill_forward()` preserves the original type of the array elements.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *missing_value_placeholder* | scalar | | Specifies a placeholder for missing values. The default value is `double(`*null*`)`. The value can be of any type that can convert to actual element types. `double`(*null*), `long`(*null*), and `int`(*null*) have the same meaning.|",
        "example": "let data = datatable(arr: dynamic)\n    [\n    dynamic([null, null, 36, 41, null, null, 16, 61, 33, null, null])   \n];\ndata \n| project\n    arr, \n    fill_forward = series_fill_forward(arr)",
        "sourceLength": 3612
      }
    },
    {
      "name": "series_fill_linear",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fill_linear()",
        "description": "Linearly interpolates missing values in a series.\n\nTakes an expression containing dynamic numerical array as input, does linear interpolation for all instances of missing_value_placeholder, and returns the resulting array. If the beginning and end of the array contain missing_value_placeholder, then it's replaced with the nearest value other than missing_value_placeholder. This feature can be turned off. If the whole array consists of the missing_value_placeholder, the array is filled with constant_value, or 0 if not specified.",
        "syntax": "`series_fill_linear(`*series*`,` [ *missing_value_placeholder* [`,`*fill_edges* [`,` *constant_value* ]]]`)`",
        "returnInfo": "A series linear interpolation of *series* using the specified parameters. If *series* contains only `int` or `long` elements, then the linear interpolation returns rounded interpolated values rather than exact ones.\n\n> [!NOTE]\n>\n> * If you create *series* using the make-series operator, specify *null* as the default value to use interpolation functions like `series_fill_linear()` afterwards. See explanation.\n> * If *missing_value_placeholder* is `double`(*null*), or omitted, then a result can contain *null* values. To fill these *null* values, use other interpolation functions. Only series_outliers() supports *null* values in input arrays.\n> * `series_fill_linear()` preserves the original type of the array elements.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *missing_value_placeholder* | scalar | | Specifies a placeholder for missing values. The default value is `double(`*null*`)`. The value can be of any type that can convert to actual element types. `double`(*null*), `long`(*null*), and `int`(*null*) have the same meaning.|\n| *fill_edges* | `bool` | | Indicates whether *missing_value_placeholder* at the start and end of the array should be replaced with nearest value. `true` by default. If set to `false`, then *missing_value_placeholder* at the start and end of the array is preserved.|\n| *constant_value* | scalar | | Relevant only for arrays that entirely consist of *null* values. This parameter specifies a constant value with which to fill the series. Default value is 0. Setting this parameter it to `double(`*null*`)` preserves the *null* values.|",
        "example": "let data = datatable(arr: dynamic)\n    [\n    dynamic([null, 111.0, null, 36.0, 41.0, null, null, 16.0, 61.0, 33.0, null, null]), // Array of double    \n    dynamic([null, 111, null, 36, 41, null, null, 16, 61, 33, null, null]), // Similar array of int\n    dynamic([null, null, null, null])                                                   // Array with missing values only\n];\ndata\n| project\n    arr, \n    without_args = series_fill_linear(arr),\n    with_edges = series_fill_linear(arr, double(null), true),\n    wo_edges = series_fill_linear(arr, double(null), false),\n    with_const = series_fill_linear(arr, double(null), true, 3.14159)",
        "sourceLength": 5667
      }
    },
    {
      "name": "series_fir",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fir()",
        "description": "Applies a Finite Impulse Response (FIR) filter on a series.  \n\nThe function takes an expression containing a dynamic numerical array as input and applies a Finite Impulse Response filter. By specifying the `filter` coefficients, it can be used for calculating a moving average, smoothing, change-detection, and many more use cases. The function takes the column containing the dynamic array and a static dynamic array of the filter's coefficients as input, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.",
        "syntax": "`series_fir(`*series*`,` *filter* [`,` *normalize*[`,` *center*]]`)`",
        "returnInfo": "A new dynamic array column containing the filtered output.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *filter* | `dynamic` |  *True* | An array of numeric values containing the coefficients of the filter.|\n| *normalize* | `bool` | | Indicates whether the filter should be normalized. That is, divided by the sum of the coefficients. If filter contains negative values, then *normalize* must be specified as `false`, otherwise result will be `null`. If not specified, then a default value of `true` is assumed, depending on the presence of negative values in the *filter*. If *filter* contains at least one negative value, then *normalize* is assumed to be `false`.|\n| *center* | `bool` | | Indicates whether the filter is applied symmetrically on a time window before and after the current point, or on a time window from the current point backwards. By default, center is `false`, which fits the scenario of streaming data so that we can only apply the filter on the current and older points. However, for ad-hoc processing you can set it to `true`, keeping it synchronized with the time series. See examples below. This parameter controls the filter’s group delay.|\n\n> [!TIP]\n> Normalization is a convenient way to make sure that the sum of the coefficients is 1. When *normalized* is `true`, the filter doesn't amplify or attenuate the series. For example, the moving average of four bins could be specified by *filter*=[1,1,1,1] and *normalized*=`true`, which is simpler than typing [0.25,0.25.0.25,0.25].",
        "example": "range t from bin(now(), 1h) - 23h to bin(now(), 1h) step 1h\n| summarize t=make_list(t)\n| project\n    id='TS',\n    val=dynamic([0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 20, 40, 100, 40, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0]),\n    t\n| extend\n    5h_MovingAvg=series_fir(val, dynamic([1, 1, 1, 1, 1])),\n    5h_MovingAvg_centered=series_fir(val, dynamic([1, 1, 1, 1, 1]), true, true)\n| render timechart\n\nrange t from bin(now(), 1h) - 11h to bin(now(), 1h) step 1h\n| summarize t=make_list(t)\n| project id='TS', t, value=dynamic([0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3])\n| extend diff=series_fir(value, dynamic([1, -1]), false, false)\n| render timechart",
        "sourceLength": 5475
      }
    },
    {
      "name": "series_fit_2lines",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fit_2lines()",
        "description": "Applies a two segmented linear regression on a series, returning multiple columns.  \n\nTakes an expression containing dynamic numerical array as input and applies a two segmented linear regression in order to identify and quantify a trend change in a series. The function iterates on the series indexes. In each iteration, the function splits the series to two parts, fits a separate line (using series_fit_line()) to each part, and calculates the total r-square. The best split is the one that maximized r-square; the function returns its parameters:\n\n|Parameter  |Description  |\n|:---------|:---------|\n|`rsquare`     | R-square is standard measure of the fit quality. It's a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and don't fit any line.        |\n|`split_idx`     |   The index of breaking point to two segments (zero-based).      |\n|`variance`     | Variance of the input data.        |\n|`rvariance`     | Residual variance, which is the variance between the input data values the approximated ones (by the two line segments).        |\n|`line_fit`     | Numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. It's mainly used for charting.        |\n|`right_rsquare`     | R-square of the line on the right side of the split, see series_fit_line().        |\n|`right_slope`     | Slope of the right approximated line (of the form y=ax+b).         |\n|`right_interception`     |  Interception of the approximated left line (b from y=ax+b).       |\n|`right_variance`    | Variance of the input data on the right side of the split.        |\n|`right_rvariance`     | Residual variance of the input data on the right side of the split.        |\n|`left_rsquare`     | R-square of the line on the left side of the split, see series_fit_line().        |\n|`left_slope`    | Slope of the left approximated line (of the form y=ax+b).        |\n|`left_interception`     |   Interception of the approximated left line (of the form y=ax+b).      |\n|`left_variance`     | Variance of the input data on the left side of the split.        |\n|`left_rvariance`     | Residual variance of the input data on the left side of the split.        |\n\n> [!NOTE]\n> This function returns multiple columns an so cannot be used as an argument for another function.",
        "syntax": "project `series_fit_2lines(`*series*`)`\n\n* Will return all mentioned above columns with the following names: series_fit_2lines_x_rsquare, series_fit_2lines_x_split_idx etc.\n\nproject (rs, si, v)=`series_fit_2lines(`*series*`)`\n\n* Will return the following columns: rs (r-square), si (split index), v (variance) and the rest will look like series_fit_2lines_x_rvariance, series_fit_2lines_x_line_fit and etc.\n\nextend (rs, si, v)=`series_fit_2lines(`*series*`)`\n\n* Will return only: rs (r-square), si (split index) and v (variance).",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n\n> [!TIP]\n> The most convenient way of using this function is applying it to the results of make-series operator.",
        "example": "print\n    id=' ',\n    x=range(bin(now(), 1h) - 11h, bin(now(), 1h), 1h),\n    y=dynamic([1, 2.2, 2.5, 4.7, 5.0, 12, 10.3, 10.3, 9, 8.3, 6.2])\n| extend\n    (Slope, Interception, RSquare, Variance, RVariance, LineFit)=series_fit_line(y),\n    (RSquare2, SplitIdx, Variance2, RVariance2, LineFit2)=series_fit_2lines(y)\n| project id, x, y, LineFit, LineFit2\n| render timechart",
        "sourceLength": 5151
      }
    },
    {
      "name": "series_fit_2lines_dynamic",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fit_2lines_dynamic()",
        "description": "Applies two segments linear regression on a series, returning a dynamic object.  \n\nTakes an expression containing dynamic numerical array as input and applies two segments linear regression in order to identify and quantify trend changes in a series. The function iterates on the series indexes. In each iteration, it splits the series to two parts, and fits a separate line using series_fit_line() or series_fit_line_dynamic(). The function fits the lines to each of the two parts, and calculates the total R-squared value. The best split is the one that maximizes R-squared. The function returns its parameters in dynamic value with the following content:\n\n* `rsquare`: R-squared is a standard measure of the fit quality. It's a number in the range of [0-1], where 1 is the best possible fit, and 0 means the data is unordered and don't fit any line.\n* `split_idx`: the index of breaking point to two segments (zero-based).\n* `variance`: variance of the input data.\n* `rvariance`: residual variance that is the variance between the input data values the approximated ones (by the two line segments).\n* `line_fit`: numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. It's used for charting.\n* `right.rsquare`: r-square of the line on the right side of the split, see series_fit_line() or series_fit_line_dynamic().\n* `right.slope`: slope of the right approximated line (of the form y=ax+b).\n* `right.interception`: interception of the approximated left line (b from y=ax+b).\n* `right.variance`: variance of the input data on the right side of the split.\n* `right.rvariance`: residual variance of the input data on the right side of the split.\n* `left.rsquare`: r-square of the line on the left side of the split, see [series_fit_line()].(series-fit-line-function.md) or series_fit_line_dynamic().\n* `left.slope`: slope of the left approximated line (of the form y=ax+b).\n* `left.interception`: interception of the approximated left line (of the form y=ax+b).\n* `left.variance`: variance of the input data on the left side of the split.\n* `left.rvariance`: residual variance of the input data on the left side of the split.\n\nThis operator is similar to series_fit_2lines. Unlike `series-fit-2lines`, it returns a dynamic bag.",
        "syntax": "`series_fit_2lines_dynamic(`*series*`)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n\n> [!TIP]\n> The most convenient way of using this function is applying it to the results of the make-series operator.",
        "example": "print\n    id=' ',\n    x=range(bin(now(), 1h) - 11h, bin(now(), 1h), 1h),\n    y=dynamic([1, 2.2, 2.5, 4.7, 5.0, 12, 10.3, 10.3, 9, 8.3, 6.2])\n| extend\n    LineFit=series_fit_line_dynamic(y).line_fit,\n    LineFit2=series_fit_2lines_dynamic(y).line_fit\n| project id, x, y, LineFit, LineFit2\n| render timechart",
        "sourceLength": 4637
      }
    },
    {
      "name": "series_fit_line",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fit_line()",
        "description": "Applies linear regression on a series, returning multiple columns.  \n\nTakes an expression containing dynamic numerical array as input and does linear regression to find the line that best fits it. This function should be used on time series arrays, fitting the output of make-series operator. The function generates the following columns:\n\n* `rsquare`: r-square is a standard measure of the fit quality. The value's a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and doesn't fit any line.\n* `slope`: Slope of the approximated line (\"a\" from y=ax+b).\n* `variance`: Variance of the input data.\n* `rvariance`: Residual variance that is the variance between the input data values the approximated ones.\n* `interception`: Interception of the approximated line (\"b\" from y=ax+b).\n* `line_fit`: Numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. The value's used for charting.",
        "syntax": "`series_fit_line(`*series*`)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n\n> [!TIP]\n> The most convenient way of using this function is to apply it to the results of make-series operator.",
        "example": "print\n    id=' ',\n    x=range(bin(now(), 1h) - 11h, bin(now(), 1h), 1h),\n    y=dynamic([2, 5, 6, 8, 11, 15, 17, 18, 25, 26, 30, 30])\n| extend (RSquare, Slope, Variance, RVariance, Interception, LineFit)=series_fit_line(y)\n| render timechart",
        "sourceLength": 3438
      }
    },
    {
      "name": "series_fit_line_dynamic",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fit_line_dynamic()",
        "description": "Applies linear regression on a series, returning dynamic object.  \n\nTakes an expression containing dynamic numerical array as input, and does linear regression to find the line that best fits it. This function should be used on time series arrays, fitting the output of make-series operator. It generates a dynamic value with the following content:\n\n* `rsquare`: r-square is a standard measure of the fit quality. It's a number in the range [0-1], where 1 is the best possible fit, and 0 means the data is unordered and doesn't fit any line\n* `slope`: Slope of the approximated line (the *a*-value from *y=ax+b*)\n* `variance`: Variance of the input data\n* `rvariance`: Residual variance that is the variance between the input data values and the approximated ones.\n* `interception`: Interception of the approximated line (the *b*-value from *y=ax+b*)\n* `line_fit`: Numerical array containing a series of values of the best fit line. The series length is equal to the length of the input array. It's used mainly for charting.\n\nThis operator is similar to series_fit_line, but unlike `series-fit-line` it returns a dynamic bag.",
        "syntax": "`series_fit_line_dynamic(`*series*`)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n\n> [!TIP]\n> The most convenient way of using this function is by applying it to the results of make-series operator.",
        "example": "print\n    id=' ',\n    x=range(bin(now(), 1h) - 11h, bin(now(), 1h), 1h),\n    y=dynamic([2, 5, 6, 8, 11, 15, 17, 18, 25, 26, 30, 30])\n| extend fit=series_fit_line_dynamic(y)\n| extend\n    RSquare=fit.rsquare,\n    Slope=fit.slope,\n    Variance=fit.variance,\n    RVariance=fit.rvariance,\n    Interception=fit.interception,\n    LineFit=fit.line_fit\n| render timechart",
        "sourceLength": 3804
      }
    },
    {
      "name": "series_fit_poly",
      "category": "KQL Function",
      "documentation": {
        "title": "series_fit_poly()",
        "description": "Applies a polynomial regression from an independent variable (x_series) to a dependent variable (y_series). This function takes a table containing multiple series (dynamic numerical arrays) and generates the best fit high-order polynomial for each series using polynomial regression.\n\n> [!TIP]\n>\n> * For linear regression of an evenly spaced series, as created by make-series operator, use the simpler function series_fit_line(). See Example 2.\n> * If *x_series* is supplied, and the regression is done for a high degree, consider normalizing to the [0-1] range. See Example 3.\n> * If *x_series* is of datetime type, it must be converted to double and normalized. See Example 3.\n> * For reference implementation of polynomial regression using inline Python, see series_fit_poly_fl().",
        "syntax": "`T | extend  series_fit_poly(`*y_series* [`,` *x_series*`,` *degree* ]`)`",
        "returnInfo": "The `series_fit_poly()` function returns the following columns:\n\n* `rsquare`: r-square is a standard measure of the fit quality. The value's a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and doesn't fit any line.\n* `coefficients`:  Numerical array holding the coefficients of the best fitted polynomial with the given degree, ordered from the highest power coefficient to the lowest.\n* `variance`: Variance of the dependent variable (y_series).\n* `rvariance`: Residual variance that is the variance between the input data values the approximated ones.\n* `poly_fit`: Numerical array holding a series of values of the best fitted polynomial. The series length is equal to the length of the dependent variable (y_series). The value's used for charting.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *y_series* | `dynamic` |  *True* | An array of numeric values containing the dependent variable. |\n| *x_series* | `dynamic` | | An array of numeric values containing the independent variable. Required only for unevenly spaced series. If not specified, it's set to a default value of [1, 2, ..., length(*y_series*)].|\n| *degree* | | | The required order of the polynomial to fit. For example, 1 for linear regression, 2 for quadratic regression, and so on. Defaults to 1, which indicates linear regression.|",
        "example": "",
        "sourceLength": 7262
      }
    },
    {
      "name": "series_floor",
      "category": "KQL Function",
      "documentation": {
        "title": "series_floor()",
        "description": "Calculates the element-wise floor function of the numeric series input.",
        "syntax": "`series_floor(`*series*`)`",
        "returnInfo": "Dynamic array of the calculated floor function. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values on which the floor function is applied.|",
        "example": "print s = dynamic([-1.5,1,2.5])\n| extend s_floor = series_floor(s)",
        "sourceLength": 1551
      }
    },
    {
      "name": "series_greater",
      "category": "KQL Function",
      "documentation": {
        "title": "series_greater()",
        "description": "Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.",
        "syntax": "`series_greater(`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of booleans containing the calculated element-wise greater logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | The arrays of numeric values to be element-wise compared.|",
        "example": "print s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\n| extend s1_greater_s2 = series_greater(s1, s2)",
        "sourceLength": 1972
      }
    },
    {
      "name": "series_greater_equals",
      "category": "KQL Function",
      "documentation": {
        "title": "series_greater_equals()",
        "description": "Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.",
        "syntax": "`series_greater_equals(`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of booleans containing the calculated element-wise greater or equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | The arrays of numeric values to be element-wise compared.|",
        "example": "print s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\n| extend s1_greater_equals_s2 = series_greater_equals(s1, s2)",
        "sourceLength": 2059
      }
    },
    {
      "name": "series_ifft",
      "category": "KQL Function",
      "documentation": {
        "title": "series_ifft()",
        "description": "Applies the Inverse Fast Fourier Transform (IFFT) on a series.  \n\nThe series_ifft() function takes a series of complex numbers in the frequency domain and transforms it back to the time/spatial domain using the Fast Fourier Transform. This function is the complementary function of series_fft. Commonly the original series is transformed to the frequency domain for spectral processing and then back to the time/spatial domain.",
        "syntax": "`series_ifft(`*fft_real* [`,` *fft_imaginary*]`)`",
        "returnInfo": "The function returns the complex inverse fft in two series. The first series for the real component and the second one for the imaginary component.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *fft_real* | `dynamic` |  *True* | An array of numeric values representing the real component of the series to transform.|\n| *fft_imaginary* | `dynamic` | | An array of numeric values representing the imaginary component of the series. This parameter should be specified only if the input series contains complex numbers.|",
        "example": "",
        "sourceLength": 1858
      }
    },
    {
      "name": "series_iir",
      "category": "KQL Function",
      "documentation": {
        "title": "series_iir()",
        "description": "Applies an Infinite Impulse Response filter on a series.  \n\nThe function takes an expression containing dynamic numerical array as input, and applies an Infinite Impulse Response filter. By specifying the filter coefficients, you can use the function to:\n\n* calculate the cumulative sum of the series\n* apply smoothing operations\n* apply various high-pass, band-pass, and low-pass filters\n\nThe function takes as input the column containing the dynamic array and two static dynamic arrays of the filter's *denominators* and *numerators* coefficients, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.",
        "syntax": "`series_iir(`*series*`,` *numerators* `,` *denominators*`)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values, typically the resulting output of make-series or make_list operators.|\n| *numerators* | `dynamic` |  *True* | An array of numeric values, containing the numerator coefficients of the filter.|\n| *denominators* | `dynamic` |  *True* | An array of numeric values, containing the denominator coefficients of the filter.|\n\n> [!IMPORTANT]\n> The first element of `a` (that is, `a[0]`) mustn't be zero, to avoid division by 0. See the following formula.\n\n* Consider an input array X, and coefficients arrays a and b of lengths n_a and n_b respectively. The transfer function of the filter that will generate the output array Y, is defined by:\n\n<div align=\"center\">\nY<sub>i</sub> = a<sub>0</sub><sup>-1</sup>(b<sub>0</sub>X<sub>i</sub>\n + b<sub>1</sub>X<sub>i-1</sub> + ... + b<sub>n<sub>b</sub>-1</sub>X<sub>i-n<sub>b</sub>-1</sub>\n - a<sub>1</sub>Y<sub>i-1</sub>-a<sub>2</sub>Y<sub>i-2</sub> - ... - a<sub>n<sub>a</sub>-1</sub>Y<sub>i-n<sub>a</sub>-1</sub>)\n</div>",
        "example": "let x = range(1.0, 10, 1);\nprint x=x, y = series_iir(x, dynamic([1]), dynamic([1,-1]))\n| mv-expand x, y\n\nlet vector_sum=(x: dynamic) {\n    let y=array_length(x) - 1;\n    todouble(series_iir(x, dynamic([1]), dynamic([1, -1]))[y])\n};\nprint d=dynamic([0, 1, 2, 3, 4])\n| extend dd=vector_sum(d)",
        "sourceLength": 4230
      }
    },
    {
      "name": "series_less",
      "category": "KQL Function",
      "documentation": {
        "title": "series_less()",
        "description": "Calculates the element-wise less (`<`) logic operation of two numeric series inputs.",
        "syntax": "`series_less(`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of booleans containing the calculated element-wise less logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | The arrays of numeric values to be element-wise compared.|",
        "example": "print s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\n| extend s1_less_s2 = series_less(s1, s2)",
        "sourceLength": 1938
      }
    },
    {
      "name": "series_less_equals",
      "category": "KQL Function",
      "documentation": {
        "title": "series_less_equals()",
        "description": "Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.",
        "syntax": "`series_less_equals(`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of booleans containing the calculated element-wise less or equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | The arrays of numeric values to be element-wise compared.|",
        "example": "print s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\n| extend s1_less_equals_s2 = series_less_equals(s1, s2)",
        "sourceLength": 2023
      }
    },
    {
      "name": "series_log",
      "category": "KQL Function",
      "documentation": {
        "title": "series_log()",
        "description": "Calculates the element-wise natural logarithm function (base-e) of the numeric series input.",
        "syntax": "`series_log(`*series*`)`",
        "returnInfo": "Dynamic array of the calculated natural logarithm function. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values on which the natural logarithm function is applied.|",
        "example": "print s = dynamic([1,2,3])\n| extend s_log = series_log(s)",
        "sourceLength": 1611
      }
    },
    {
      "name": "series_magnitude",
      "category": "KQL Function",
      "documentation": {
        "title": "series_magnitude()",
        "description": "Calculates the magnitude#Euclidean_vector_space) of series elements. This is equivalent to the square root of the dot product of the series with itself.",
        "syntax": "`series_magnitude(`*series*`)`",
        "returnInfo": "Returns a double type value representing the magnitude of the series.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | Array of numeric values. |",
        "example": "print arr=dynamic([1,2,3,4]) \n| extend series_magnitude=series_magnitude(arr)",
        "sourceLength": 1756
      }
    },
    {
      "name": "series_multiply",
      "category": "KQL Function",
      "documentation": {
        "title": "series_multiply()",
        "description": "Calculates the element-wise multiplication of two numeric series inputs.",
        "syntax": "`series_multiply(`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of calculated element-wise multiplication operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | The arrays of numeric values to be element-wise multiplied.|",
        "example": "range x from 1 to 3 step 1\n| extend y = x * 2\n| extend z = y * 2\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\n| extend s1_multiply_s2 = series_multiply(s1, s2)",
        "sourceLength": 1932
      }
    },
    {
      "name": "series_not_equals",
      "category": "KQL Function",
      "documentation": {
        "title": "series_not_equals()",
        "description": "Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.",
        "syntax": "`series_not_equals(`*series1*`,` *series2*`)`",
        "returnInfo": "Dynamic array of booleans containing the calculated element-wise not equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | The arrays of numeric values to be element-wise compared.|",
        "example": "print s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\n| extend s1_not_equals_s2 = series_not_equals(s1, s2)",
        "sourceLength": 2006
      }
    },
    {
      "name": "series_outliers",
      "category": "KQL Function",
      "documentation": {
        "title": "series_outliers()",
        "description": "Scores anomaly points in a series.\n\nThe function takes an expression with a dynamic numerical array as input, and generates a dynamic numeric array of the same length. Each value of the array indicates a score of a possible anomaly, using \"Tukey's test\". A value greater than 1.5 in the same element of the input indicates a rise anomaly. A value less than -1.5 indicates a decline anomaly.",
        "syntax": "`series_outliers(`*series* [`,` *kind* ] [`,` *ignore_val* ] [`,` *min_percentile* ] [`,` *max_percentile* ]`)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *kind* | `string` | | The algorithm to use for outlier detection. The supported options are `\"tukey\"`, which is traditional \"Tukey\", and  `\"ctukey\"`, which is custom \"Tukey\". The default is `\"ctukey\"`.|\n| *ignore_val* | int, long, or real | | A numeric value indicating the missing values in the series. The default is `double(`*null*`)`. The score of nulls and ignore values is set to `0`.|\n| *min_percentile* | int, long, or real | | The minimum percentile to use to calculate the normal inter-quantile range. The default is 10. The value must be in the range `[2.0, 98.0]`. This parameter is only relevant for the `\"ctukey\"` *kind*.|\n| *max_percentile* | int, long, or real | | The maximum percentile to use to calculate the normal inter-quantile range. The default is 90. The value must be in the range `[2.0, 98.0]`. This parameter is only relevant for the `\"ctukey\"` *kind*.|\n\nThe following table describes differences between `\"tukey\"` and `\"ctukey\"`:\n\n| Algorithm | Default quantile range | Supports custom quantile range |\n|:-----------|:----------------------- |:--------------------------------|\n| `\"tukey\"` | 25% / 75%              | No                             |\n| `\"ctukey\"`| 10% / 90%              | Yes                            |\n\n> [!TIP]\n> The best way to use this function is to apply it to the results of the make-series operator.",
        "example": "range x from 0 to 364 step 1 \n| extend t = datetime(2023-01-01) + 1d*x\n| extend y = rand() * 10\n| extend y = iff(monthofyear(t) != monthofyear(prev(t)), y+20, y) // generate a sample series with outliers at first day of each month\n| summarize t = make_list(t), series = make_list(y)\n| extend outliers=series_outliers(series)\n| extend pos_anomalies = array_iff(series_greater_equals(outliers, 1.5), 1, 0)\n| render anomalychart with(xcolumn=t, ycolumns=series, anomalycolumns=pos_anomalies)",
        "sourceLength": 4065
      }
    },
    {
      "name": "series_pearson_correlation",
      "category": "KQL Function",
      "documentation": {
        "title": "series_pearson_correlation()",
        "description": "Calculates the pearson correlation coefficient of two numeric series inputs.\n\nSee: Pearson correlation coefficient.",
        "syntax": "`series_pearson_correlation(`*series1*`,` *series2*`)`",
        "returnInfo": "The calculated Pearson correlation coefficient between the two inputs. Any non-numeric element or nonexisting element (arrays of different sizes) yields a `null` result.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | The arrays of numeric values for calculating the correlation coefficient.|",
        "example": "range s1 from 1 to 5 step 1\n| extend s2 = 2 * s1 // Perfect correlation\n| summarize s1 = make_list(s1), s2 = make_list(s2)\n| extend correlation_coefficient = series_pearson_correlation(s1, s2)",
        "sourceLength": 2057
      }
    },
    {
      "name": "series_periods_detect",
      "category": "KQL Function",
      "documentation": {
        "title": "series_periods_detect()",
        "description": "Finds the most significant periods within a time series.\n\nThe series_periods_detect() function is useful for detecting periodic patterns in data, such as daily, weekly, or monthly cycles.",
        "syntax": "`series_periods_detect(`*series*`,` *min_period*`,` *max_period*`,` *num_periods*`)`",
        "returnInfo": "The function returns a table with two columns:\n\n* *periods*: A dynamic array containing the periods found, in units of the bin size, ordered by their scores.\n* *scores*: A dynamic array containing values between 0 and 1. Each array measures the significance of a period in its respective position in the *periods* array.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values, typically the resulting output of the make-series or make_list operators.|\n| *min_period* | `real` |  *True* | The minimal period length for which to search.|\n| *max_period* | `real` |  *True* | The maximal period length for which to search.|\n| *num_periods* | `long` |  *True* | The maximum number of periods to return. This number is the length of the output dynamic arrays.|\n\n> [!IMPORTANT]\n>\n> * The algorithm can detect periods containing at least 4 points and at most half of the series length.\n> * Set the *min_period* a little below and *max_period* a little above the periods you expect to find in the time series. For example, if you have an hourly aggregated signal, and you look for both daily and weekly periods (24 and 168 hours respectively), you can set *min_period*=0.8\\*24, *max_period*=1.2\\*168, and leave 20% margins around these periods.\n> * The input time series must be regular. That is, aggregated in constant bins, which is always the case if it has been created using make-series. Otherwise, the output is meaningless.",
        "example": "print y=dynamic([80, 139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170])\n| project x=range(1, array_length(y), 1), y  \n| render linechart\n\nprint y=dynamic([80, 139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170])\n| project x=range(1, array_length(y), 1), y  \n| project series_periods_detect(y, 0.0, 50.0, 2)",
        "sourceLength": 5806
      }
    },
    {
      "name": "series_periods_validate",
      "category": "KQL Function",
      "documentation": {
        "title": "series_periods_validate()",
        "description": "Checks whether a time series contains periodic patterns of given lengths.  \n\nOften a metric measuring the traffic of an application is characterized by a weekly or daily period. This period can be confirmed by running `series_periods_validate()` that checks for a weekly and daily period.",
        "syntax": "`series_periods_validate(`*series*`,` *period1* [ `,` *period2* `,` . . . ] `)`",
        "returnInfo": "The function outputs a table with two columns:\n\n* *periods*: A dynamic array that contains the periods to validate as supplied in the input.\n* *scores*: A dynamic array that contains a score between 0 and 1. The score shows the significance of a period in its respective position in the *periods* array.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values, typically the resulting output of make-series or make_list operators.|\n| *period1*, *period2*, etc.| `real` |  *True* | The periods to validate in units of the bin size. For example, if the series is in 1h bins, a weekly period is 168 bins. At least one period is required.|\n\n> [!IMPORTANT]\n>\n> * The minimal value for each of the *period* parameters is **4** and the maximal is half of the length of the input series. For a *period* argument outside these bounds, the output score will be **0**.\n> * The input time series must be regular, that is, aggregated in constant bins, and is always the case if it has been created using make-series. Otherwise, the output is meaningless.\n> * The function accepts up to 16 periods to validate.\n>",
        "example": "print y=dynamic([80, 139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170])\n| project x=range(1, array_length(y), 1), y  \n| render linechart\n\nprint y=dynamic([80, 139, 87, 110, 68, 54, 50, 51, 53, 133, 86, 141, 97, 156, 94, 149, 95, 140, 77, 61, 50, 54, 47, 133, 72, 152, 94, 148, 105, 162, 101, 160, 87, 63, 53, 55, 54, 151, 103, 189, 108, 183, 113, 175, 113, 178, 90, 71, 62, 62, 65, 165, 109, 181, 115, 182, 121, 178, 114, 170])\n| project x=range(1, array_length(y), 1), y  \n| project series_periods_validate(y, 14.0, 10.0)",
        "sourceLength": 4802
      }
    },
    {
      "name": "series_pow",
      "category": "KQL Function",
      "documentation": {
        "title": "series_pow()",
        "description": "Calculates the element-wise power of two numeric series inputs.",
        "syntax": "`series_pow(`*series1*`,` *series2*`)`",
        "returnInfo": "A dynamic array of calculated element-wise power operation between the two inputs. Any non-numeric element or non-existing element, such as in the case of arrays of different sizes, yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | Arrays of numeric values. The first array, or base, is element-wise raised to the power of the second array, or power, into a dynamic array result.|",
        "example": "print x = dynamic([1, 2, 3, 4]), y=dynamic([1, 2, 3, 0.5])\n| extend x_pow_y = series_pow(x, y)",
        "sourceLength": 1810
      }
    },
    {
      "name": "series_product",
      "category": "KQL Function",
      "documentation": {
        "title": "series_product()",
        "description": "Calculates the product of series elements.",
        "syntax": "`series_product(`*series*`)`",
        "returnInfo": "Returns a double type value with the product of the elements of the array.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | Array of numeric values. |",
        "example": "print arr=dynamic([1,2,3,4]) \n| extend series_product=series_product(arr)",
        "sourceLength": 1432
      }
    },
    {
      "name": "series_seasonal",
      "category": "KQL Function",
      "documentation": {
        "title": "series_seasonal()",
        "description": "Calculates the seasonal component of a series, according to the detected or given seasonal period.",
        "syntax": "`series_seasonal(`*series* [`,` *period* ]`)`",
        "returnInfo": "A dynamic array of the same length as the *series* input that contains the calculated seasonal component of the series. The seasonal component is calculated as the *median* of all the values that correspond to the location of the bin, across the periods.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *period* | `int` | | The number of bins for each seasonal period. This value can be any positive integer. By default, the value is set to -1, which automatically detects the period using the series_periods_detect() with a threshold of *0.7*. If seasonality is not detected, the function returns zeros. If a different value is set, it ignores seasonality and returns a series of zeros.|",
        "example": "",
        "sourceLength": 4236
      }
    },
    {
      "name": "series_sign",
      "category": "KQL Function",
      "documentation": {
        "title": "series_sign()",
        "description": "Calculates the element-wise sign of the numeric series input.",
        "syntax": "`series_sign(`*series*`)`",
        "returnInfo": "A dynamic array of calculated sign function values. -1 for negative, 0 for 0, and 1 for positive. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values over which the sign function is applied.|",
        "example": "print arr = dynamic([-6, 0, 8])\n| extend arr_sign = series_sign(arr)",
        "sourceLength": 1572
      }
    },
    {
      "name": "series_sin",
      "category": "KQL Function",
      "documentation": {
        "title": "series_sin()",
        "description": "Calculates the element-wise sine of the numeric series input.",
        "syntax": "`series_sin(`*series*`)`",
        "returnInfo": "A dynamic array of calculated sine function values. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values over which the sine function is applied.|",
        "example": "print arr = dynamic([-1, 0, 1])\n| extend arr_sin = series_sin(arr)",
        "sourceLength": 1559
      }
    },
    {
      "name": "series_stats",
      "category": "KQL Function",
      "documentation": {
        "title": "series_stats()",
        "description": "Returns statistics for a numerical series in a table with a column for each statistic.\n\n> [!NOTE]\n> This function returns multiple values. If you only need a single value, such as the average, consider using series_stats_dynamic.",
        "syntax": "`...` `|` `extend` `(` *Name*`,` ... `)` `=` `series_stats` `(` *series* [`,` *ignore_nonfinite*] `)`",
        "returnInfo": "A table with a column for each of the statistics displayed in the following table.\n\n|Statistic | Description|\n|:--|:--|\n| `min` | The minimum value in the input array.|\n| `min_idx`| The first position of the minimum value in the input array.|\n| `max` | The maximum value in the input array.|\n| `max_idx`| The first position of the maximum value in the input array.|\n| `avg`| The average value of the input array.|\n| `variance` | The sample variance of input array.|\n| `stdev`| The sample standard deviation of the input array.|",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *Name* | `string` | | The column labels for the output table. If not provided, the system will generate them. If you provide a limited number of names, the table will show only those columns.|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *ignore_nonfinite* | `bool` | | Determines if the calculation includes non-finite values like `null`, `NaN`, `inf`, and so on. The default is `false`, which will result in `null` if non-finite values are present.|",
        "example": "print x=dynamic([23, 46, 23, 87, 4, 8, 3, 75, 2, 56, 13, 75, 32, 16, 29]) \n| project series_stats(x)",
        "sourceLength": 2859
      }
    },
    {
      "name": "series_stats_dynamic",
      "category": "KQL Function",
      "documentation": {
        "title": "series_stats_dynamic()",
        "description": "Returns statistics for a series in a dynamic object.",
        "syntax": "`series_stats_dynamic(`*series* [`,` *ignore_nonfinite* ]`)`",
        "returnInfo": "A dynamic property bag object with the following content:\n\n* `min`: The minimum value in the input array.\n* `min_idx`: The first position of the minimum value in the input array.\n* `max`: The maximum value in the input array.\n* `max_idx`: The first position of the maximum value in the input array.\n* `avg`: The average value of the input array.\n* `variance`: The sample variance of input array.\n* `stdev`: The sample standard deviation of the input array.\n* `sum`: The sum of the values in the input array.\n* `len`: The length of the input array.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values.|\n| *ignore_nonfinite* | `bool` | | Indicates whether to calculate the statistics while ignoring non-finite values, such as *null*, *NaN*, *inf*, and so on. The default is `false`, which returns `null` if non-finite values are present in the array.|",
        "example": "print x=dynamic([23, 46, 23, 87, 4, 8, 3, 75, 2, 56, 13, 75, 32, 16, 29]) \n| project stats=series_stats_dynamic(x)\n\nnyc_taxi\n| make-series Series=avg(fare_amount) on pickup_datetime step 1min\n| project Stats=series_stats_dynamic(Series)",
        "sourceLength": 3291
      }
    },
    {
      "name": "series_subtract",
      "category": "KQL Function",
      "documentation": {
        "title": "series_subtract()",
        "description": "Calculates the element-wise subtraction of two numeric series inputs.",
        "syntax": "`series_subtract(`*series1*`,` *series2*`)`",
        "returnInfo": "A dynamic array of calculated element-wise subtract operation between the two inputs. Any non-numeric element or non-existing element, such as in the case of arrays of different sizes, yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series1*, *series2* | `dynamic` |  *True* | Arrays of numeric values, the second array to be element-wise subtracted from the first array.|",
        "example": "range x from 1 to 3 step 1\n| extend y = x * 2\n| extend z = y * 2\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\n| extend s1_subtract_s2 = series_subtract(s1, s2)",
        "sourceLength": 1968
      }
    },
    {
      "name": "series_sum",
      "category": "KQL Function",
      "documentation": {
        "title": "series_sum()",
        "description": "Calculates the sum of series elements.",
        "syntax": "`series_sum(`*series*`)`",
        "returnInfo": "Returns a double type value with the sum of the elements of the array.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | Array of numeric values. |",
        "example": "print arr=dynamic([1,2,3,4]) \n| extend series_sum=series_sum(arr)",
        "sourceLength": 1392
      }
    },
    {
      "name": "series_tan",
      "category": "KQL Function",
      "documentation": {
        "title": "series_tan()",
        "description": "Calculates the element-wise tangent of the numeric series input.",
        "syntax": "`series_tan(`*series*`)`",
        "returnInfo": "A dynamic array of calculated tangent function values. Any non-numeric element yields a `null` element value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *series* | `dynamic` |  *True* | An array of numeric values on which the tangent function is applied.|",
        "example": "print arr = dynamic([-1, 0, 1])\n| extend arr_tan = series_tan(arr)",
        "sourceLength": 1569
      }
    },
    {
      "name": "set_difference",
      "category": "KQL Function",
      "documentation": {
        "title": "set_difference()",
        "description": "Returns a `dynamic` (JSON) array of the set of all distinct values that are in the first array but aren't in other arrays - (((arr1 \\ arr2) \\ arr3) \\ ...).",
        "syntax": "`set_difference(`*set1*`,` *set2* [`,`*set3*, ...]`)`",
        "returnInfo": "Returns a dynamic array of the set of all distinct values that are in *set1* but aren't in other arrays.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *set1...setN* | `dynamic` |  *True* | Arrays used to create a difference set. A minimum of 2 arrays are required. See pack_array.|",
        "example": "range x from 1 to 3 step 1\n| extend y = x * 2\n| extend z = y * 2\n| extend w = z * 2\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(x,y,w)\n| project set_difference(a1, a2, a3)\n\nprint arr = set_difference(dynamic([1,2,3]), dynamic([1,2,3]))",
        "sourceLength": 2467
      }
    },
    {
      "name": "set_has_element",
      "category": "KQL Function",
      "documentation": {
        "title": "set_has_element()",
        "description": "Determines whether the specified set contains the specified element.",
        "syntax": "`set_has_element(`*set*`,` *value*`)`",
        "returnInfo": "`true` or `false` depending on if the value exists in the array.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *set* | `dynamic` |  *True* | The input array to search.|\n| *value* | |  *True* | The value for which to search. The value should be of type `long`, `int`, `double`, `datetime`, `timespan`, `decimal`, `string`, `guid`, or `bool`.|",
        "example": "print arr=dynamic([\"this\", \"is\", \"an\", \"example\"]) \n| project Result=set_has_element(arr, \"example\")",
        "sourceLength": 1877
      }
    },
    {
      "name": "set_intersect",
      "category": "KQL Function",
      "documentation": {
        "title": "set_intersect()",
        "description": "Returns a `dynamic` array of the set of all distinct values that are in all arrays - (arr1 ∩ arr2 ∩ ...).",
        "syntax": "`set_intersect(`*set1*`,` *set2* [`,` *set3*, ...]`)`",
        "returnInfo": "Returns a dynamic array of the set of all distinct values that are in all arrays.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *set1...setN* | `dynamic` |  *True* | Arrays used to create an intersect set. A minimum of 2 arrays are required. See pack_array.|",
        "example": "range x from 1 to 3 step 1\n| extend y = x * 2\n| extend z = y * 2\n| extend w = z * 2\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(w,x)\n| project set_intersect(a1, a2, a3)\n\nprint arr = set_intersect(dynamic([1, 2, 3]), dynamic([4,5]))",
        "sourceLength": 2353
      }
    },
    {
      "name": "set_union",
      "category": "KQL Function",
      "documentation": {
        "title": "set_union()",
        "description": "Returns a `dynamic` array of the set of all distinct values that are in any of the arrays - (arr1 ∪ arr2 ∪ ...).",
        "syntax": "`set_union(`*set1*`,` *set2* [`,` *set3*, ...]`)`",
        "returnInfo": "Returns a dynamic array of the set of all distinct values that are in any of arrays.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *set1...setN* | `dynamic` |  *True* | Arrays used to create a union set. A minimum of two arrays are required. See pack_array.|",
        "example": "",
        "sourceLength": 2778
      }
    },
    {
      "name": "sign",
      "category": "KQL Function",
      "documentation": {
        "title": "sign()",
        "description": "Returns the sign of the numeric expression.",
        "syntax": "`sign(`*number*`)`",
        "returnInfo": "The positive (+1), zero (0), or negative (-1) sign of the specified expression.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *number* | `real` |  *True* | The number for which to return the sign.|",
        "example": "print s1 = sign(-42), s2 = sign(0), s3 = sign(11.2)",
        "sourceLength": 1346
      }
    },
    {
      "name": "sin",
      "category": "KQL Function",
      "documentation": {
        "title": "sin()",
        "description": "Returns the sine function value of the specified angle. The angle is specified in radians.",
        "syntax": "`sin(`*number*`)`",
        "returnInfo": "The sine of *number* of radians.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *number* | `real` |  *True* | The value in radians for which to calculate the sine.|",
        "example": "print sin(1)",
        "sourceLength": 1028
      }
    },
    {
      "name": "split",
      "category": "KQL Function",
      "documentation": {
        "title": "split()",
        "description": "The `split()` function takes a string and splits it into substrings based on a specified delimiter, returning the substrings in an array. Optionally, you can retrieve a specific substring by specifying its index.",
        "syntax": "`split(`*source*`,` *delimiter* [`,` *requestedIndex*]`)`",
        "returnInfo": "An array of substrings obtained by separating the *source* string by the specified *delimiter*, or a single substring at the specified *requestedIndex*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | `string` |  *True* | The source string that is split according to the given delimiter.|\n| *delimiter* | `string` |  *True* | The delimiter that will be used in order to split the source string.|\n| *requestedIndex* | `int` | | A zero-based index. If provided, the returned string array contains the requested substring at the index if it exists.|",
        "example": "print\n    split(\"aa_bb\", \"_\"),           // [\"aa\",\"bb\"]\n    split(\"aaa_bbb_ccc\", \"_\", 1),  // [\"bbb\"]\n    split(\"\", \"_\"),                // [\"\"]\n    split(\"a__b\", \"_\"),            // [\"a\",\"\",\"b\"]\n    split(\"aabbcc\", \"bb\")          // [\"aa\",\"cc\"]",
        "sourceLength": 2360
      }
    },
    {
      "name": "sqrt",
      "category": "KQL Function",
      "documentation": {
        "title": "sqrt()",
        "description": "Returns the square root of the input.",
        "syntax": "`sqrt(`*number*`)`",
        "returnInfo": "* A positive number such that `sqrt(x) * sqrt(x) == x`\n* `null` if the argument is negative or can't be converted to a `real` value.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *number* | int, long, or real |  *True* | The number for which to calculate the square root.|",
        "example": "",
        "sourceLength": 1003
      }
    },
    {
      "name": "startofday",
      "category": "KQL Function",
      "documentation": {
        "title": "startofday()",
        "description": "Returns the start of the day containing the date, shifted by an offset, if provided.",
        "syntax": "`startofday(`*date* [`,` *offset* ]`)`",
        "returnInfo": "A datetime representing the start of the day for the given *date* value, with the offset, if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True* | The date for which to find the start.|\n| *offset* | `int` | | The number of days to offset from the input date. The default is 0.|",
        "example": "range offset from -1 to 1 step 1\n| project dayStart = startofday(datetime(2017-01-01 10:10:17), offset)",
        "sourceLength": 2112
      }
    },
    {
      "name": "startofmonth",
      "category": "KQL Function",
      "documentation": {
        "title": "startofmonth()",
        "description": "Returns the start of the month containing the date, shifted by an offset, if provided.",
        "syntax": "`startofmonth(`*date* [`,` *offset* ]`)`",
        "returnInfo": "A datetime representing the start of the month for the given *date* value, with the offset, if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True* | The date for which to find the start of month.|\n| *offset* | `int` | | The number of months to offset from the input date. The default is 0.|",
        "example": "range offset from -1 to 1 step 1\n| project monthStart = startofmonth(datetime(2017-01-01 10:10:17), offset)",
        "sourceLength": 2139
      }
    },
    {
      "name": "startofweek",
      "category": "KQL Function",
      "documentation": {
        "title": "startofweek()",
        "description": "Returns the start of the week containing the date, shifted by an offset, if provided.\n\nStart of the week is considered to be a Sunday.",
        "syntax": "`startofweek(`*date* [`,` *offset* ]`)`",
        "returnInfo": "A datetime representing the start of the week for the given *date* value, with the offset, if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True* | The date for which to find the start of week.|\n| *offset* | `int` | | The number of weeks to offset from the input date. The default is 0.|",
        "example": "range offset from -1 to 1 step 1\n| project weekStart = startofweek(datetime(2017-01-01 10:10:17), offset) \n\nlet startofweekFromMonday = (dateArg: datetime) {\n    datetime_add('day', 1, startofweek(datetime_add('day', -1, dateArg)))\n};\nlet data=datatable(Date: datetime, day: string)\n[\ndatetime(2025, 6, 14), \"Saturday\",\ndatetime(2025, 6, 15), \"Sunday\",\ndatetime(2025, 6, 16), \"Monday\",\ndatetime(2025, 6, 17), \"Tuesday\"\n];\ndata \n| extend MondayWeek=startofweekFromMonday(Date)",
        "sourceLength": 3326
      }
    },
    {
      "name": "startofyear",
      "category": "KQL Function",
      "documentation": {
        "title": "startofyear()",
        "description": "Returns the start of the year containing the date, shifted by an offset, if provided.",
        "syntax": "`startofyear(`*date* [`,` *offset* ]`)`",
        "returnInfo": "A datetime representing the start of the year for the given *date* value, with the offset, if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True* | The date for which to find the start of the year.|\n| *offset* | `int` | | The number of years to offset from the input date. The default is 0.|",
        "example": "range offset from -1 to 1 step 1\n| project yearStart = startofyear(datetime(2017-01-01 10:10:17), offset)",
        "sourceLength": 2133
      }
    },
    {
      "name": "stored_query_result",
      "category": "KQL Function",
      "documentation": {
        "title": "stored_query_result()",
        "description": "Retrieves a previously created stored query result.\n\nTo set a stored query result, see .set stored_query_result command.",
        "syntax": "`stored_query_result(` *StoredQueryResultName* `)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *StoredQueryResultName* | `string` | *True* | The name of the stored query result. |",
        "example": "stored_query_result(\"Numbers\")",
        "sourceLength": 2588
      }
    },
    {
      "name": "strcat",
      "category": "KQL Function",
      "documentation": {
        "title": "strcat()",
        "description": "Concatenates between 1 and 64 arguments.",
        "syntax": "`strcat(`*argument1*`,` *argument2* [`,` *argument3* ... ]`)`",
        "returnInfo": "The arguments concatenated to a single string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *argument1* ... *argumentN* | scalar |  *True* | The expressions to concatenate.|\n\n> [!NOTE]\n> If the arguments aren't of string type, they'll be forcibly converted to string.",
        "example": "",
        "sourceLength": 2433
      }
    },
    {
      "name": "strcat_array",
      "category": "KQL Function",
      "documentation": {
        "title": "strcat_array()",
        "description": "Creates a concatenated string of array values using a specified delimiter.",
        "syntax": "`strcat_array(`*array*, *delimiter*`)`",
        "returnInfo": "The input *array* values concatenated to a single string with the specified *delimiter*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *array* | `dynamic` |  *True* | An array of values to be concatenated.|\n| *delimeter* | `string` |  *True* | The value used to concatenate the values in *array*.|",
        "example": "",
        "sourceLength": 2117
      }
    },
    {
      "name": "strcat_delim",
      "category": "KQL Function",
      "documentation": {
        "title": "strcat_delim()",
        "description": "Concatenates between 2 and 64 arguments, using a specified delimiter as the first argument.",
        "syntax": "`strcat_delim(`*delimiter*, *argument1*, *argument2*[ , *argumentN*]`)`",
        "returnInfo": "The arguments concatenated to a single string with *delimiter*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *delimiter* | `string` |  *True* | The string to be used as separator in the concatenation.|\n| *argument1* ... *argumentN* | scalar |  *True* | The expressions to concatenate.|\n\n> [!NOTE]\n> If the arguments aren't of string type, they'll be forcibly converted to string.",
        "example": "print st = strcat_delim('-', 1, '2', 'A', 1s)",
        "sourceLength": 1704
      }
    },
    {
      "name": "strcmp",
      "category": "KQL Function",
      "documentation": {
        "title": "strcmp()",
        "description": "Compares two strings.\n\nThe function starts comparing the first character of each string. If they're equal to each other, it continues with the following pairs until the characters differ or until the end of shorter string is reached.",
        "syntax": "`strcmp(`*string1*`,` *string2*`)`",
        "returnInfo": "Returns an integer value indicating the relationship between the strings:\n\n* *<0* - the first character that doesn't match has a lower value in *string1* than in *string2*\n* *0* - the contents of both strings are equal\n* *>0* - the first character that doesn't match has a greater value in *string1* than in *string2*",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *string1* | `string` |  *True* | The first input string for comparison.|\n| *string2* | `string` |  *True* | The second input string for comparison.|",
        "example": "datatable(string1:string, string2:string) [\n    \"ABC\",\"ABC\",\n    \"abc\",\"ABC\",\n    \"ABC\",\"abc\",\n    \"abcde\",\"abc\"\n]\n| extend result = strcmp(string1,string2)",
        "sourceLength": 2091
      }
    },
    {
      "name": "string_size",
      "category": "KQL Function",
      "documentation": {
        "title": "string_size()",
        "description": "Returns the size, in bytes, of the input string.",
        "syntax": "`string_size(`*source*`)`",
        "returnInfo": "Returns the length, in bytes, of the input string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | `string` |  *True* | The string for which to return the byte size.|",
        "example": "",
        "sourceLength": 1734
      }
    },
    {
      "name": "strlen",
      "category": "KQL Function",
      "documentation": {
        "title": "strlen()",
        "description": "Returns the length, in characters, of the input string.\n\n> [!NOTE]\n> This function counts Unicode code points.",
        "syntax": "`strlen(`*source*`)`",
        "returnInfo": "Returns the length, in characters, of the input string.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | `string` |  *True* | The string for which to return the length.|",
        "example": "",
        "sourceLength": 2387
      }
    },
    {
      "name": "strrep",
      "category": "KQL Function",
      "documentation": {
        "title": "strrep()",
        "description": "Replicates a string the number of times specified.",
        "syntax": "`strrep(`*value*`,` *multiplier*`,` [ *delimiter* ]`)`",
        "returnInfo": "The *value* string repeated the number of times as specified by *multiplier*, concatenated with *delimiter*.\n\nIf *multiplier* is more than the maximal allowed value of 1024, the input string will be repeated 1024 times.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `string` |  *True* | The string to replicate. |\n| *multiplier* | `int` |  *True* | The amount of times to replicate the string. Must be a value from 1 to 67108864.|\n| *delimiter* | `string` | | The delimeter used to separate the string replications. The default delimiter is an empty string.|\n\n> [!NOTE]\n> If *value* or *delimiter* isn't a `string`, they'll be forcibly converted to string.",
        "example": "print from_str = strrep('ABC', 2), from_int = strrep(123,3,'.'), from_time = strrep(3s,2,' ')",
        "sourceLength": 2014
      }
    },
    {
      "name": "substring",
      "category": "KQL Function",
      "documentation": {
        "title": "substring()",
        "description": "Extracts a substring from the source string starting from some index to the end of the string.\n\nOptionally, the length of the requested substring can be specified.",
        "syntax": "`substring(`*source*`,` *startingIndex* [`,` *length*]`)`",
        "returnInfo": "A substring from the given string. The substring starts at startingIndex (zero-based) character position and continues to the end of the string or length characters if specified.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *source* | `string` |  *True* | The string from which to take the substring.|\n| *startingIndex* | `int` |  *True* | The zero-based starting character position of the requested substring. If a negative number, the substring will be retrieved from the end of the source string.|\n| *length* | `int` | | The requested number of characters in the substring. The default behavior is to take from *startingIndex* to the end of the *source* string.|",
        "example": "substring(\"123456\", 1)        // 23456\nsubstring(\"123456\", 2, 2)     // 34\nsubstring(\"ABCD\", 0, 2)       // AB\nsubstring(\"123456\", -2, 2)    // 56",
        "sourceLength": 1770
      }
    },
    {
      "name": "table",
      "category": "KQL Function",
      "documentation": {
        "title": "table()",
        "description": "The table() function references a table by providing its name as an expression of type `string`.",
        "syntax": "`table(` *TableName* [`,` *DataScope*] `)`",
        "returnInfo": "`table(T)` returns:\n\n* Data from table *T* if a table named *T* exists.\n* Data returned by function *T* if a table named *T* doesn't exist but a function named *T* exists. Function *T* must take no arguments and must return a tabular result.\n* A semantic error is raised if there's no table named *T* and no function named *T*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n|*TableName* | `string` |  *True* | The name of the table being referenced. The value of this expression must be constant at the point of call to the function, meaning it cannot vary by the data context.|\n| *DataScope* | `string` | | Used to restrict the table reference to data according to how this data falls under the table's effective cache policy. If used, the actual argument must be one of the Valid data scope values.\n\n### Valid data scope values\n\n|Value|Description|\n|:--|:--|\n| `hotcache`| Only data that is categorized as hot cache will be referenced.|\n| `all`| All the data in the table will be referenced.|\n| `default`| The default is `all`, except if it has been set to `hotcache` by the cluster admin.|",
        "example": "",
        "sourceLength": 4424
      }
    },
    {
      "name": "tan",
      "category": "KQL Function",
      "documentation": {
        "title": "tan()",
        "description": "Returns the tangent value of the specified number.",
        "syntax": "`tan(`*x*`)`",
        "returnInfo": "The result of `tan(`*x*`)`",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *x* | `real` |  *True* | The number for which to calculate the tangent. |",
        "example": "",
        "sourceLength": 894
      }
    },
    {
      "name": "tobool",
      "category": "KQL Function",
      "documentation": {
        "title": "tobool()",
        "description": "Convert inputs to boolean (signed 8-bit) representation.\n\n> The `tobool()` and `toboolean()` functions are equivalent\n\n> [!NOTE]\n> When possible, use bool literals instead.",
        "syntax": "`tobool(`*value*`)`",
        "returnInfo": "If conversion is successful, result will be a boolean.\nIf conversion isn't successful, result will be `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `string` |  *True* | The value to convert to boolean.|",
        "example": "tobool(\"true\") == true\ntobool(\"false\") == false\ntobool(1) == true\ntobool(123) == true",
        "sourceLength": 1474
      }
    },
    {
      "name": "todatetime",
      "category": "KQL Function",
      "documentation": {
        "title": "todatetime()",
        "description": "Converts the input to a datetime scalar value.\n\n> [!NOTE]\n>\n> * To learn more about supported data and time formats and syntax, see The datetime data type.\n> * When possible, use datetime literals instead of the `todatetime()` function.",
        "syntax": "`todatetime(`*value*`)`",
        "returnInfo": "If the conversion is successful, the result is a datetime value.\nElse, the result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | scalar |  *True* | The value to convert to datetime.|",
        "example": "print todatetime(\"2015-12-31 23:59:59.9\")\n\nprint todatetime('12-02-2022') == datetime('12-02-2022')",
        "sourceLength": 2593
      }
    },
    {
      "name": "todecimal",
      "category": "KQL Function",
      "documentation": {
        "title": "todecimal()",
        "description": "Converts the input to a decimal number representation.\n\n> [!NOTE]\n> When possible, use decimal literals instead.",
        "syntax": "`todecimal(`*value*`)`",
        "returnInfo": "If conversion is successful, result is a decimal number.\nIf conversion isn't successful, result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | scalar |  *True* | The value to convert to a decimal.|",
        "example": "print todecimal(\"123.45678\") == decimal(123.45678)",
        "sourceLength": 1796
      }
    },
    {
      "name": "toguid",
      "category": "KQL Function",
      "documentation": {
        "title": "toguid()",
        "description": "Converts a string to a `guid` scalar.\n\n> [!NOTE]\n> When possible, use guid literals instead.",
        "syntax": "`toguid(`*value*`)`",
        "returnInfo": "The conversion process takes the first 32 characters of the input, ignoring properly located hyphens, validates that the characters are between 0-9 or a-f, and then converts the string into a `guid` scalar. The rest of the string is ignored.\n\nIf the conversion is successful, the result is a `guid` scalar. Otherwise, the result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | scalar |  *True* | The value to convert to guid.|",
        "example": "datatable(str: string)\n[\n    \"0123456789abcdef0123456789abcdef\",\n    \"0123456789ab-cdef-0123-456789abcdef\",\n    \"a string that is not a guid\"\n]\n| extend guid = toguid(str)",
        "sourceLength": 2561
      }
    },
    {
      "name": "tohex",
      "category": "KQL Function",
      "documentation": {
        "title": "tohex()",
        "description": "Converts input to a hexadecimal string.",
        "syntax": "`tohex(`*value*`,` [`,` *minLength* ]`)`",
        "returnInfo": "If conversion is successful, result is a string value.\nIf conversion isn't successful, result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | int or long |  *True* | The value that is converted to a hex string.|\n| *minLength* | `int` | | The value representing the number of leading characters to include in the output. Values between 1 and 16 are supported. Values greater than 16 are truncated to 16. If the string is longer than *minLength* without leading characters, then *minLength* is effectively ignored. Negative numbers are only represented at minimum by their underlying data size, so for an integer (32-bit) the *minLength* is at minimum 8, for a long (64-bit) it's at minimum 16.|",
        "example": "print\n    tohex(256) == '100',\n    tohex(-256) == 'ffffffffffffff00', // 64-bit 2's complement of -256\n    tohex(toint(-256), 8) == 'ffffff00', // 32-bit 2's complement of -256\n    tohex(256, 8) == '00000100',\n    tohex(256, 2) == '100' // Exceeds min length of 2, so min length is ignored.",
        "sourceLength": 2581
      }
    },
    {
      "name": "toint",
      "category": "KQL Function",
      "documentation": {
        "title": "toint()",
        "description": "Converts the input to an integer value (signed 32-bit) number representation.\n\n> [!NOTE]\n> When possible, use int literals instead.",
        "syntax": "`toint(`*value*`)`",
        "returnInfo": "If the conversion is successful, the result is an integer. Otherwise, the result is `null`. If the input includes a decimal value, the result truncate to only the integer portion.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | scalar |  *True* | The value to convert to an integer.|",
        "example": "",
        "sourceLength": 2542
      }
    },
    {
      "name": "tolong",
      "category": "KQL Function",
      "documentation": {
        "title": "tolong()",
        "description": "Converts the input value to a long (signed 64-bit) number representation.\n\n> [!NOTE]\n> When possible, use long literals instead.",
        "syntax": "`tolong(`*value*`)`",
        "returnInfo": "If conversion is successful, the result is a long number.\nIf conversion isn't successful, the result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | scalar |  *True* | The value to convert to a long.|",
        "example": "tolong(\"123\") == 123",
        "sourceLength": 1774
      }
    },
    {
      "name": "tolower",
      "category": "KQL Function",
      "documentation": {
        "title": "tolower()",
        "description": "Converts the input string to lower case.",
        "syntax": "`tolower(`*value*`)`",
        "returnInfo": "If conversion is successful, result is a lowercase string.\nIf conversion isn't successful, result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `string` |  *True* | The value to convert to a lowercase string.|",
        "example": "tolower(\"Hello\") == \"hello\"",
        "sourceLength": 1572
      }
    },
    {
      "name": "toreal",
      "category": "KQL Function",
      "documentation": {
        "title": "toreal()",
        "description": "Converts the input expression to a value of type real.\n\n> The `todouble()` and `toreal()` functions are equivalent.\n\n> [!NOTE]\n> When possible, use real literals instead.",
        "syntax": "`toreal(`*Expr*`)`",
        "returnInfo": "If conversion is successful, the result is a value of type `real`. Otherwise, the returned value is `real(null)`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | scalar |  *True* | The value to convert to real.|",
        "example": "toreal(\"123.4\") == 123.4",
        "sourceLength": 1539
      }
    },
    {
      "name": "tostring",
      "category": "KQL Function",
      "documentation": {
        "title": "tostring()",
        "description": "Converts the input to a string representation.",
        "syntax": "`tostring(`*value*`)`",
        "returnInfo": "If *value* is non-null, the result is a string representation of *value*.\nIf *value* is null, the result is an empty string.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *value* | scalar |  *True* | The value to convert to a string.|",
        "example": "print tostring(123)",
        "sourceLength": 1524
      }
    },
    {
      "name": "totimespan",
      "category": "KQL Function",
      "documentation": {
        "title": "totimespan()",
        "description": "Converts the input to a timespan scalar value.\n\n> **Deprecated aliases:** totime()\n\n> [!NOTE]\n> When possible, we recommend using timespan literals instead.",
        "syntax": "`totimespan(`*value*`)`",
        "returnInfo": "If conversion is successful, result is a timespan value.\nElse, result is null.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n| *value* | `string` |  *True* | The value to convert to a timespan.|",
        "example": "let value=5;\nprint minsStr=totimespan(\"0.00:03:00\"), days=totimespan(4d), hour=totimespan(value * 1h), \n      mins=totimespan(value * 2m), seconds=totimespan(5 * 4s), timespanMin=timespan(25min)",
        "sourceLength": 2231
      }
    },
    {
      "name": "toupper",
      "category": "KQL Function",
      "documentation": {
        "title": "toupper()",
        "description": "Converts a string to upper case.",
        "syntax": "`toupper(`*value*`)`",
        "returnInfo": "If conversion is successful, result is an uppercase string.\nIf conversion isn't successful, result is `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `string` |  *True* | The value to convert to an uppercase string.|",
        "example": "toupper(\"hello\") == \"HELLO\"",
        "sourceLength": 1560
      }
    },
    {
      "name": "translate",
      "category": "KQL Function",
      "documentation": {
        "title": "translate()",
        "description": "Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'",
        "syntax": "`translate(`*searchList*`,` *replacementList*`,` *source*`)`",
        "returnInfo": "*source* after replacing all occurrences of characters in 'replacementList' with the corresponding characters in 'searchList'",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *searchList* | `string` |  *True* | The list of characters that should be replaced.|\n| *replacementList* | `string` |  *True* | The list of characters that should replace the characters in *searchList*.|\n| *source* | `string` |  *True* | A string to search.|",
        "example": "",
        "sourceLength": 1760
      }
    },
    {
      "name": "treepath",
      "category": "KQL Function",
      "documentation": {
        "title": "treepath()",
        "description": "Enumerates all the path expressions that identify leaves in a dynamic object.",
        "syntax": "`treepath(`*object*`)`",
        "returnInfo": "An array of path expressions.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *object* | `dynamic` |  *True*| A dynamic property bag object for which to enumerate the path expressions.|",
        "example": "",
        "sourceLength": 1302
      }
    },
    {
      "name": "trim",
      "category": "KQL Function",
      "documentation": {
        "title": "trim()",
        "description": "Removes all leading and trailing matches of the specified regular expression.",
        "syntax": "`trim(`*regex*`,` *source*`)`",
        "returnInfo": "*source* after trimming matches of *regex* found in the beginning and/or the end of *source*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *regex* | `string` |  *True* | The string or regular expression to be trimmed from *source*.|\n| *source* | `string` |  *True* | The source string from which to trim *regex*.|",
        "example": "",
        "sourceLength": 3445
      }
    },
    {
      "name": "trim_end",
      "category": "KQL Function",
      "documentation": {
        "title": "trim_end()",
        "description": "Removes trailing match of the specified regular expression.",
        "syntax": "`trim_end(`*regex*`,` *source*`)`",
        "returnInfo": "*source* after trimming matches of *regex* found in the end of *source*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *regex* | `string` |  *True* | The string or regular expression to be trimmed from the end of *source*.|\n| *source* | `string` |  *True* | The source string from which to trim *regex*.|",
        "example": "let string_to_trim = @\"bing.com\";\nlet substring = \".com\";\nprint string_to_trim = string_to_trim,trimmed_string = trim_end(substring,string_to_trim)",
        "sourceLength": 3316
      }
    },
    {
      "name": "trim_start",
      "category": "KQL Function",
      "documentation": {
        "title": "trim_start()",
        "description": "Removes leading match of the specified regular expression.",
        "syntax": "`trim_start(`*regex*`,` *source*`)`",
        "returnInfo": "*source* after trimming match of *regex* found in the beginning of *source*.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *regex* | `string` |  *True* | The string or regular expression to be trimmed from the beginning of *source*.|\n| *source* | `string` |  *True* | The source string from which to trim *regex*.|",
        "example": "",
        "sourceLength": 3373
      }
    },
    {
      "name": "unicode_codepoints_from_string",
      "category": "KQL Function",
      "documentation": {
        "title": "unicode_codepoints_from_string()",
        "description": "Returns a dynamic array of the Unicode codepoints of the input string. This function is the inverse operation of `unicode_codepoints_to_string()` function.\n\n> **Deprecated aliases:** to_utf8()",
        "syntax": "`unicode_codepoints_from_string(`*value*`)`",
        "returnInfo": "Returns a dynamic array of the Unicode codepoints of the characters that make up the string provided to this function.\nSee `unicode_codepoints_to_string()`)",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *value* | `string` |  *True* | The source string to convert. |",
        "example": "print arr = unicode_codepoints_from_string(\"⒦⒰⒮⒯⒪\")\n\nprint arr = unicode_codepoints_from_string(\"קוסטו - Kusto\")\n\nprint str = unicode_codepoints_to_string(unicode_codepoints_from_string(\"Kusto\"))",
        "sourceLength": 2817
      }
    },
    {
      "name": "unicode_codepoints_to_string",
      "category": "KQL Function",
      "documentation": {
        "title": "unicode_codepoints_to_string()",
        "description": "Returns the string represented by the Unicode codepoints. This function is the inverse operation of `unicode_codepoints_from_string()` function.\n\n> **Deprecated aliases:** make_string()",
        "syntax": "`unicode_codepoints_to_string (`*values*`)`",
        "returnInfo": "Returns the string made of the UTF characters whose Unicode codepoint value is provided by the arguments to this function. The input must consist of valid Unicode codepoints.\nIf any argument isn't a valid Unicode codepoint, the function returns `null`.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *values* | int, long, or dynamic |  *True* | One or more comma-separated values to convert. The values may also be a dynamic array.|\n\n> [!NOTE]\n> This function receives up to 64 arguments.",
        "example": "print str = unicode_codepoints_to_string(75, 117, 115, 116, 111)\n\nprint str = unicode_codepoints_to_string(dynamic([75, 117, 115, 116, 111]))\n\nprint str = unicode_codepoints_to_string(dynamic([75, 117, 115]), 116, 111)\n\nprint str = unicode_codepoints_to_string(75, 10, 117, 10, 115, 10, 116, 10, 111)\n\nprint str = unicode_codepoints_to_string(range(48,57), range(65,90), range(97,122))",
        "sourceLength": 3959
      }
    },
    {
      "name": "unixtime_microseconds_todatetime",
      "category": "KQL Function",
      "documentation": {
        "title": "unixtime_microseconds_todatetime()",
        "description": "Converts unix-epoch microseconds to UTC datetime.",
        "syntax": "`unixtime_microseconds_todatetime(`*microseconds*`)`",
        "returnInfo": "If the conversion is successful, the result is a datetime value. Otherwise, the result is null.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *microseconds* | `real` |  *True* | The epoch timestamp in microseconds. A `datetime` value that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.|",
        "example": "print date_time = unixtime_microseconds_todatetime(1546300800000000)",
        "sourceLength": 2115
      }
    },
    {
      "name": "unixtime_milliseconds_todatetime",
      "category": "KQL Function",
      "documentation": {
        "title": "unixtime_milliseconds_todatetime()",
        "description": "Converts unix-epoch milliseconds to UTC datetime.",
        "syntax": "`unixtime_milliseconds_todatetime(`*milliseconds*`)`",
        "returnInfo": "If the conversion is successful, the result is a datetime value. Otherwise, the result is null.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *milliseconds* | `real` |  *True* | The epoch timestamp in microseconds. A `datetime` value that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.|",
        "example": "print date_time = unixtime_milliseconds_todatetime(1546300800000)",
        "sourceLength": 2112
      }
    },
    {
      "name": "unixtime_nanoseconds_todatetime",
      "category": "KQL Function",
      "documentation": {
        "title": "unixtime_nanoseconds_todatetime()",
        "description": "Converts unix-epoch nanoseconds to UTC datetime.",
        "syntax": "`unixtime_nanoseconds_todatetime(`*nanoseconds*`)`",
        "returnInfo": "If the conversion is successful, the result is a datetime value. Otherwise, the result is null.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *nanoseconds* | `real` |  *True* | The epoch timestamp in nanoseconds. A `datetime` value that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.|",
        "example": "print date_time = unixtime_nanoseconds_todatetime(1546300800000000000)",
        "sourceLength": 2107
      }
    },
    {
      "name": "unixtime_seconds_todatetime",
      "category": "KQL Function",
      "documentation": {
        "title": "unixtime_seconds_todatetime()",
        "description": "Converts unix-epoch seconds to UTC datetime.",
        "syntax": "`unixtime_seconds_todatetime(`*seconds*`)`",
        "returnInfo": "If the conversion is successful, the result is a datetime value. Otherwise, the result is null.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *seconds* | `real` |  *True* | The epoch timestamp in seconds. A `datetime` value that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.|",
        "example": "print date_time = unixtime_seconds_todatetime(1546300800)",
        "sourceLength": 2066
      }
    },
    {
      "name": "url_decode",
      "category": "KQL Function",
      "documentation": {
        "title": "url_decode()",
        "description": "The function converts an encoded URL into a regular URL representation.\n\nFor more information about URL encoding and decoding, see Percent-encoding.",
        "syntax": "`url_decode(`*encoded_url*`)`",
        "returnInfo": "URL (string) in a regular representation.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *encoded_url* | `string` |  *True* | The encoded URL to decode.|",
        "example": "let url = @'https%3a%2f%2fwww.bing.com%2f';\nprint original = url, decoded = url_decode(url)",
        "sourceLength": 1640
      }
    },
    {
      "name": "url_encode",
      "category": "KQL Function",
      "documentation": {
        "title": "url_encode()",
        "description": "The function converts characters of the input URL into a format that can be transmitted over the internet.\nDiffers from url_encode_component by encoding spaces as '+' and not as '%20' (see application/x-www-form-urlencoded here).\n\nFor more information about URL encoding and decoding, see Percent-encoding.",
        "syntax": "`url_encode(`*url*`)`",
        "returnInfo": "URL (string) converted into a format that can be transmitted over the Internet.",
        "parametersTable": "|Name|Type|Required|Description|\n|:--|:--|:--|:--|\n|*url*| `string` | *True*|The URL to encode.|",
        "example": "let url = @'https://www.bing.com/hello world';\nprint original = url, encoded = url_encode(url)",
        "sourceLength": 1927
      }
    },
    {
      "name": "url_encode_component",
      "category": "KQL Function",
      "documentation": {
        "title": "url_encode_component()",
        "description": "The function converts characters of the input URL into a format that can be transmitted over the internet. Differs from url_encode by encoding spaces as '%20' and not as '+'.\n\nFor more information about URL encoding and decoding, see Percent-encoding.",
        "syntax": "`url_encode_component(`*url*`)`",
        "returnInfo": "URL (string) converted into a format that can be transmitted over the Internet.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *url* | `string` |  *True* | The URL to encode.|",
        "example": "let url = @'https://www.bing.com/hello world/';\nprint original = url, encoded = url_encode_component(url)",
        "sourceLength": 1889
      }
    },
    {
      "name": "week_of_year",
      "category": "KQL Function",
      "documentation": {
        "title": "week_of_year()",
        "description": "Returns an integer that represents the week number. The week number is calculated from the first week of a year, which is the one that includes the first Thursday, according to ISO 8601.\n\n **Deprecated aliases:** weekofyear()\n\n> [!NOTE]\n> `weekofyear()` wasn't ISO 8601 compliant; the first week of a year was defined as the week with the year's first Wednesday in it.",
        "syntax": "`week_of_year(`*date*`)`",
        "returnInfo": "`week number` - The week number that contains the given date.",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *date* | `datetime` |  *True* | The date for which to return the week of the year.|",
        "example": "",
        "sourceLength": 2234
      }
    },
    {
      "name": "welch_test",
      "category": "KQL Function",
      "documentation": {
        "title": "welch_test()",
        "description": "Computes the p_value of the Welch-test function",
        "syntax": "`welch_test(`*mean1*`,` *variance1*`,` *count1*`,` *mean2*`,` *variance2*`,` *count2*`)`",
        "returnInfo": "From Wikipedia:\n\nIn statistics, Welch's t-test is a two-sample location test that's used to test the hypothesis that two populations have equal means.\nWelch's t-test is an adaptation of Student's t-test, and is more reliable when the two samples have unequal variances and unequal sample sizes. These tests are often referred to as \"unpaired\" or \"independent samples\" t-tests.\nThe tests are typically applied when the statistical units underlying the two samples being compared are non-overlapping.\nWelch's t-test is less popular than Student's t-test, and may be less familiar to readers. The test is also called \"Welch's unequal variances t-test\", or \"unequal variances t-test\".",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *mean1* | real or long |  *True* | The mean (average) value of the first series.|\n| *variance1* | real or long |  *True* | The variance value of the first series.|\n| *count1* | real or long |  *True* | The count of values in the first series.|\n| *mean2* | real or long |  *True* | The mean (average) value of the second series.|\n| *variance2* | real or long |  *True* | The variance value of the second series.|\n| *count2* | real or long |  *True* | The count of values in the second series.|",
        "example": "// s1, s2 values are from https://en.wikipedia.org/wiki/Welch%27s_t-test\nprint\n    s1 = dynamic([27.5, 21.0, 19.0, 23.6, 17.0, 17.9, 16.9, 20.1, 21.9, 22.6, 23.1, 19.6, 19.0, 21.7, 21.4]),\n    s2 = dynamic([27.1, 22.0, 20.8, 23.4, 23.4, 23.5, 25.8, 22.0, 24.8, 20.2, 21.9, 22.1, 22.9, 20.5, 24.4])\n| mv-expand s1 to typeof(double), s2 to typeof(double)\n| summarize m1=avg(s1), v1=variance(s1), c1=count(), m2=avg(s2), v2=variance(s2), c2=count()\n| extend pValue=welch_test(m1,v1,c1,m2,v2,c2)\n// pValue = 0.021",
        "sourceLength": 3294
      }
    },
    {
      "name": "zip",
      "category": "KQL Function",
      "documentation": {
        "title": "zip()",
        "description": "The `zip` function accepts any number of `dynamic` arrays, and returns an\narray whose elements are each an array holding the elements of the input\narrays of the same index.",
        "syntax": "`zip(`*arrays*`)`",
        "returnInfo": "",
        "parametersTable": "| Name | Type | Required | Description |\n|:--|:--|:--|:--|\n| *arrays* | `dynamic` |  *True* | The dynamic array values to zip. The function accepts between 2-16 arrays.|",
        "example": "print zip(dynamic([1,3,5]), dynamic([2,4,6]))\n\nprint zip(dynamic([\"A\", 1, 1.5]), dynamic([{}, \"B\"]))\n\ndatatable(a:int, b:string) [1,\"one\",2,\"two\",3,\"three\"]\n| summarize a = make_list(a), b = make_list(b)\n| project zip(a, b)",
        "sourceLength": 2369
      }
    },
    {
      "name": "all",
      "category": "KQL Function"
    },
    {
      "name": "any",
      "category": "KQL Function"
    },
    {
      "name": "array_iif",
      "category": "KQL Function"
    },
    {
      "name": "array_strcat",
      "category": "KQL Function"
    },
    {
      "name": "arraylength",
      "category": "KQL Function"
    },
    {
      "name": "bag_pack",
      "category": "KQL Function"
    },
    {
      "name": "bag_zip",
      "category": "KQL Function"
    },
    {
      "name": "base64_decodestring",
      "category": "KQL Function"
    },
    {
      "name": "base64_encodestring",
      "category": "KQL Function"
    },
    {
      "name": "columnifexists",
      "category": "KQL Function"
    },
    {
      "name": "current_cursor",
      "category": "KQL Function"
    },
    {
      "name": "current_node_id",
      "category": "KQL Function"
    },
    {
      "name": "cursor_current",
      "category": "KQL Function"
    },
    {
      "name": "datepart",
      "category": "KQL Function"
    },
    {
      "name": "datetime_list_timezones",
      "category": "KQL Function"
    },
    {
      "name": "dayofmonth",
      "category": "KQL Function"
    },
    {
      "name": "dayofweek",
      "category": "KQL Function"
    },
    {
      "name": "dayofyear",
      "category": "KQL Function"
    },
    {
      "name": "entity_group",
      "category": "KQL Function"
    },
    {
      "name": "extentid",
      "category": "KQL Function"
    },
    {
      "name": "extractall",
      "category": "KQL Function"
    },
    {
      "name": "extractjson",
      "category": "KQL Function"
    },
    {
      "name": "floor",
      "category": "KQL Function"
    },
    {
      "name": "getmonth",
      "category": "KQL Function"
    },
    {
      "name": "gzip_compress_to_base64_string",
      "category": "KQL Function"
    },
    {
      "name": "gzip_decompress_from_base64_string",
      "category": "KQL Function"
    },
    {
      "name": "hll_isvalid",
      "category": "KQL Function"
    },
    {
      "name": "hourofday",
      "category": "KQL Function"
    },
    {
      "name": "iif",
      "category": "KQL Function"
    },
    {
      "name": "inner_nodes",
      "category": "KQL Function"
    },
    {
      "name": "isascii",
      "category": "KQL Function"
    },
    {
      "name": "iscolumnexists",
      "category": "KQL Function"
    },
    {
      "name": "labels",
      "category": "KQL Function"
    },
    {
      "name": "make_string",
      "category": "KQL Function"
    },
    {
      "name": "map",
      "category": "KQL Function"
    },
    {
      "name": "node_degree_in",
      "category": "KQL Function"
    },
    {
      "name": "node_degree_out",
      "category": "KQL Function"
    },
    {
      "name": "node_id",
      "category": "KQL Function"
    },
    {
      "name": "notempty",
      "category": "KQL Function"
    },
    {
      "name": "notnull",
      "category": "KQL Function"
    },
    {
      "name": "pack_dictionary",
      "category": "KQL Function"
    },
    {
      "name": "parse_urlquery",
      "category": "KQL Function"
    },
    {
      "name": "parsejson",
      "category": "KQL Function"
    },
    {
      "name": "parseurl",
      "category": "KQL Function"
    },
    {
      "name": "parseurlquery",
      "category": "KQL Function"
    },
    {
      "name": "percentiles_array_tdigest",
      "category": "KQL Function"
    },
    {
      "name": "replace",
      "category": "KQL Function"
    },
    {
      "name": "row_rank",
      "category": "KQL Function"
    },
    {
      "name": "rowstore_ordinal_range",
      "category": "KQL Function"
    },
    {
      "name": "set_equals",
      "category": "KQL Function"
    },
    {
      "name": "tdigest_isvalid",
      "category": "KQL Function"
    },
    {
      "name": "tdigest_merge",
      "category": "KQL Function"
    },
    {
      "name": "to_utf8",
      "category": "KQL Function"
    },
    {
      "name": "toboolean",
      "category": "KQL Function"
    },
    {
      "name": "todouble",
      "category": "KQL Function"
    },
    {
      "name": "todynamic",
      "category": "KQL Function"
    },
    {
      "name": "toobject",
      "category": "KQL Function"
    },
    {
      "name": "totime",
      "category": "KQL Function"
    },
    {
      "name": "weekofyear",
      "category": "KQL Function"
    },
    {
      "name": "zlib_compress_to_base64_string",
      "category": "KQL Function"
    },
    {
      "name": "zlib_decompress_from_base64_string",
      "category": "KQL Function"
    }
  ],
  "aggregates": [
    {
      "name": "any",
      "category": "Aggregate Function"
    },
    {
      "name": "anyif",
      "category": "Aggregate Function"
    },
    {
      "name": "arg_max",
      "category": "Aggregate Function"
    },
    {
      "name": "arg_min",
      "category": "Aggregate Function"
    },
    {
      "name": "argmax",
      "category": "Aggregate Function"
    },
    {
      "name": "argmin",
      "category": "Aggregate Function"
    },
    {
      "name": "avg",
      "category": "Aggregate Function"
    },
    {
      "name": "avgif",
      "category": "Aggregate Function"
    },
    {
      "name": "binary_all_and",
      "category": "Aggregate Function"
    },
    {
      "name": "binary_all_or",
      "category": "Aggregate Function"
    },
    {
      "name": "binary_all_xor",
      "category": "Aggregate Function"
    },
    {
      "name": "buildschema",
      "category": "Aggregate Function"
    },
    {
      "name": "cnt",
      "category": "Aggregate Function"
    },
    {
      "name": "count",
      "category": "Aggregate Function"
    },
    {
      "name": "count_distinct",
      "category": "Aggregate Function"
    },
    {
      "name": "count_distinctif",
      "category": "Aggregate Function"
    },
    {
      "name": "countif",
      "category": "Aggregate Function"
    },
    {
      "name": "covariance",
      "category": "Aggregate Function"
    },
    {
      "name": "covarianceif",
      "category": "Aggregate Function"
    },
    {
      "name": "covariancep",
      "category": "Aggregate Function"
    },
    {
      "name": "covariancepif",
      "category": "Aggregate Function"
    },
    {
      "name": "dcount",
      "category": "Aggregate Function"
    },
    {
      "name": "dcountif",
      "category": "Aggregate Function"
    },
    {
      "name": "hll",
      "category": "Aggregate Function"
    },
    {
      "name": "hll_if",
      "category": "Aggregate Function"
    },
    {
      "name": "hll_merge",
      "category": "Aggregate Function"
    },
    {
      "name": "make_bag",
      "category": "Aggregate Function"
    },
    {
      "name": "make_bag_if",
      "category": "Aggregate Function"
    },
    {
      "name": "make_dictionary",
      "category": "Aggregate Function"
    },
    {
      "name": "make_list",
      "category": "Aggregate Function"
    },
    {
      "name": "make_list_if",
      "category": "Aggregate Function"
    },
    {
      "name": "make_list_with_nulls",
      "category": "Aggregate Function"
    },
    {
      "name": "make_set",
      "category": "Aggregate Function"
    },
    {
      "name": "make_set_if",
      "category": "Aggregate Function"
    },
    {
      "name": "makelist",
      "category": "Aggregate Function"
    },
    {
      "name": "makeset",
      "category": "Aggregate Function"
    },
    {
      "name": "max",
      "category": "Aggregate Function"
    },
    {
      "name": "maxif",
      "category": "Aggregate Function"
    },
    {
      "name": "merge_tdigest",
      "category": "Aggregate Function"
    },
    {
      "name": "min",
      "category": "Aggregate Function"
    },
    {
      "name": "minif",
      "category": "Aggregate Function"
    },
    {
      "name": "passthrough",
      "category": "Aggregate Function"
    },
    {
      "name": "percentile",
      "category": "Aggregate Function"
    },
    {
      "name": "percentiles",
      "category": "Aggregate Function"
    },
    {
      "name": "percentiles_array",
      "category": "Aggregate Function"
    },
    {
      "name": "percentilesw",
      "category": "Aggregate Function"
    },
    {
      "name": "percentilesw_array",
      "category": "Aggregate Function"
    },
    {
      "name": "percentilew",
      "category": "Aggregate Function"
    },
    {
      "name": "stdev",
      "category": "Aggregate Function"
    },
    {
      "name": "stdevif",
      "category": "Aggregate Function"
    },
    {
      "name": "stdevp",
      "category": "Aggregate Function"
    },
    {
      "name": "sum",
      "category": "Aggregate Function"
    },
    {
      "name": "sumif",
      "category": "Aggregate Function"
    },
    {
      "name": "take_any",
      "category": "Aggregate Function"
    },
    {
      "name": "take_anyif",
      "category": "Aggregate Function"
    },
    {
      "name": "tdigest",
      "category": "Aggregate Function"
    },
    {
      "name": "tdigest_merge",
      "category": "Aggregate Function"
    },
    {
      "name": "variance",
      "category": "Aggregate Function"
    },
    {
      "name": "varianceif",
      "category": "Aggregate Function"
    },
    {
      "name": "variancep",
      "category": "Aggregate Function"
    },
    {
      "name": "variancepif",
      "category": "Aggregate Function"
    }
  ],
  "lastUpdated": "2025-09-11T13:20:42.137Z"
}